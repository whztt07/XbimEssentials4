// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		23.09.2015 10:21:44
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.ProcessExtension;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ProductExtension;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.FacilitiesMgmtDomain
{
	[IndexedClass]
	[ExpressType("IFCMOVE", 74)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMove : IfcTask, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMove(IModel model) : base(model) 		{ 
			Model = model; 
			_punchList = new OptionalItemSet<IfcText>( this );
		}

		#region Explicit attribute fields
		private IfcSpatialStructureElement _moveFrom;
		private IfcSpatialStructureElement _moveTo;
		private OptionalItemSet<IfcText> _punchList;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(11, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcSpatialStructureElement @MoveFrom 
		{ 
			get 
			{
				if(Activated) return _moveFrom;
				
				Model.Activate(this, true);
				Activated = true;
				return _moveFrom;
			} 
			set
			{
				SetValue( v =>  _moveFrom = v, _moveFrom, value,  "MoveFrom");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcSpatialStructureElement @MoveTo 
		{ 
			get 
			{
				if(Activated) return _moveTo;
				
				Model.Activate(this, true);
				Activated = true;
				return _moveTo;
			} 
			set
			{
				SetValue( v =>  _moveTo = v, _moveTo, value,  "MoveTo");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.None, 1, -1)]
		public OptionalItemSet<IfcText> @PunchList 
		{ 
			get 
			{
				if(Activated) return _punchList;
				
				Model.Activate(this, true);
				Activated = true;
				return _punchList;
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
					base.Parse(propIndex, value); 
					return;
				case 10: 
					_moveFrom = (IfcSpatialStructureElement)(value.EntityVal);
					return;
				case 11: 
					_moveTo = (IfcSpatialStructureElement)(value.EntityVal);
					return;
				case 12: 
					if (_punchList == null) _punchList = new OptionalItemSet<IfcText>( this );
					_punchList.InternalAdd(value.StringVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : SIZEOF(SELF\IfcProcess.OperatesOn) >= 1;*/
		/*WR2:              )) >= 1;*/
		/*WR3:	WR3 : EXISTS(SELF\IfcRoot.Name);*/
		}
		#endregion
	}
}