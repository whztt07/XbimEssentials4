// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:43:56
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ProcessExtension
{
	[EntityName("IFCPROCEDURE", 294)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcProcedure : IfcProcess, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcProcedure(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcIdentifier _procedureID;
		private IfcProcedureTypeEnum _procedureType;
		private IfcLabel? _userDefinedProcedureType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcIdentifier @ProcedureID 
		{ 
			get 
			{
				if(Activated) return _procedureID;
				
				Model.Activate(this, true);
				Activated = true;
				return _procedureID;
			} 
			set
			{
				SetValue( v =>  _procedureID = v, _procedureID, value,  "ProcedureID");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public IfcProcedureTypeEnum @ProcedureType 
		{ 
			get 
			{
				if(Activated) return _procedureType;
				
				Model.Activate(this, true);
				Activated = true;
				return _procedureType;
			} 
			set
			{
				SetValue( v =>  _procedureType = v, _procedureType, value,  "ProcedureType");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedProcedureType 
		{ 
			get 
			{
				if(Activated) return _userDefinedProcedureType;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedProcedureType;
			} 
			set
			{
				SetValue( v =>  _userDefinedProcedureType = v, _userDefinedProcedureType, value,  "UserDefinedProcedureType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value); 
					return;
				case 5: 
					_procedureID = value.StringVal;
					return;
				case 6: 
                    _procedureType = (IfcProcedureTypeEnum) System.Enum.Parse(typeof (IfcProcedureTypeEnum), value.EnumVal, true);
					return;
				case 7: 
					_userDefinedProcedureType = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.Decomposes | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;*/
		/*WR2:	WR2 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.IsDecomposedBy | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;*/
		/*WR3:	WR3 : EXISTS(SELF\IfcRoot.Name);*/
		/*WR4:            ((ProcedureType = IfcProcedureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcProcedure.UserDefinedProcedureType));*/
		}
		#endregion
	}
}