// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:13
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCOPTICALMATERIALPROPERTIES", 336)]
	public  partial class @IfcOpticalMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcOpticalMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveRatioMeasure? _visibleTransmittance;
		private IfcPositiveRatioMeasure? _solarTransmittance;
		private IfcPositiveRatioMeasure? _thermalIrTransmittance;
		private IfcPositiveRatioMeasure? _thermalIrEmissivityBack;
		private IfcPositiveRatioMeasure? _thermalIrEmissivityFront;
		private IfcPositiveRatioMeasure? _visibleReflectanceBack;
		private IfcPositiveRatioMeasure? _visibleReflectanceFront;
		private IfcPositiveRatioMeasure? _solarReflectanceFront;
		private IfcPositiveRatioMeasure? _solarReflectanceBack;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @VisibleTransmittance 
		{ 
			get 
			{
				if(Activated) return _visibleTransmittance;
				
				Model.Activate(this, true);
				Activated = true;
				return _visibleTransmittance;
			} 
			set
			{
				SetValue( v =>  _visibleTransmittance = v, _visibleTransmittance, value,  "VisibleTransmittance");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @SolarTransmittance 
		{ 
			get 
			{
				if(Activated) return _solarTransmittance;
				
				Model.Activate(this, true);
				Activated = true;
				return _solarTransmittance;
			} 
			set
			{
				SetValue( v =>  _solarTransmittance = v, _solarTransmittance, value,  "SolarTransmittance");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ThermalIrTransmittance 
		{ 
			get 
			{
				if(Activated) return _thermalIrTransmittance;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalIrTransmittance;
			} 
			set
			{
				SetValue( v =>  _thermalIrTransmittance = v, _thermalIrTransmittance, value,  "ThermalIrTransmittance");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ThermalIrEmissivityBack 
		{ 
			get 
			{
				if(Activated) return _thermalIrEmissivityBack;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalIrEmissivityBack;
			} 
			set
			{
				SetValue( v =>  _thermalIrEmissivityBack = v, _thermalIrEmissivityBack, value,  "ThermalIrEmissivityBack");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ThermalIrEmissivityFront 
		{ 
			get 
			{
				if(Activated) return _thermalIrEmissivityFront;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalIrEmissivityFront;
			} 
			set
			{
				SetValue( v =>  _thermalIrEmissivityFront = v, _thermalIrEmissivityFront, value,  "ThermalIrEmissivityFront");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @VisibleReflectanceBack 
		{ 
			get 
			{
				if(Activated) return _visibleReflectanceBack;
				
				Model.Activate(this, true);
				Activated = true;
				return _visibleReflectanceBack;
			} 
			set
			{
				SetValue( v =>  _visibleReflectanceBack = v, _visibleReflectanceBack, value,  "VisibleReflectanceBack");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @VisibleReflectanceFront 
		{ 
			get 
			{
				if(Activated) return _visibleReflectanceFront;
				
				Model.Activate(this, true);
				Activated = true;
				return _visibleReflectanceFront;
			} 
			set
			{
				SetValue( v =>  _visibleReflectanceFront = v, _visibleReflectanceFront, value,  "VisibleReflectanceFront");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @SolarReflectanceFront 
		{ 
			get 
			{
				if(Activated) return _solarReflectanceFront;
				
				Model.Activate(this, true);
				Activated = true;
				return _solarReflectanceFront;
			} 
			set
			{
				SetValue( v =>  _solarReflectanceFront = v, _solarReflectanceFront, value,  "SolarReflectanceFront");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @SolarReflectanceBack 
		{ 
			get 
			{
				if(Activated) return _solarReflectanceBack;
				
				Model.Activate(this, true);
				Activated = true;
				return _solarReflectanceBack;
			} 
			set
			{
				SetValue( v =>  _solarReflectanceBack = v, _solarReflectanceBack, value,  "SolarReflectanceBack");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"VisibleTransmittance",
			"SolarTransmittance",
			"ThermalIrTransmittance",
			"ThermalIrEmissivityBack",
			"ThermalIrEmissivityFront",
			"VisibleReflectanceBack",
			"VisibleReflectanceFront",
			"SolarReflectanceFront",
			"SolarReflectanceBack",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @VisibleTransmittance;
				case 2: 
					return @SolarTransmittance;
				case 3: 
					return @ThermalIrTransmittance;
				case 4: 
					return @ThermalIrEmissivityBack;
				case 5: 
					return @ThermalIrEmissivityFront;
				case 6: 
					return @VisibleReflectanceBack;
				case 7: 
					return @VisibleReflectanceFront;
				case 8: 
					return @SolarReflectanceFront;
				case 9: 
					return @SolarReflectanceBack;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "VisibleTransmittance":  
					return @VisibleTransmittance;
				case "SolarTransmittance":  
					return @SolarTransmittance;
				case "ThermalIrTransmittance":  
					return @ThermalIrTransmittance;
				case "ThermalIrEmissivityBack":  
					return @ThermalIrEmissivityBack;
				case "ThermalIrEmissivityFront":  
					return @ThermalIrEmissivityFront;
				case "VisibleReflectanceBack":  
					return @VisibleReflectanceBack;
				case "VisibleReflectanceFront":  
					return @VisibleReflectanceFront;
				case "SolarReflectanceFront":  
					return @SolarReflectanceFront;
				case "SolarReflectanceBack":  
					return @SolarReflectanceBack;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @VisibleTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case 2:
					 @SolarTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case 3:
					 @ThermalIrTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case 4:
					 @ThermalIrEmissivityBack = (IfcPositiveRatioMeasure?)value;
					 break;
				case 5:
					 @ThermalIrEmissivityFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case 6:
					 @VisibleReflectanceBack = (IfcPositiveRatioMeasure?)value;
					 break;
				case 7:
					 @VisibleReflectanceFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case 8:
					 @SolarReflectanceFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case 9:
					 @SolarReflectanceBack = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "VisibleTransmittance":
					 @VisibleTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case "SolarTransmittance":
					 @SolarTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ThermalIrTransmittance":
					 @ThermalIrTransmittance = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ThermalIrEmissivityBack":
					 @ThermalIrEmissivityBack = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ThermalIrEmissivityFront":
					 @ThermalIrEmissivityFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case "VisibleReflectanceBack":
					 @VisibleReflectanceBack = (IfcPositiveRatioMeasure?)value;
					 break;
				case "VisibleReflectanceFront":
					 @VisibleReflectanceFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case "SolarReflectanceFront":
					 @SolarReflectanceFront = (IfcPositiveRatioMeasure?)value;
					 break;
				case "SolarReflectanceBack":
					 @SolarReflectanceBack = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}