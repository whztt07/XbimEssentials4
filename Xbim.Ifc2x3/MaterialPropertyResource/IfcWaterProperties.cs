// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[ExpressType("IFCWATERPROPERTIES", 721)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcWaterProperties : IfcMaterialProperties, IInstantiableEntity, System.Collections.Generic.IEqualityComparer<@IfcWaterProperties>, System.IEquatable<@IfcWaterProperties>
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcWaterProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private bool? _isPotable;
		private IfcIonConcentrationMeasure? _hardness;
		private IfcIonConcentrationMeasure? _alkalinityConcentration;
		private IfcIonConcentrationMeasure? _acidityConcentration;
		private IfcNormalisedRatioMeasure? _impuritiesContent;
		private IfcPHMeasure? _pHLevel;
		private IfcNormalisedRatioMeasure? _dissolvedSolidsContent;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public bool? @IsPotable 
		{ 
			get 
			{
				if(Activated) return _isPotable;
				
				Model.Activate(this, true);
				Activated = true;
				return _isPotable;
			} 
			set
			{
				SetValue( v =>  _isPotable = v, _isPotable, value,  "IsPotable");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcIonConcentrationMeasure? @Hardness 
		{ 
			get 
			{
				if(Activated) return _hardness;
				
				Model.Activate(this, true);
				Activated = true;
				return _hardness;
			} 
			set
			{
				SetValue( v =>  _hardness = v, _hardness, value,  "Hardness");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcIonConcentrationMeasure? @AlkalinityConcentration 
		{ 
			get 
			{
				if(Activated) return _alkalinityConcentration;
				
				Model.Activate(this, true);
				Activated = true;
				return _alkalinityConcentration;
			} 
			set
			{
				SetValue( v =>  _alkalinityConcentration = v, _alkalinityConcentration, value,  "AlkalinityConcentration");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcIonConcentrationMeasure? @AcidityConcentration 
		{ 
			get 
			{
				if(Activated) return _acidityConcentration;
				
				Model.Activate(this, true);
				Activated = true;
				return _acidityConcentration;
			} 
			set
			{
				SetValue( v =>  _acidityConcentration = v, _acidityConcentration, value,  "AcidityConcentration");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcNormalisedRatioMeasure? @ImpuritiesContent 
		{ 
			get 
			{
				if(Activated) return _impuritiesContent;
				
				Model.Activate(this, true);
				Activated = true;
				return _impuritiesContent;
			} 
			set
			{
				SetValue( v =>  _impuritiesContent = v, _impuritiesContent, value,  "ImpuritiesContent");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcPHMeasure? @PHLevel 
		{ 
			get 
			{
				if(Activated) return _pHLevel;
				
				Model.Activate(this, true);
				Activated = true;
				return _pHLevel;
			} 
			set
			{
				SetValue( v =>  _pHLevel = v, _pHLevel, value,  "PHLevel");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcNormalisedRatioMeasure? @DissolvedSolidsContent 
		{ 
			get 
			{
				if(Activated) return _dissolvedSolidsContent;
				
				Model.Activate(this, true);
				Activated = true;
				return _dissolvedSolidsContent;
			} 
			set
			{
				SetValue( v =>  _dissolvedSolidsContent = v, _dissolvedSolidsContent, value,  "DissolvedSolidsContent");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_isPotable = value.BooleanVal;
					return;
				case 2: 
					_hardness = value.RealVal;
					return;
				case 3: 
					_alkalinityConcentration = value.RealVal;
					return;
				case 4: 
					_acidityConcentration = value.RealVal;
					return;
				case 5: 
					_impuritiesContent = value.RealVal;
					return;
				case 6: 
					_pHLevel = value.RealVal;
					return;
				case 7: 
					_dissolvedSolidsContent = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcWaterProperties other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @IfcWaterProperties
            var root = (@IfcWaterProperties)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@IfcWaterProperties left, @IfcWaterProperties right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcWaterProperties left, @IfcWaterProperties right)
        {
            return !(left == right);
        }


        public bool Equals(@IfcWaterProperties x, @IfcWaterProperties y)
        {
            return x == y;
        }

        public int GetHashCode(@IfcWaterProperties obj)
        {
            return obj == null ? -1 : obj.GetHashCode();
        }
        #endregion
	}
}