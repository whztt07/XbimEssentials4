// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:19
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCHYGROSCOPICMATERIALPROPERTIES", 717)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcHygroscopicMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcHygroscopicMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveRatioMeasure? _upperVaporResistanceFactor;
		private IfcPositiveRatioMeasure? _lowerVaporResistanceFactor;
		private IfcIsothermalMoistureCapacityMeasure? _isothermalMoistureCapacity;
		private IfcVaporPermeabilityMeasure? _vaporPermeability;
		private IfcMoistureDiffusivityMeasure? _moistureDiffusivity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @UpperVaporResistanceFactor 
		{ 
			get 
			{
				if(Activated) return _upperVaporResistanceFactor;
				
				Model.Activate(this, true);
				Activated = true;
				return _upperVaporResistanceFactor;
			} 
			set
			{
				SetValue( v =>  _upperVaporResistanceFactor = v, _upperVaporResistanceFactor, value,  "UpperVaporResistanceFactor");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @LowerVaporResistanceFactor 
		{ 
			get 
			{
				if(Activated) return _lowerVaporResistanceFactor;
				
				Model.Activate(this, true);
				Activated = true;
				return _lowerVaporResistanceFactor;
			} 
			set
			{
				SetValue( v =>  _lowerVaporResistanceFactor = v, _lowerVaporResistanceFactor, value,  "LowerVaporResistanceFactor");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcIsothermalMoistureCapacityMeasure? @IsothermalMoistureCapacity 
		{ 
			get 
			{
				if(Activated) return _isothermalMoistureCapacity;
				
				Model.Activate(this, true);
				Activated = true;
				return _isothermalMoistureCapacity;
			} 
			set
			{
				SetValue( v =>  _isothermalMoistureCapacity = v, _isothermalMoistureCapacity, value,  "IsothermalMoistureCapacity");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcVaporPermeabilityMeasure? @VaporPermeability 
		{ 
			get 
			{
				if(Activated) return _vaporPermeability;
				
				Model.Activate(this, true);
				Activated = true;
				return _vaporPermeability;
			} 
			set
			{
				SetValue( v =>  _vaporPermeability = v, _vaporPermeability, value,  "VaporPermeability");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcMoistureDiffusivityMeasure? @MoistureDiffusivity 
		{ 
			get 
			{
				if(Activated) return _moistureDiffusivity;
				
				Model.Activate(this, true);
				Activated = true;
				return _moistureDiffusivity;
			} 
			set
			{
				SetValue( v =>  _moistureDiffusivity = v, _moistureDiffusivity, value,  "MoistureDiffusivity");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Material",
			"UpperVaporResistanceFactor",
			"LowerVaporResistanceFactor",
			"IsothermalMoistureCapacity",
			"VaporPermeability",
			"MoistureDiffusivity",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @UpperVaporResistanceFactor;
				case 2: 
					return @LowerVaporResistanceFactor;
				case 3: 
					return @IsothermalMoistureCapacity;
				case 4: 
					return @VaporPermeability;
				case 5: 
					return @MoistureDiffusivity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "UpperVaporResistanceFactor":  
					return @UpperVaporResistanceFactor;
				case "LowerVaporResistanceFactor":  
					return @LowerVaporResistanceFactor;
				case "IsothermalMoistureCapacity":  
					return @IsothermalMoistureCapacity;
				case "VaporPermeability":  
					return @VaporPermeability;
				case "MoistureDiffusivity":  
					return @MoistureDiffusivity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @UpperVaporResistanceFactor = (IfcPositiveRatioMeasure?)value;
					 break;
				case 2:
					 @LowerVaporResistanceFactor = (IfcPositiveRatioMeasure?)value;
					 break;
				case 3:
					 @IsothermalMoistureCapacity = (IfcIsothermalMoistureCapacityMeasure?)value;
					 break;
				case 4:
					 @VaporPermeability = (IfcVaporPermeabilityMeasure?)value;
					 break;
				case 5:
					 @MoistureDiffusivity = (IfcMoistureDiffusivityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "UpperVaporResistanceFactor":
					 @UpperVaporResistanceFactor = (IfcPositiveRatioMeasure?)value;
					 break;
				case "LowerVaporResistanceFactor":
					 @LowerVaporResistanceFactor = (IfcPositiveRatioMeasure?)value;
					 break;
				case "IsothermalMoistureCapacity":
					 @IsothermalMoistureCapacity = (IfcIsothermalMoistureCapacityMeasure?)value;
					 break;
				case "VaporPermeability":
					 @VaporPermeability = (IfcVaporPermeabilityMeasure?)value;
					 break;
				case "MoistureDiffusivity":
					 @MoistureDiffusivity = (IfcMoistureDiffusivityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_upperVaporResistanceFactor = value.RealVal;
					return;
				case 2: 
					_lowerVaporResistanceFactor = value.RealVal;
					return;
				case 3: 
					_isothermalMoistureCapacity = value.RealVal;
					return;
				case 4: 
					_vaporPermeability = value.RealVal;
					return;
				case 5: 
					_moistureDiffusivity = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}