// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:15
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCTHERMALMATERIALPROPERTIES", 611)]
	public  partial class @IfcThermalMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcThermalMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSpecificHeatCapacityMeasure? _specificHeatCapacity;
		private IfcThermodynamicTemperatureMeasure? _boilingPoint;
		private IfcThermodynamicTemperatureMeasure? _freezingPoint;
		private IfcThermalConductivityMeasure? _thermalConductivity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcSpecificHeatCapacityMeasure? @SpecificHeatCapacity 
		{ 
			get 
			{
				if(Activated) return _specificHeatCapacity;
				
				Model.Activate(this, true);
				Activated = true;
				return _specificHeatCapacity;
			} 
			set
			{
				SetValue( v =>  _specificHeatCapacity = v, _specificHeatCapacity, value,  "SpecificHeatCapacity");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @BoilingPoint 
		{ 
			get 
			{
				if(Activated) return _boilingPoint;
				
				Model.Activate(this, true);
				Activated = true;
				return _boilingPoint;
			} 
			set
			{
				SetValue( v =>  _boilingPoint = v, _boilingPoint, value,  "BoilingPoint");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @FreezingPoint 
		{ 
			get 
			{
				if(Activated) return _freezingPoint;
				
				Model.Activate(this, true);
				Activated = true;
				return _freezingPoint;
			} 
			set
			{
				SetValue( v =>  _freezingPoint = v, _freezingPoint, value,  "FreezingPoint");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcThermalConductivityMeasure? @ThermalConductivity 
		{ 
			get 
			{
				if(Activated) return _thermalConductivity;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalConductivity;
			} 
			set
			{
				SetValue( v =>  _thermalConductivity = v, _thermalConductivity, value,  "ThermalConductivity");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"SpecificHeatCapacity",
			"BoilingPoint",
			"FreezingPoint",
			"ThermalConductivity",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @SpecificHeatCapacity;
				case 2: 
					return @BoilingPoint;
				case 3: 
					return @FreezingPoint;
				case 4: 
					return @ThermalConductivity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "SpecificHeatCapacity":  
					return @SpecificHeatCapacity;
				case "BoilingPoint":  
					return @BoilingPoint;
				case "FreezingPoint":  
					return @FreezingPoint;
				case "ThermalConductivity":  
					return @ThermalConductivity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @SpecificHeatCapacity = (IfcSpecificHeatCapacityMeasure?)value;
					 break;
				case 2:
					 @BoilingPoint = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 3:
					 @FreezingPoint = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 4:
					 @ThermalConductivity = (IfcThermalConductivityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "SpecificHeatCapacity":
					 @SpecificHeatCapacity = (IfcSpecificHeatCapacityMeasure?)value;
					 break;
				case "BoilingPoint":
					 @BoilingPoint = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "FreezingPoint":
					 @FreezingPoint = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "ThermalConductivity":
					 @ThermalConductivity = (IfcThermalConductivityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}