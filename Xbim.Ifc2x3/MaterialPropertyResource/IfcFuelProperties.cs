// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:35
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCFUELPROPERTIES", 715)]
	public  partial class @IfcFuelProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcFuelProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcThermodynamicTemperatureMeasure? _combustionTemperature;
		private IfcPositiveRatioMeasure? _carbonContent;
		private IfcHeatingValueMeasure? _lowerHeatingValue;
		private IfcHeatingValueMeasure? _higherHeatingValue;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @CombustionTemperature 
		{ 
			get 
			{
				if(Activated) return _combustionTemperature;
				
				Model.Activate(this, true);
				Activated = true;
				return _combustionTemperature;
			} 
			set
			{
				SetValue( v =>  _combustionTemperature = v, _combustionTemperature, value,  "CombustionTemperature");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @CarbonContent 
		{ 
			get 
			{
				if(Activated) return _carbonContent;
				
				Model.Activate(this, true);
				Activated = true;
				return _carbonContent;
			} 
			set
			{
				SetValue( v =>  _carbonContent = v, _carbonContent, value,  "CarbonContent");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcHeatingValueMeasure? @LowerHeatingValue 
		{ 
			get 
			{
				if(Activated) return _lowerHeatingValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _lowerHeatingValue;
			} 
			set
			{
				SetValue( v =>  _lowerHeatingValue = v, _lowerHeatingValue, value,  "LowerHeatingValue");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcHeatingValueMeasure? @HigherHeatingValue 
		{ 
			get 
			{
				if(Activated) return _higherHeatingValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _higherHeatingValue;
			} 
			set
			{
				SetValue( v =>  _higherHeatingValue = v, _higherHeatingValue, value,  "HigherHeatingValue");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"CombustionTemperature",
			"CarbonContent",
			"LowerHeatingValue",
			"HigherHeatingValue",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @CombustionTemperature;
				case 2: 
					return @CarbonContent;
				case 3: 
					return @LowerHeatingValue;
				case 4: 
					return @HigherHeatingValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "CombustionTemperature":  
					return @CombustionTemperature;
				case "CarbonContent":  
					return @CarbonContent;
				case "LowerHeatingValue":  
					return @LowerHeatingValue;
				case "HigherHeatingValue":  
					return @HigherHeatingValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @CombustionTemperature = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 2:
					 @CarbonContent = (IfcPositiveRatioMeasure?)value;
					 break;
				case 3:
					 @LowerHeatingValue = (IfcHeatingValueMeasure?)value;
					 break;
				case 4:
					 @HigherHeatingValue = (IfcHeatingValueMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "CombustionTemperature":
					 @CombustionTemperature = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "CarbonContent":
					 @CarbonContent = (IfcPositiveRatioMeasure?)value;
					 break;
				case "LowerHeatingValue":
					 @LowerHeatingValue = (IfcHeatingValueMeasure?)value;
					 break;
				case "HigherHeatingValue":
					 @HigherHeatingValue = (IfcHeatingValueMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}