// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:38
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.PropertyResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCEXTENDEDMATERIALPROPERTIES")]
	public  partial class @IfcExtendedMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcExtendedMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
			_extendedProperties = new ItemSet<IfcProperty>( model );
		}

		#region Explicit attribute fields
		private ItemSet<IfcProperty> _extendedProperties;
		private IfcText? _description;
		private IfcLabel _name;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public ItemSet<IfcProperty> @ExtendedProperties 
		{ 
			get 
			{
				if(IsActivated) return _extendedProperties;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _extendedProperties;
			} 
			set
			{
				SetValue( v =>  _extendedProperties = v, _extendedProperties, value,  "ExtendedProperties");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(IsActivated) return _description;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcLabel @Name 
		{ 
			get 
			{
				if(IsActivated) return _name;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"ExtendedProperties",
			"Description",
			"Name",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @ExtendedProperties;
				case 2: 
					return @Description;
				case 3: 
					return @Name;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "ExtendedProperties":  
					return @ExtendedProperties;
				case "Description":  
					return @Description;
				case "Name":  
					return @Name;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @ExtendedProperties.Add((IfcProperty)value);
					 break;
				case 2:
					 @Description = (IfcText?)value;
					 break;
				case 3:
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "ExtendedProperties":
					 @ExtendedProperties.Add((IfcProperty)value);
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "Name":
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}