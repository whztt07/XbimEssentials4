// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:38
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCGENERALMATERIALPROPERTIES")]
	public  partial class @IfcGeneralMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcGeneralMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcMolecularWeightMeasure? _molecularWeight;
		private IfcNormalisedRatioMeasure? _porosity;
		private IfcMassDensityMeasure? _massDensity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcMolecularWeightMeasure? @MolecularWeight 
		{ 
			get 
			{
				if(IsActivated) return _molecularWeight;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _molecularWeight;
			} 
			set
			{
				SetValue( v =>  _molecularWeight = v, _molecularWeight, value,  "MolecularWeight");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcNormalisedRatioMeasure? @Porosity 
		{ 
			get 
			{
				if(IsActivated) return _porosity;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _porosity;
			} 
			set
			{
				SetValue( v =>  _porosity = v, _porosity, value,  "Porosity");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcMassDensityMeasure? @MassDensity 
		{ 
			get 
			{
				if(IsActivated) return _massDensity;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _massDensity;
			} 
			set
			{
				SetValue( v =>  _massDensity = v, _massDensity, value,  "MassDensity");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"MolecularWeight",
			"Porosity",
			"MassDensity",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @MolecularWeight;
				case 2: 
					return @Porosity;
				case 3: 
					return @MassDensity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "MolecularWeight":  
					return @MolecularWeight;
				case "Porosity":  
					return @Porosity;
				case "MassDensity":  
					return @MassDensity;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @MolecularWeight = (IfcMolecularWeightMeasure?)value;
					 break;
				case 2:
					 @Porosity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case 3:
					 @MassDensity = (IfcMassDensityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "MolecularWeight":
					 @MolecularWeight = (IfcMolecularWeightMeasure?)value;
					 break;
				case "Porosity":
					 @Porosity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case "MassDensity":
					 @MassDensity = (IfcMassDensityMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}