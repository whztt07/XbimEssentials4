// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:43:56
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCMECHANICALMATERIALPROPERTIES", 436)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMechanicalMaterialProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMechanicalMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDynamicViscosityMeasure? _dynamicViscosity;
		private IfcModulusOfElasticityMeasure? _youngModulus;
		private IfcModulusOfElasticityMeasure? _shearModulus;
		private IfcPositiveRatioMeasure? _poissonRatio;
		private IfcThermalExpansionCoefficientMeasure? _thermalExpansionCoefficient;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(1, EntityAttributeState.Optional)]
		public IfcDynamicViscosityMeasure? @DynamicViscosity 
		{ 
			get 
			{
				if(Activated) return _dynamicViscosity;
				
				Model.Activate(this, true);
				Activated = true;
				return _dynamicViscosity;
			} 
			set
			{
				SetValue( v =>  _dynamicViscosity = v, _dynamicViscosity, value,  "DynamicViscosity");
			} 
		}
	
		[EntityAttributee(2, EntityAttributeState.Optional)]
		public IfcModulusOfElasticityMeasure? @YoungModulus 
		{ 
			get 
			{
				if(Activated) return _youngModulus;
				
				Model.Activate(this, true);
				Activated = true;
				return _youngModulus;
			} 
			set
			{
				SetValue( v =>  _youngModulus = v, _youngModulus, value,  "YoungModulus");
			} 
		}
	
		[EntityAttributee(3, EntityAttributeState.Optional)]
		public IfcModulusOfElasticityMeasure? @ShearModulus 
		{ 
			get 
			{
				if(Activated) return _shearModulus;
				
				Model.Activate(this, true);
				Activated = true;
				return _shearModulus;
			} 
			set
			{
				SetValue( v =>  _shearModulus = v, _shearModulus, value,  "ShearModulus");
			} 
		}
	
		[EntityAttributee(4, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @PoissonRatio 
		{ 
			get 
			{
				if(Activated) return _poissonRatio;
				
				Model.Activate(this, true);
				Activated = true;
				return _poissonRatio;
			} 
			set
			{
				SetValue( v =>  _poissonRatio = v, _poissonRatio, value,  "PoissonRatio");
			} 
		}
	
		[EntityAttributee(5, EntityAttributeState.Optional)]
		public IfcThermalExpansionCoefficientMeasure? @ThermalExpansionCoefficient 
		{ 
			get 
			{
				if(Activated) return _thermalExpansionCoefficient;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalExpansionCoefficient;
			} 
			set
			{
				SetValue( v =>  _thermalExpansionCoefficient = v, _thermalExpansionCoefficient, value,  "ThermalExpansionCoefficient");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_dynamicViscosity = value.RealVal;
					return;
				case 2: 
					_youngModulus = value.RealVal;
					return;
				case 3: 
					_shearModulus = value.RealVal;
					return;
				case 4: 
					_poissonRatio = value.RealVal;
					return;
				case 5: 
					_thermalExpansionCoefficient = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR21:	WR21 : NOT(EXISTS(YoungModulus)) OR (YoungModulus >= 0.0);*/
		/*WR22:	WR22 : NOT(EXISTS(ShearModulus)) OR (ShearModulus >= 0.0);*/
		}
		#endregion
	}
}