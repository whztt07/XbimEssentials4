// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[ExpressType("IFCMECHANICALMATERIALPROPERTIES", 436)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMechanicalMaterialProperties : IfcMaterialProperties, IInstantiableEntity, System.Collections.Generic.IEqualityComparer<@IfcMechanicalMaterialProperties>, System.IEquatable<@IfcMechanicalMaterialProperties>
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMechanicalMaterialProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDynamicViscosityMeasure? _dynamicViscosity;
		private IfcModulusOfElasticityMeasure? _youngModulus;
		private IfcModulusOfElasticityMeasure? _shearModulus;
		private IfcPositiveRatioMeasure? _poissonRatio;
		private IfcThermalExpansionCoefficientMeasure? _thermalExpansionCoefficient;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcDynamicViscosityMeasure? @DynamicViscosity 
		{ 
			get 
			{
				if(Activated) return _dynamicViscosity;
				
				Model.Activate(this, true);
				Activated = true;
				return _dynamicViscosity;
			} 
			set
			{
				SetValue( v =>  _dynamicViscosity = v, _dynamicViscosity, value,  "DynamicViscosity");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcModulusOfElasticityMeasure? @YoungModulus 
		{ 
			get 
			{
				if(Activated) return _youngModulus;
				
				Model.Activate(this, true);
				Activated = true;
				return _youngModulus;
			} 
			set
			{
				SetValue( v =>  _youngModulus = v, _youngModulus, value,  "YoungModulus");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcModulusOfElasticityMeasure? @ShearModulus 
		{ 
			get 
			{
				if(Activated) return _shearModulus;
				
				Model.Activate(this, true);
				Activated = true;
				return _shearModulus;
			} 
			set
			{
				SetValue( v =>  _shearModulus = v, _shearModulus, value,  "ShearModulus");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcPositiveRatioMeasure? @PoissonRatio 
		{ 
			get 
			{
				if(Activated) return _poissonRatio;
				
				Model.Activate(this, true);
				Activated = true;
				return _poissonRatio;
			} 
			set
			{
				SetValue( v =>  _poissonRatio = v, _poissonRatio, value,  "PoissonRatio");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcThermalExpansionCoefficientMeasure? @ThermalExpansionCoefficient 
		{ 
			get 
			{
				if(Activated) return _thermalExpansionCoefficient;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalExpansionCoefficient;
			} 
			set
			{
				SetValue( v =>  _thermalExpansionCoefficient = v, _thermalExpansionCoefficient, value,  "ThermalExpansionCoefficient");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_dynamicViscosity = value.RealVal;
					return;
				case 2: 
					_youngModulus = value.RealVal;
					return;
				case 3: 
					_shearModulus = value.RealVal;
					return;
				case 4: 
					_poissonRatio = value.RealVal;
					return;
				case 5: 
					_thermalExpansionCoefficient = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR21:	WR21 : NOT(EXISTS(YoungModulus)) OR (YoungModulus >= 0.0);*/
		/*WR22:	WR22 : NOT(EXISTS(ShearModulus)) OR (ShearModulus >= 0.0);*/
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcMechanicalMaterialProperties other)
	    {
	        return this == other;
	    }


        public static bool operator ==(@IfcMechanicalMaterialProperties left, @IfcMechanicalMaterialProperties right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcMechanicalMaterialProperties left, @IfcMechanicalMaterialProperties right)
        {
            return !(left == right);
        }


        public bool Equals(@IfcMechanicalMaterialProperties x, @IfcMechanicalMaterialProperties y)
        {
            return x == y;
        }

        public int GetHashCode(@IfcMechanicalMaterialProperties obj)
        {
            return obj == null ? -1 : obj.GetHashCode();
        }
        #endregion
	}
}