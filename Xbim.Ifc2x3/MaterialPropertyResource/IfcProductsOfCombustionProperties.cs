// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		24.09.2015 10:03:34
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[IndexedClass]
	[ExpressType("IFCPRODUCTSOFCOMBUSTIONPROPERTIES", 719)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcProductsOfCombustionProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcProductsOfCombustionProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSpecificHeatCapacityMeasure? _specificHeatCapacity;
		private IfcPositiveRatioMeasure? _n20Content;
		private IfcPositiveRatioMeasure? _cOContent;
		private IfcPositiveRatioMeasure? _cO2Content;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcSpecificHeatCapacityMeasure? @SpecificHeatCapacity 
		{ 
			get 
			{
				if(Activated) return _specificHeatCapacity;
				
				Model.Activate(this, true);
				Activated = true;
				return _specificHeatCapacity;
			} 
			set
			{
				SetValue( v =>  _specificHeatCapacity = v, _specificHeatCapacity, value,  "SpecificHeatCapacity");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcPositiveRatioMeasure? @N20Content 
		{ 
			get 
			{
				if(Activated) return _n20Content;
				
				Model.Activate(this, true);
				Activated = true;
				return _n20Content;
			} 
			set
			{
				SetValue( v =>  _n20Content = v, _n20Content, value,  "N20Content");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcPositiveRatioMeasure? @COContent 
		{ 
			get 
			{
				if(Activated) return _cOContent;
				
				Model.Activate(this, true);
				Activated = true;
				return _cOContent;
			} 
			set
			{
				SetValue( v =>  _cOContent = v, _cOContent, value,  "COContent");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcPositiveRatioMeasure? @CO2Content 
		{ 
			get 
			{
				if(Activated) return _cO2Content;
				
				Model.Activate(this, true);
				Activated = true;
				return _cO2Content;
			} 
			set
			{
				SetValue( v =>  _cO2Content = v, _cO2Content, value,  "CO2Content");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_specificHeatCapacity = value.RealVal;
					return;
				case 2: 
					_n20Content = value.RealVal;
					return;
				case 3: 
					_cOContent = value.RealVal;
					return;
				case 4: 
					_cO2Content = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}