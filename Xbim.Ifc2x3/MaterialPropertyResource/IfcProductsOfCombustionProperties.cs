// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:04:17
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[EntityName("IFCPRODUCTSOFCOMBUSTIONPROPERTIES", 719)]
	public  partial class @IfcProductsOfCombustionProperties : IfcMaterialProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcProductsOfCombustionProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSpecificHeatCapacityMeasure? _specificHeatCapacity;
		private IfcPositiveRatioMeasure? _n20Content;
		private IfcPositiveRatioMeasure? _cOContent;
		private IfcPositiveRatioMeasure? _cO2Content;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcSpecificHeatCapacityMeasure? @SpecificHeatCapacity 
		{ 
			get 
			{
				if(Activated) return _specificHeatCapacity;
				
				Model.Activate(this, true);
				Activated = true;
				return _specificHeatCapacity;
			} 
			set
			{
				SetValue( v =>  _specificHeatCapacity = v, _specificHeatCapacity, value,  "SpecificHeatCapacity");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @N20Content 
		{ 
			get 
			{
				if(Activated) return _n20Content;
				
				Model.Activate(this, true);
				Activated = true;
				return _n20Content;
			} 
			set
			{
				SetValue( v =>  _n20Content = v, _n20Content, value,  "N20Content");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @COContent 
		{ 
			get 
			{
				if(Activated) return _cOContent;
				
				Model.Activate(this, true);
				Activated = true;
				return _cOContent;
			} 
			set
			{
				SetValue( v =>  _cOContent = v, _cOContent, value,  "COContent");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @CO2Content 
		{ 
			get 
			{
				if(Activated) return _cO2Content;
				
				Model.Activate(this, true);
				Activated = true;
				return _cO2Content;
			} 
			set
			{
				SetValue( v =>  _cO2Content = v, _cO2Content, value,  "CO2Content");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Material",
			"SpecificHeatCapacity",
			"N20Content",
			"COContent",
			"CO2Content",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Material;
				case 1: 
					return @SpecificHeatCapacity;
				case 2: 
					return @N20Content;
				case 3: 
					return @COContent;
				case 4: 
					return @CO2Content;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Material":  
					return @Material;
				case "SpecificHeatCapacity":  
					return @SpecificHeatCapacity;
				case "N20Content":  
					return @N20Content;
				case "COContent":  
					return @COContent;
				case "CO2Content":  
					return @CO2Content;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Material = (IfcMaterial)value;
					 break;
				case 1:
					 @SpecificHeatCapacity = (IfcSpecificHeatCapacityMeasure?)value;
					 break;
				case 2:
					 @N20Content = (IfcPositiveRatioMeasure?)value;
					 break;
				case 3:
					 @COContent = (IfcPositiveRatioMeasure?)value;
					 break;
				case 4:
					 @CO2Content = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Material":
					 @Material = (IfcMaterial)value;
					 break;
				case "SpecificHeatCapacity":
					 @SpecificHeatCapacity = (IfcSpecificHeatCapacityMeasure?)value;
					 break;
				case "N20Content":
					 @N20Content = (IfcPositiveRatioMeasure?)value;
					 break;
				case "COContent":
					 @COContent = (IfcPositiveRatioMeasure?)value;
					 break;
				case "CO2Content":
					 @CO2Content = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}