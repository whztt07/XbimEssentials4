// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:43:55
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ConstructionMgmtDomain
{
	[EntityName("IFCCONSTRUCTIONRESOURCE", 157)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcConstructionResource : IfcResource
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcConstructionResource(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcIdentifier? _resourceIdentifier;
		private IfcLabel? _resourceGroup;
		private IfcResourceConsumptionEnum? _resourceConsumption;
		private IfcMeasureWithUnit _baseQuantity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcIdentifier? @ResourceIdentifier 
		{ 
			get 
			{
				if(Activated) return _resourceIdentifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _resourceIdentifier;
			} 
			set
			{
				SetValue( v =>  _resourceIdentifier = v, _resourceIdentifier, value,  "ResourceIdentifier");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLabel? @ResourceGroup 
		{ 
			get 
			{
				if(Activated) return _resourceGroup;
				
				Model.Activate(this, true);
				Activated = true;
				return _resourceGroup;
			} 
			set
			{
				SetValue( v =>  _resourceGroup = v, _resourceGroup, value,  "ResourceGroup");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcResourceConsumptionEnum? @ResourceConsumption 
		{ 
			get 
			{
				if(Activated) return _resourceConsumption;
				
				Model.Activate(this, true);
				Activated = true;
				return _resourceConsumption;
			} 
			set
			{
				SetValue( v =>  _resourceConsumption = v, _resourceConsumption, value,  "ResourceConsumption");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcMeasureWithUnit @BaseQuantity 
		{ 
			get 
			{
				if(Activated) return _baseQuantity;
				
				Model.Activate(this, true);
				Activated = true;
				return _baseQuantity;
			} 
			set
			{
				SetValue( v =>  _baseQuantity = v, _baseQuantity, value,  "BaseQuantity");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value); 
					return;
				case 5: 
					_resourceIdentifier = value.StringVal;
					return;
				case 6: 
					_resourceGroup = value.StringVal;
					return;
				case 7: 
                    _resourceConsumption = (IfcResourceConsumptionEnum) System.Enum.Parse(typeof (IfcResourceConsumptionEnum), value.EnumVal, true);
					return;
				case 8: 
					_baseQuantity = (IfcMeasureWithUnit)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}