// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:15
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ActorResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.ConstructionMgmtDomain
{
	[EntityName("IFCSUBCONTRACTRESOURCE", 571)]
	public  partial class @IfcSubContractResource : IfcConstructionResource, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSubContractResource(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcActorSelect _subContractor;
		private IfcText? _jobDescription;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcActorSelect @SubContractor 
		{ 
			get 
			{
				if(Activated) return _subContractor;
				
				Model.Activate(this, true);
				Activated = true;
				return _subContractor;
			} 
			set
			{
				SetValue( v =>  _subContractor = v, _subContractor, value,  "SubContractor");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcText? @JobDescription 
		{ 
			get 
			{
				if(Activated) return _jobDescription;
				
				Model.Activate(this, true);
				Activated = true;
				return _jobDescription;
			} 
			set
			{
				SetValue( v =>  _jobDescription = v, _jobDescription, value,  "JobDescription");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ObjectType",
			"ResourceIdentifier",
			"ResourceGroup",
			"ResourceConsumption",
			"BaseQuantity",
			"SubContractor",
			"JobDescription",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ObjectType;
				case 5: 
					return @ResourceIdentifier;
				case 6: 
					return @ResourceGroup;
				case 7: 
					return @ResourceConsumption;
				case 8: 
					return @BaseQuantity;
				case 9: 
					return @SubContractor;
				case 10: 
					return @JobDescription;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ObjectType":  
					return @ObjectType;
				case "ResourceIdentifier":  
					return @ResourceIdentifier;
				case "ResourceGroup":  
					return @ResourceGroup;
				case "ResourceConsumption":  
					return @ResourceConsumption;
				case "BaseQuantity":  
					return @BaseQuantity;
				case "SubContractor":  
					return @SubContractor;
				case "JobDescription":  
					return @JobDescription;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ObjectType = (IfcLabel?)value;
					 break;
				case 5:
					 @ResourceIdentifier = (IfcIdentifier?)value;
					 break;
				case 6:
					 @ResourceGroup = (IfcLabel?)value;
					 break;
				case 7:
					 @ResourceConsumption = (IfcResourceConsumptionEnum)value;
					 break;
				case 8:
					 @BaseQuantity = (IfcMeasureWithUnit)value;
					 break;
				case 9:
					 @SubContractor = (IfcActorSelect)value;
					 break;
				case 10:
					 @JobDescription = (IfcText?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ObjectType":
					 @ObjectType = (IfcLabel?)value;
					 break;
				case "ResourceIdentifier":
					 @ResourceIdentifier = (IfcIdentifier?)value;
					 break;
				case "ResourceGroup":
					 @ResourceGroup = (IfcLabel?)value;
					 break;
				case "ResourceConsumption":
					 @ResourceConsumption = (IfcResourceConsumptionEnum)value;
					 break;
				case "BaseQuantity":
					 @BaseQuantity = (IfcMeasureWithUnit)value;
					 break;
				case "SubContractor":
					 @SubContractor = (IfcActorSelect)value;
					 break;
				case "JobDescription":
					 @JobDescription = (IfcText?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}