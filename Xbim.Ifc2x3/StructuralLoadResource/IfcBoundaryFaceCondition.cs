// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:33
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.StructuralLoadResource
{
	[EntityName("IFCBOUNDARYFACECONDITION", 674)]
	public  partial class @IfcBoundaryFaceCondition : IfcBoundaryCondition, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBoundaryFaceCondition(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaX;
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaY;
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaX 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByAreaX;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByAreaX;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaX = v, _linearStiffnessByAreaX, value,  "LinearStiffnessByAreaX");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaY 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByAreaY;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByAreaY;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaY = v, _linearStiffnessByAreaY, value,  "LinearStiffnessByAreaY");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaZ 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByAreaZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByAreaZ;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaZ = v, _linearStiffnessByAreaZ, value,  "LinearStiffnessByAreaZ");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"LinearStiffnessByAreaX",
			"LinearStiffnessByAreaY",
			"LinearStiffnessByAreaZ",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @LinearStiffnessByAreaX;
				case 2: 
					return @LinearStiffnessByAreaY;
				case 3: 
					return @LinearStiffnessByAreaZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "LinearStiffnessByAreaX":  
					return @LinearStiffnessByAreaX;
				case "LinearStiffnessByAreaY":  
					return @LinearStiffnessByAreaY;
				case "LinearStiffnessByAreaZ":  
					return @LinearStiffnessByAreaZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @LinearStiffnessByAreaX = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				case 2:
					 @LinearStiffnessByAreaY = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				case 3:
					 @LinearStiffnessByAreaZ = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "LinearStiffnessByAreaX":
					 @LinearStiffnessByAreaX = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				case "LinearStiffnessByAreaY":
					 @LinearStiffnessByAreaY = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				case "LinearStiffnessByAreaZ":
					 @LinearStiffnessByAreaZ = (IfcModulusOfSubgradeReactionMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}