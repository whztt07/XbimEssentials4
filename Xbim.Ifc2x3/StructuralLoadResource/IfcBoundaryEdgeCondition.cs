// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:17
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.StructuralLoadResource
{
	[EntityName("IFCBOUNDARYEDGECONDITION", 319)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcBoundaryEdgeCondition : IfcBoundaryCondition, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBoundaryEdgeCondition(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcModulusOfLinearSubgradeReactionMeasure? _linearStiffnessByLengthX;
		private IfcModulusOfLinearSubgradeReactionMeasure? _linearStiffnessByLengthY;
		private IfcModulusOfLinearSubgradeReactionMeasure? _linearStiffnessByLengthZ;
		private IfcModulusOfRotationalSubgradeReactionMeasure? _rotationalStiffnessByLengthX;
		private IfcModulusOfRotationalSubgradeReactionMeasure? _rotationalStiffnessByLengthY;
		private IfcModulusOfRotationalSubgradeReactionMeasure? _rotationalStiffnessByLengthZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcModulusOfLinearSubgradeReactionMeasure? @LinearStiffnessByLengthX 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByLengthX;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByLengthX;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByLengthX = v, _linearStiffnessByLengthX, value,  "LinearStiffnessByLengthX");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcModulusOfLinearSubgradeReactionMeasure? @LinearStiffnessByLengthY 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByLengthY;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByLengthY;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByLengthY = v, _linearStiffnessByLengthY, value,  "LinearStiffnessByLengthY");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcModulusOfLinearSubgradeReactionMeasure? @LinearStiffnessByLengthZ 
		{ 
			get 
			{
				if(Activated) return _linearStiffnessByLengthZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearStiffnessByLengthZ;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByLengthZ = v, _linearStiffnessByLengthZ, value,  "LinearStiffnessByLengthZ");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcModulusOfRotationalSubgradeReactionMeasure? @RotationalStiffnessByLengthX 
		{ 
			get 
			{
				if(Activated) return _rotationalStiffnessByLengthX;
				
				Model.Activate(this, true);
				Activated = true;
				return _rotationalStiffnessByLengthX;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessByLengthX = v, _rotationalStiffnessByLengthX, value,  "RotationalStiffnessByLengthX");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcModulusOfRotationalSubgradeReactionMeasure? @RotationalStiffnessByLengthY 
		{ 
			get 
			{
				if(Activated) return _rotationalStiffnessByLengthY;
				
				Model.Activate(this, true);
				Activated = true;
				return _rotationalStiffnessByLengthY;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessByLengthY = v, _rotationalStiffnessByLengthY, value,  "RotationalStiffnessByLengthY");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcModulusOfRotationalSubgradeReactionMeasure? @RotationalStiffnessByLengthZ 
		{ 
			get 
			{
				if(Activated) return _rotationalStiffnessByLengthZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _rotationalStiffnessByLengthZ;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessByLengthZ = v, _rotationalStiffnessByLengthZ, value,  "RotationalStiffnessByLengthZ");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Name",
			"LinearStiffnessByLengthX",
			"LinearStiffnessByLengthY",
			"LinearStiffnessByLengthZ",
			"RotationalStiffnessByLengthX",
			"RotationalStiffnessByLengthY",
			"RotationalStiffnessByLengthZ",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @LinearStiffnessByLengthX;
				case 2: 
					return @LinearStiffnessByLengthY;
				case 3: 
					return @LinearStiffnessByLengthZ;
				case 4: 
					return @RotationalStiffnessByLengthX;
				case 5: 
					return @RotationalStiffnessByLengthY;
				case 6: 
					return @RotationalStiffnessByLengthZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "LinearStiffnessByLengthX":  
					return @LinearStiffnessByLengthX;
				case "LinearStiffnessByLengthY":  
					return @LinearStiffnessByLengthY;
				case "LinearStiffnessByLengthZ":  
					return @LinearStiffnessByLengthZ;
				case "RotationalStiffnessByLengthX":  
					return @RotationalStiffnessByLengthX;
				case "RotationalStiffnessByLengthY":  
					return @RotationalStiffnessByLengthY;
				case "RotationalStiffnessByLengthZ":  
					return @RotationalStiffnessByLengthZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @LinearStiffnessByLengthX = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case 2:
					 @LinearStiffnessByLengthY = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case 3:
					 @LinearStiffnessByLengthZ = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case 4:
					 @RotationalStiffnessByLengthX = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				case 5:
					 @RotationalStiffnessByLengthY = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				case 6:
					 @RotationalStiffnessByLengthZ = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "LinearStiffnessByLengthX":
					 @LinearStiffnessByLengthX = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case "LinearStiffnessByLengthY":
					 @LinearStiffnessByLengthY = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case "LinearStiffnessByLengthZ":
					 @LinearStiffnessByLengthZ = (IfcModulusOfLinearSubgradeReactionMeasure?)value;
					 break;
				case "RotationalStiffnessByLengthX":
					 @RotationalStiffnessByLengthX = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				case "RotationalStiffnessByLengthY":
					 @RotationalStiffnessByLengthY = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				case "RotationalStiffnessByLengthZ":
					 @RotationalStiffnessByLengthZ = (IfcModulusOfRotationalSubgradeReactionMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_linearStiffnessByLengthX = value.RealVal;
					return;
				case 2: 
					_linearStiffnessByLengthY = value.RealVal;
					return;
				case 3: 
					_linearStiffnessByLengthZ = value.RealVal;
					return;
				case 4: 
					_rotationalStiffnessByLengthX = value.RealVal;
					return;
				case 5: 
					_rotationalStiffnessByLengthY = value.RealVal;
					return;
				case 6: 
					_rotationalStiffnessByLengthZ = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}