// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:04:19
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.StructuralLoadResource
{
	[EntityName("IFCSTRUCTURALLOADTEMPERATURE", 36)]
	public  partial class @IfcStructuralLoadTemperature : IfcStructuralLoadStatic, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcStructuralLoadTemperature(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcThermodynamicTemperatureMeasure? _deltaT_Constant;
		private IfcThermodynamicTemperatureMeasure? _deltaT_Y;
		private IfcThermodynamicTemperatureMeasure? _deltaT_Z;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @DeltaT_Constant 
		{ 
			get 
			{
				if(Activated) return _deltaT_Constant;
				
				Model.Activate(this, true);
				Activated = true;
				return _deltaT_Constant;
			} 
			set
			{
				SetValue( v =>  _deltaT_Constant = v, _deltaT_Constant, value,  "DeltaT_Constant");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @DeltaT_Y 
		{ 
			get 
			{
				if(Activated) return _deltaT_Y;
				
				Model.Activate(this, true);
				Activated = true;
				return _deltaT_Y;
			} 
			set
			{
				SetValue( v =>  _deltaT_Y = v, _deltaT_Y, value,  "DeltaT_Y");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @DeltaT_Z 
		{ 
			get 
			{
				if(Activated) return _deltaT_Z;
				
				Model.Activate(this, true);
				Activated = true;
				return _deltaT_Z;
			} 
			set
			{
				SetValue( v =>  _deltaT_Z = v, _deltaT_Z, value,  "DeltaT_Z");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DeltaT_Constant",
			"DeltaT_Y",
			"DeltaT_Z",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DeltaT_Constant;
				case 2: 
					return @DeltaT_Y;
				case 3: 
					return @DeltaT_Z;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DeltaT_Constant":  
					return @DeltaT_Constant;
				case "DeltaT_Y":  
					return @DeltaT_Y;
				case "DeltaT_Z":  
					return @DeltaT_Z;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DeltaT_Constant = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 2:
					 @DeltaT_Y = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 3:
					 @DeltaT_Z = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DeltaT_Constant":
					 @DeltaT_Constant = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "DeltaT_Y":
					 @DeltaT_Y = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "DeltaT_Z":
					 @DeltaT_Z = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}