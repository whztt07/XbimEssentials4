// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:34
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.CostResource
{
	[EntityName("IFCENVIRONMENTALIMPACTVALUE", 78)]
	public  partial class @IfcEnvironmentalImpactValue : IfcAppliedValue, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcEnvironmentalImpactValue(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLabel _impactType;
		private IfcEnvironmentalImpactCategoryEnum _category;
		private IfcLabel? _userDefinedCategory;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public IfcLabel @ImpactType 
		{ 
			get 
			{
				if(Activated) return _impactType;
				
				Model.Activate(this, true);
				Activated = true;
				return _impactType;
			} 
			set
			{
				SetValue( v =>  _impactType = v, _impactType, value,  "ImpactType");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public IfcEnvironmentalImpactCategoryEnum @Category 
		{ 
			get 
			{
				if(Activated) return _category;
				
				Model.Activate(this, true);
				Activated = true;
				return _category;
			} 
			set
			{
				SetValue( v =>  _category = v, _category, value,  "Category");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedCategory 
		{ 
			get 
			{
				if(Activated) return _userDefinedCategory;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedCategory;
			} 
			set
			{
				SetValue( v =>  _userDefinedCategory = v, _userDefinedCategory, value,  "UserDefinedCategory");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"AppliedValue",
			"UnitBasis",
			"ApplicableDate",
			"FixedUntilDate",
			"ImpactType",
			"Category",
			"UserDefinedCategory",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @AppliedValue;
				case 3: 
					return @UnitBasis;
				case 4: 
					return @ApplicableDate;
				case 5: 
					return @FixedUntilDate;
				case 6: 
					return @ImpactType;
				case 7: 
					return @Category;
				case 8: 
					return @UserDefinedCategory;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "AppliedValue":  
					return @AppliedValue;
				case "UnitBasis":  
					return @UnitBasis;
				case "ApplicableDate":  
					return @ApplicableDate;
				case "FixedUntilDate":  
					return @FixedUntilDate;
				case "ImpactType":  
					return @ImpactType;
				case "Category":  
					return @Category;
				case "UserDefinedCategory":  
					return @UserDefinedCategory;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @AppliedValue = (IfcAppliedValueSelect)value;
					 break;
				case 3:
					 @UnitBasis = (IfcMeasureWithUnit)value;
					 break;
				case 4:
					 @ApplicableDate = (IfcDateTimeSelect)value;
					 break;
				case 5:
					 @FixedUntilDate = (IfcDateTimeSelect)value;
					 break;
				case 6:
					 if (value != null) @ImpactType = (IfcLabel)value;
					 break;
				case 7:
					 if (value != null) @Category = (IfcEnvironmentalImpactCategoryEnum)value;
					 break;
				case 8:
					 @UserDefinedCategory = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "AppliedValue":
					 @AppliedValue = (IfcAppliedValueSelect)value;
					 break;
				case "UnitBasis":
					 @UnitBasis = (IfcMeasureWithUnit)value;
					 break;
				case "ApplicableDate":
					 @ApplicableDate = (IfcDateTimeSelect)value;
					 break;
				case "FixedUntilDate":
					 @FixedUntilDate = (IfcDateTimeSelect)value;
					 break;
				case "ImpactType":
					 if (value != null) @ImpactType = (IfcLabel)value;
					 break;
				case "Category":
					 if (value != null) @Category = (IfcEnvironmentalImpactCategoryEnum)value;
					 break;
				case "UserDefinedCategory":
					 @UserDefinedCategory = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR1:            ((Category = IfcEnvironmentalImpactCategoryEnum.USERDEFINED) AND EXISTS(SELF\IfcEnvironmentalImpactValue.UserDefinedCategory));*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}