// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:22:59
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ProfileResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ProfilePropertyResource
{
	[EntityName("IFCGENERALPROFILEPROPERTIES", 648)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcGeneralProfileProperties : IfcProfileProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcGeneralProfileProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcMassPerLengthMeasure? _physicalWeight;
		private IfcPositiveLengthMeasure? _perimeter;
		private IfcPositiveLengthMeasure? _minimumPlateThickness;
		private IfcPositiveLengthMeasure? _maximumPlateThickness;
		private IfcAreaMeasure? _crossSectionArea;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcMassPerLengthMeasure? @PhysicalWeight 
		{ 
			get 
			{
				if(Activated) return _physicalWeight;
				
				Model.Activate(this, true);
				Activated = true;
				return _physicalWeight;
			} 
			set
			{
				SetValue( v =>  _physicalWeight = v, _physicalWeight, value,  "PhysicalWeight");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @Perimeter 
		{ 
			get 
			{
				if(Activated) return _perimeter;
				
				Model.Activate(this, true);
				Activated = true;
				return _perimeter;
			} 
			set
			{
				SetValue( v =>  _perimeter = v, _perimeter, value,  "Perimeter");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @MinimumPlateThickness 
		{ 
			get 
			{
				if(Activated) return _minimumPlateThickness;
				
				Model.Activate(this, true);
				Activated = true;
				return _minimumPlateThickness;
			} 
			set
			{
				SetValue( v =>  _minimumPlateThickness = v, _minimumPlateThickness, value,  "MinimumPlateThickness");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @MaximumPlateThickness 
		{ 
			get 
			{
				if(Activated) return _maximumPlateThickness;
				
				Model.Activate(this, true);
				Activated = true;
				return _maximumPlateThickness;
			} 
			set
			{
				SetValue( v =>  _maximumPlateThickness = v, _maximumPlateThickness, value,  "MaximumPlateThickness");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcAreaMeasure? @CrossSectionArea 
		{ 
			get 
			{
				if(Activated) return _crossSectionArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _crossSectionArea;
			} 
			set
			{
				SetValue( v =>  _crossSectionArea = v, _crossSectionArea, value,  "CrossSectionArea");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"ProfileName",
			"ProfileDefinition",
			"PhysicalWeight",
			"Perimeter",
			"MinimumPlateThickness",
			"MaximumPlateThickness",
			"CrossSectionArea",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @ProfileName;
				case 1: 
					return @ProfileDefinition;
				case 2: 
					return @PhysicalWeight;
				case 3: 
					return @Perimeter;
				case 4: 
					return @MinimumPlateThickness;
				case 5: 
					return @MaximumPlateThickness;
				case 6: 
					return @CrossSectionArea;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "ProfileName":  
					return @ProfileName;
				case "ProfileDefinition":  
					return @ProfileDefinition;
				case "PhysicalWeight":  
					return @PhysicalWeight;
				case "Perimeter":  
					return @Perimeter;
				case "MinimumPlateThickness":  
					return @MinimumPlateThickness;
				case "MaximumPlateThickness":  
					return @MaximumPlateThickness;
				case "CrossSectionArea":  
					return @CrossSectionArea;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @ProfileName = (IfcLabel?)value;
					 break;
				case 1:
					 @ProfileDefinition = (IfcProfileDef)value;
					 break;
				case 2:
					 @PhysicalWeight = (IfcMassPerLengthMeasure?)value;
					 break;
				case 3:
					 @Perimeter = (IfcPositiveLengthMeasure?)value;
					 break;
				case 4:
					 @MinimumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case 5:
					 @MaximumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case 6:
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "ProfileName":
					 @ProfileName = (IfcLabel?)value;
					 break;
				case "ProfileDefinition":
					 @ProfileDefinition = (IfcProfileDef)value;
					 break;
				case "PhysicalWeight":
					 @PhysicalWeight = (IfcMassPerLengthMeasure?)value;
					 break;
				case "Perimeter":
					 @Perimeter = (IfcPositiveLengthMeasure?)value;
					 break;
				case "MinimumPlateThickness":
					 @MinimumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case "MaximumPlateThickness":
					 @MaximumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case "CrossSectionArea":
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
					base.Parse(propIndex, value); 
					return;
				case 2: 
					_physicalWeight = value.RealVal;
					return;
				case 3: 
					_perimeter = value.RealVal;
					return;
				case 4: 
					_minimumPlateThickness = value.RealVal;
					return;
				case 5: 
					_maximumPlateThickness = value.RealVal;
					return;
				case 6: 
					_crossSectionArea = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : NOT(EXISTS(CrossSectionArea)) OR (CrossSectionArea > 0.);*/
		}
		#endregion

		
	}
}