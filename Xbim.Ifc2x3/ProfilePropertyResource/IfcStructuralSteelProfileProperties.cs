// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:39
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ProfileResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.ProfilePropertyResource
{
	[EntityName("IFCSTRUCTURALSTEELPROFILEPROPERTIES")]
	public  partial class @IfcStructuralSteelProfileProperties : IfcStructuralProfileProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcStructuralSteelProfileProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcAreaMeasure? _shearAreaZ;
		private IfcAreaMeasure? _shearAreaY;
		private IfcPositiveRatioMeasure? _plasticShapeFactorY;
		private IfcPositiveRatioMeasure? _plasticShapeFactorZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(23, EntityAttributeState.Optional)]
		public IfcAreaMeasure? @ShearAreaZ 
		{ 
			get 
			{
				if(IsActivated) return _shearAreaZ;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _shearAreaZ;
			} 
			set
			{
				SetValue( v =>  _shearAreaZ = v, _shearAreaZ, value,  "ShearAreaZ");
			} 
		}
	
		[EntityAttribute(24, EntityAttributeState.Optional)]
		public IfcAreaMeasure? @ShearAreaY 
		{ 
			get 
			{
				if(IsActivated) return _shearAreaY;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _shearAreaY;
			} 
			set
			{
				SetValue( v =>  _shearAreaY = v, _shearAreaY, value,  "ShearAreaY");
			} 
		}
	
		[EntityAttribute(25, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @PlasticShapeFactorY 
		{ 
			get 
			{
				if(IsActivated) return _plasticShapeFactorY;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _plasticShapeFactorY;
			} 
			set
			{
				SetValue( v =>  _plasticShapeFactorY = v, _plasticShapeFactorY, value,  "PlasticShapeFactorY");
			} 
		}
	
		[EntityAttribute(26, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @PlasticShapeFactorZ 
		{ 
			get 
			{
				if(IsActivated) return _plasticShapeFactorZ;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _plasticShapeFactorZ;
			} 
			set
			{
				SetValue( v =>  _plasticShapeFactorZ = v, _plasticShapeFactorZ, value,  "PlasticShapeFactorZ");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"ProfileName",
			"ProfileDefinition",
			"PhysicalWeight",
			"Perimeter",
			"MinimumPlateThickness",
			"MaximumPlateThickness",
			"CrossSectionArea",
			"TorsionalConstantX",
			"MomentOfInertiaYZ",
			"MomentOfInertiaY",
			"MomentOfInertiaZ",
			"WarpingConstant",
			"ShearCentreZ",
			"ShearCentreY",
			"ShearDeformationAreaZ",
			"ShearDeformationAreaY",
			"MaximumSectionModulusY",
			"MinimumSectionModulusY",
			"MaximumSectionModulusZ",
			"MinimumSectionModulusZ",
			"TorsionalSectionModulus",
			"CentreOfGravityInX",
			"CentreOfGravityInY",
			"ShearAreaZ",
			"ShearAreaY",
			"PlasticShapeFactorY",
			"PlasticShapeFactorZ",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @ProfileName;
				case 1: 
					return @ProfileDefinition;
				case 2: 
					return @PhysicalWeight;
				case 3: 
					return @Perimeter;
				case 4: 
					return @MinimumPlateThickness;
				case 5: 
					return @MaximumPlateThickness;
				case 6: 
					return @CrossSectionArea;
				case 7: 
					return @TorsionalConstantX;
				case 8: 
					return @MomentOfInertiaYZ;
				case 9: 
					return @MomentOfInertiaY;
				case 10: 
					return @MomentOfInertiaZ;
				case 11: 
					return @WarpingConstant;
				case 12: 
					return @ShearCentreZ;
				case 13: 
					return @ShearCentreY;
				case 14: 
					return @ShearDeformationAreaZ;
				case 15: 
					return @ShearDeformationAreaY;
				case 16: 
					return @MaximumSectionModulusY;
				case 17: 
					return @MinimumSectionModulusY;
				case 18: 
					return @MaximumSectionModulusZ;
				case 19: 
					return @MinimumSectionModulusZ;
				case 20: 
					return @TorsionalSectionModulus;
				case 21: 
					return @CentreOfGravityInX;
				case 22: 
					return @CentreOfGravityInY;
				case 23: 
					return @ShearAreaZ;
				case 24: 
					return @ShearAreaY;
				case 25: 
					return @PlasticShapeFactorY;
				case 26: 
					return @PlasticShapeFactorZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "ProfileName":  
					return @ProfileName;
				case "ProfileDefinition":  
					return @ProfileDefinition;
				case "PhysicalWeight":  
					return @PhysicalWeight;
				case "Perimeter":  
					return @Perimeter;
				case "MinimumPlateThickness":  
					return @MinimumPlateThickness;
				case "MaximumPlateThickness":  
					return @MaximumPlateThickness;
				case "CrossSectionArea":  
					return @CrossSectionArea;
				case "TorsionalConstantX":  
					return @TorsionalConstantX;
				case "MomentOfInertiaYZ":  
					return @MomentOfInertiaYZ;
				case "MomentOfInertiaY":  
					return @MomentOfInertiaY;
				case "MomentOfInertiaZ":  
					return @MomentOfInertiaZ;
				case "WarpingConstant":  
					return @WarpingConstant;
				case "ShearCentreZ":  
					return @ShearCentreZ;
				case "ShearCentreY":  
					return @ShearCentreY;
				case "ShearDeformationAreaZ":  
					return @ShearDeformationAreaZ;
				case "ShearDeformationAreaY":  
					return @ShearDeformationAreaY;
				case "MaximumSectionModulusY":  
					return @MaximumSectionModulusY;
				case "MinimumSectionModulusY":  
					return @MinimumSectionModulusY;
				case "MaximumSectionModulusZ":  
					return @MaximumSectionModulusZ;
				case "MinimumSectionModulusZ":  
					return @MinimumSectionModulusZ;
				case "TorsionalSectionModulus":  
					return @TorsionalSectionModulus;
				case "CentreOfGravityInX":  
					return @CentreOfGravityInX;
				case "CentreOfGravityInY":  
					return @CentreOfGravityInY;
				case "ShearAreaZ":  
					return @ShearAreaZ;
				case "ShearAreaY":  
					return @ShearAreaY;
				case "PlasticShapeFactorY":  
					return @PlasticShapeFactorY;
				case "PlasticShapeFactorZ":  
					return @PlasticShapeFactorZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @ProfileName = (IfcLabel?)value;
					 break;
				case 1:
					 @ProfileDefinition = (IfcProfileDef)value;
					 break;
				case 2:
					 @PhysicalWeight = (IfcMassPerLengthMeasure?)value;
					 break;
				case 3:
					 @Perimeter = (IfcPositiveLengthMeasure?)value;
					 break;
				case 4:
					 @MinimumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case 5:
					 @MaximumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case 6:
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				case 7:
					 @TorsionalConstantX = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case 8:
					 @MomentOfInertiaYZ = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case 9:
					 @MomentOfInertiaY = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case 10:
					 @MomentOfInertiaZ = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case 11:
					 @WarpingConstant = (IfcWarpingConstantMeasure?)value;
					 break;
				case 12:
					 @ShearCentreZ = (IfcLengthMeasure?)value;
					 break;
				case 13:
					 @ShearCentreY = (IfcLengthMeasure?)value;
					 break;
				case 14:
					 @ShearDeformationAreaZ = (IfcAreaMeasure?)value;
					 break;
				case 15:
					 @ShearDeformationAreaY = (IfcAreaMeasure?)value;
					 break;
				case 16:
					 @MaximumSectionModulusY = (IfcSectionModulusMeasure?)value;
					 break;
				case 17:
					 @MinimumSectionModulusY = (IfcSectionModulusMeasure?)value;
					 break;
				case 18:
					 @MaximumSectionModulusZ = (IfcSectionModulusMeasure?)value;
					 break;
				case 19:
					 @MinimumSectionModulusZ = (IfcSectionModulusMeasure?)value;
					 break;
				case 20:
					 @TorsionalSectionModulus = (IfcSectionModulusMeasure?)value;
					 break;
				case 21:
					 @CentreOfGravityInX = (IfcLengthMeasure?)value;
					 break;
				case 22:
					 @CentreOfGravityInY = (IfcLengthMeasure?)value;
					 break;
				case 23:
					 @ShearAreaZ = (IfcAreaMeasure?)value;
					 break;
				case 24:
					 @ShearAreaY = (IfcAreaMeasure?)value;
					 break;
				case 25:
					 @PlasticShapeFactorY = (IfcPositiveRatioMeasure?)value;
					 break;
				case 26:
					 @PlasticShapeFactorZ = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "ProfileName":
					 @ProfileName = (IfcLabel?)value;
					 break;
				case "ProfileDefinition":
					 @ProfileDefinition = (IfcProfileDef)value;
					 break;
				case "PhysicalWeight":
					 @PhysicalWeight = (IfcMassPerLengthMeasure?)value;
					 break;
				case "Perimeter":
					 @Perimeter = (IfcPositiveLengthMeasure?)value;
					 break;
				case "MinimumPlateThickness":
					 @MinimumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case "MaximumPlateThickness":
					 @MaximumPlateThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case "CrossSectionArea":
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				case "TorsionalConstantX":
					 @TorsionalConstantX = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case "MomentOfInertiaYZ":
					 @MomentOfInertiaYZ = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case "MomentOfInertiaY":
					 @MomentOfInertiaY = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case "MomentOfInertiaZ":
					 @MomentOfInertiaZ = (IfcMomentOfInertiaMeasure?)value;
					 break;
				case "WarpingConstant":
					 @WarpingConstant = (IfcWarpingConstantMeasure?)value;
					 break;
				case "ShearCentreZ":
					 @ShearCentreZ = (IfcLengthMeasure?)value;
					 break;
				case "ShearCentreY":
					 @ShearCentreY = (IfcLengthMeasure?)value;
					 break;
				case "ShearDeformationAreaZ":
					 @ShearDeformationAreaZ = (IfcAreaMeasure?)value;
					 break;
				case "ShearDeformationAreaY":
					 @ShearDeformationAreaY = (IfcAreaMeasure?)value;
					 break;
				case "MaximumSectionModulusY":
					 @MaximumSectionModulusY = (IfcSectionModulusMeasure?)value;
					 break;
				case "MinimumSectionModulusY":
					 @MinimumSectionModulusY = (IfcSectionModulusMeasure?)value;
					 break;
				case "MaximumSectionModulusZ":
					 @MaximumSectionModulusZ = (IfcSectionModulusMeasure?)value;
					 break;
				case "MinimumSectionModulusZ":
					 @MinimumSectionModulusZ = (IfcSectionModulusMeasure?)value;
					 break;
				case "TorsionalSectionModulus":
					 @TorsionalSectionModulus = (IfcSectionModulusMeasure?)value;
					 break;
				case "CentreOfGravityInX":
					 @CentreOfGravityInX = (IfcLengthMeasure?)value;
					 break;
				case "CentreOfGravityInY":
					 @CentreOfGravityInY = (IfcLengthMeasure?)value;
					 break;
				case "ShearAreaZ":
					 @ShearAreaZ = (IfcAreaMeasure?)value;
					 break;
				case "ShearAreaY":
					 @ShearAreaY = (IfcAreaMeasure?)value;
					 break;
				case "PlasticShapeFactorY":
					 @PlasticShapeFactorY = (IfcPositiveRatioMeasure?)value;
					 break;
				case "PlasticShapeFactorZ":
					 @PlasticShapeFactorZ = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR31:	WR31 : NOT(EXISTS(ShearAreaY)) OR (ShearAreaY >= 0.);*/
		/*WR32:	WR32 : NOT(EXISTS(ShearAreaZ)) OR (ShearAreaZ >= 0.);*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}