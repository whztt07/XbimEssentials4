// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:15
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.PresentationResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.PresentationAppearanceResource
{
	[EntityName("IFCSURFACESTYLERENDERING", 580)]
	public  partial class @IfcSurfaceStyleRendering : IfcSurfaceStyleShading, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSurfaceStyleRendering(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcNormalisedRatioMeasure? _transparency;
		private IfcColourOrFactor _diffuseColour;
		private IfcColourOrFactor _transmissionColour;
		private IfcColourOrFactor _diffuseTransmissionColour;
		private IfcColourOrFactor _reflectionColour;
		private IfcColourOrFactor _specularColour;
		private IfcSpecularHighlightSelect _specularHighlight;
		private IfcReflectanceMethodEnum _reflectanceMethod;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcNormalisedRatioMeasure? @Transparency 
		{ 
			get 
			{
				if(Activated) return _transparency;
				
				Model.Activate(this, true);
				Activated = true;
				return _transparency;
			} 
			set
			{
				SetValue( v =>  _transparency = v, _transparency, value,  "Transparency");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcColourOrFactor @DiffuseColour 
		{ 
			get 
			{
				if(Activated) return _diffuseColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _diffuseColour;
			} 
			set
			{
				SetValue( v =>  _diffuseColour = v, _diffuseColour, value,  "DiffuseColour");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcColourOrFactor @TransmissionColour 
		{ 
			get 
			{
				if(Activated) return _transmissionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _transmissionColour;
			} 
			set
			{
				SetValue( v =>  _transmissionColour = v, _transmissionColour, value,  "TransmissionColour");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcColourOrFactor @DiffuseTransmissionColour 
		{ 
			get 
			{
				if(Activated) return _diffuseTransmissionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _diffuseTransmissionColour;
			} 
			set
			{
				SetValue( v =>  _diffuseTransmissionColour = v, _diffuseTransmissionColour, value,  "DiffuseTransmissionColour");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcColourOrFactor @ReflectionColour 
		{ 
			get 
			{
				if(Activated) return _reflectionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _reflectionColour;
			} 
			set
			{
				SetValue( v =>  _reflectionColour = v, _reflectionColour, value,  "ReflectionColour");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcColourOrFactor @SpecularColour 
		{ 
			get 
			{
				if(Activated) return _specularColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _specularColour;
			} 
			set
			{
				SetValue( v =>  _specularColour = v, _specularColour, value,  "SpecularColour");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcSpecularHighlightSelect @SpecularHighlight 
		{ 
			get 
			{
				if(Activated) return _specularHighlight;
				
				Model.Activate(this, true);
				Activated = true;
				return _specularHighlight;
			} 
			set
			{
				SetValue( v =>  _specularHighlight = v, _specularHighlight, value,  "SpecularHighlight");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcReflectanceMethodEnum @ReflectanceMethod 
		{ 
			get 
			{
				if(Activated) return _reflectanceMethod;
				
				Model.Activate(this, true);
				Activated = true;
				return _reflectanceMethod;
			} 
			set
			{
				SetValue( v =>  _reflectanceMethod = v, _reflectanceMethod, value,  "ReflectanceMethod");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"SurfaceColour",
			"Transparency",
			"DiffuseColour",
			"TransmissionColour",
			"DiffuseTransmissionColour",
			"ReflectionColour",
			"SpecularColour",
			"SpecularHighlight",
			"ReflectanceMethod",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @SurfaceColour;
				case 1: 
					return @Transparency;
				case 2: 
					return @DiffuseColour;
				case 3: 
					return @TransmissionColour;
				case 4: 
					return @DiffuseTransmissionColour;
				case 5: 
					return @ReflectionColour;
				case 6: 
					return @SpecularColour;
				case 7: 
					return @SpecularHighlight;
				case 8: 
					return @ReflectanceMethod;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "SurfaceColour":  
					return @SurfaceColour;
				case "Transparency":  
					return @Transparency;
				case "DiffuseColour":  
					return @DiffuseColour;
				case "TransmissionColour":  
					return @TransmissionColour;
				case "DiffuseTransmissionColour":  
					return @DiffuseTransmissionColour;
				case "ReflectionColour":  
					return @ReflectionColour;
				case "SpecularColour":  
					return @SpecularColour;
				case "SpecularHighlight":  
					return @SpecularHighlight;
				case "ReflectanceMethod":  
					return @ReflectanceMethod;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @SurfaceColour = (IfcColourRgb)value;
					 break;
				case 1:
					 @Transparency = (IfcNormalisedRatioMeasure?)value;
					 break;
				case 2:
					 @DiffuseColour = (IfcColourOrFactor)value;
					 break;
				case 3:
					 @TransmissionColour = (IfcColourOrFactor)value;
					 break;
				case 4:
					 @DiffuseTransmissionColour = (IfcColourOrFactor)value;
					 break;
				case 5:
					 @ReflectionColour = (IfcColourOrFactor)value;
					 break;
				case 6:
					 @SpecularColour = (IfcColourOrFactor)value;
					 break;
				case 7:
					 @SpecularHighlight = (IfcSpecularHighlightSelect)value;
					 break;
				case 8:
					 if (value != null) @ReflectanceMethod = (IfcReflectanceMethodEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "SurfaceColour":
					 @SurfaceColour = (IfcColourRgb)value;
					 break;
				case "Transparency":
					 @Transparency = (IfcNormalisedRatioMeasure?)value;
					 break;
				case "DiffuseColour":
					 @DiffuseColour = (IfcColourOrFactor)value;
					 break;
				case "TransmissionColour":
					 @TransmissionColour = (IfcColourOrFactor)value;
					 break;
				case "DiffuseTransmissionColour":
					 @DiffuseTransmissionColour = (IfcColourOrFactor)value;
					 break;
				case "ReflectionColour":
					 @ReflectionColour = (IfcColourOrFactor)value;
					 break;
				case "SpecularColour":
					 @SpecularColour = (IfcColourOrFactor)value;
					 break;
				case "SpecularHighlight":
					 @SpecularHighlight = (IfcSpecularHighlightSelect)value;
					 break;
				case "ReflectanceMethod":
					 if (value != null) @ReflectanceMethod = (IfcReflectanceMethodEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}