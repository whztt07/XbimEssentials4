// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:39
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.PresentationResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.PresentationAppearanceResource
{
	[EntityName("IFCTEXTSTYLE")]
	public  partial class @IfcTextStyle : IfcPresentationStyle, IfcPresentationStyleSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTextStyle(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCharacterStyleSelect _textCharacterAppearance;
		private IfcTextStyleSelect _textStyle;
		private IfcTextFontSelect _textFontStyle;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcCharacterStyleSelect @TextCharacterAppearance 
		{ 
			get 
			{
				if(IsActivated) return _textCharacterAppearance;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _textCharacterAppearance;
			} 
			set
			{
				SetValue( v =>  _textCharacterAppearance = v, _textCharacterAppearance, value,  "TextCharacterAppearance");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcTextStyleSelect @TextStyle 
		{ 
			get 
			{
				if(IsActivated) return _textStyle;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _textStyle;
			} 
			set
			{
				SetValue( v =>  _textStyle = v, _textStyle, value,  "TextStyle");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcTextFontSelect @TextFontStyle 
		{ 
			get 
			{
				if(IsActivated) return _textFontStyle;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _textFontStyle;
			} 
			set
			{
				SetValue( v =>  _textFontStyle = v, _textFontStyle, value,  "TextFontStyle");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"TextCharacterAppearance",
			"TextStyle",
			"TextFontStyle",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @TextCharacterAppearance;
				case 2: 
					return @TextStyle;
				case 3: 
					return @TextFontStyle;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "TextCharacterAppearance":  
					return @TextCharacterAppearance;
				case "TextStyle":  
					return @TextStyle;
				case "TextFontStyle":  
					return @TextFontStyle;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @TextCharacterAppearance = (IfcCharacterStyleSelect)value;
					 break;
				case 2:
					 @TextStyle = (IfcTextStyleSelect)value;
					 break;
				case 3:
					 @TextFontStyle = (IfcTextFontSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "TextCharacterAppearance":
					 @TextCharacterAppearance = (IfcCharacterStyleSelect)value;
					 break;
				case "TextStyle":
					 @TextStyle = (IfcTextStyleSelect)value;
					 break;
				case "TextFontStyle":
					 @TextFontStyle = (IfcTextFontSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}