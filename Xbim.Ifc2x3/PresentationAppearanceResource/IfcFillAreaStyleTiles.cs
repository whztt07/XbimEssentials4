// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:13
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.PresentationAppearanceResource
{
	[EntityName("IFCFILLAREASTYLETILES", 236)]
	public  partial class @IfcFillAreaStyleTiles : IfcGeometricRepresentationItem, IfcFillStyleSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcFillAreaStyleTiles(IModel model) : base(model) 		{ 
			Model = model; 
			_tiles = new ItemSet<IfcFillAreaStyleTileShapeSelect>( model );
		}

		#region Explicit attribute fields
		private IfcOneDirectionRepeatFactor _tilingPattern;
		private ItemSet<IfcFillAreaStyleTileShapeSelect> _tiles;
		private IfcPositiveRatioMeasure _tilingScale;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcOneDirectionRepeatFactor @TilingPattern 
		{ 
			get 
			{
				if(Activated) return _tilingPattern;
				
				Model.Activate(this, true);
				Activated = true;
				return _tilingPattern;
			} 
			set
			{
				SetValue( v =>  _tilingPattern = v, _tilingPattern, value,  "TilingPattern");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public ItemSet<IfcFillAreaStyleTileShapeSelect> @Tiles 
		{ 
			get 
			{
				if(Activated) return _tiles;
				
				Model.Activate(this, true);
				Activated = true;
				return _tiles;
			} 
			set
			{
				SetValue( v =>  _tiles = v, _tiles, value,  "Tiles");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcPositiveRatioMeasure @TilingScale 
		{ 
			get 
			{
				if(Activated) return _tilingScale;
				
				Model.Activate(this, true);
				Activated = true;
				return _tilingScale;
			} 
			set
			{
				SetValue( v =>  _tilingScale = v, _tilingScale, value,  "TilingScale");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"TilingPattern",
			"Tiles",
			"TilingScale",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @TilingPattern;
				case 1: 
					return @Tiles;
				case 2: 
					return @TilingScale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "TilingPattern":  
					return @TilingPattern;
				case "Tiles":  
					return @Tiles;
				case "TilingScale":  
					return @TilingScale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @TilingPattern = (IfcOneDirectionRepeatFactor)value;
					 break;
				case 1:
					 @Tiles.Add((IfcFillAreaStyleTileShapeSelect)value);
					 break;
				case 2:
					 if (value != null) @TilingScale = (IfcPositiveRatioMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "TilingPattern":
					 @TilingPattern = (IfcOneDirectionRepeatFactor)value;
					 break;
				case "Tiles":
					 @Tiles.Add((IfcFillAreaStyleTileShapeSelect)value);
					 break;
				case "TilingScale":
					 if (value != null) @TilingScale = (IfcPositiveRatioMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}