// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:20
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.ProductExtension;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.GeometricConstraintResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.SharedBldgElements
{
	[EntityName("IFCRELCONNECTSPATHELEMENTS", 668)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcRelConnectsPathElements : IfcRelConnectsElements, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRelConnectsPathElements(IModel model) : base(model) 		{ 
			Model = model; 
			_relatingPriorities = new ItemSet<long>( model );
			_relatedPriorities = new ItemSet<long>( model );
		}

		#region Explicit attribute fields
		private ItemSet<long> _relatingPriorities;
		private ItemSet<long> _relatedPriorities;
		private IfcConnectionTypeEnum _relatedConnectionType;
		private IfcConnectionTypeEnum _relatingConnectionType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public ItemSet<long> @RelatingPriorities 
		{ 
			get 
			{
				if(Activated) return _relatingPriorities;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingPriorities;
			} 
			set
			{
				SetValue( v =>  _relatingPriorities = v, _relatingPriorities, value,  "RelatingPriorities");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public ItemSet<long> @RelatedPriorities 
		{ 
			get 
			{
				if(Activated) return _relatedPriorities;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedPriorities;
			} 
			set
			{
				SetValue( v =>  _relatedPriorities = v, _relatedPriorities, value,  "RelatedPriorities");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public IfcConnectionTypeEnum @RelatedConnectionType 
		{ 
			get 
			{
				if(Activated) return _relatedConnectionType;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedConnectionType;
			} 
			set
			{
				SetValue( v =>  _relatedConnectionType = v, _relatedConnectionType, value,  "RelatedConnectionType");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory)]
		public IfcConnectionTypeEnum @RelatingConnectionType 
		{ 
			get 
			{
				if(Activated) return _relatingConnectionType;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingConnectionType;
			} 
			set
			{
				SetValue( v =>  _relatingConnectionType = v, _relatingConnectionType, value,  "RelatingConnectionType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ConnectionGeometry",
			"RelatingElement",
			"RelatedElement",
			"RelatingPriorities",
			"RelatedPriorities",
			"RelatedConnectionType",
			"RelatingConnectionType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ConnectionGeometry;
				case 5: 
					return @RelatingElement;
				case 6: 
					return @RelatedElement;
				case 7: 
					return @RelatingPriorities;
				case 8: 
					return @RelatedPriorities;
				case 9: 
					return @RelatedConnectionType;
				case 10: 
					return @RelatingConnectionType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ConnectionGeometry":  
					return @ConnectionGeometry;
				case "RelatingElement":  
					return @RelatingElement;
				case "RelatedElement":  
					return @RelatedElement;
				case "RelatingPriorities":  
					return @RelatingPriorities;
				case "RelatedPriorities":  
					return @RelatedPriorities;
				case "RelatedConnectionType":  
					return @RelatedConnectionType;
				case "RelatingConnectionType":  
					return @RelatingConnectionType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ConnectionGeometry = (IfcConnectionGeometry)value;
					 break;
				case 5:
					 @RelatingElement = (IfcElement)value;
					 break;
				case 6:
					 @RelatedElement = (IfcElement)value;
					 break;
				case 7:
					 @RelatingPriorities.Add((long)value);
					 break;
				case 8:
					 @RelatedPriorities.Add((long)value);
					 break;
				case 9:
					 if (value != null) @RelatedConnectionType = (IfcConnectionTypeEnum)value;
					 break;
				case 10:
					 if (value != null) @RelatingConnectionType = (IfcConnectionTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ConnectionGeometry":
					 @ConnectionGeometry = (IfcConnectionGeometry)value;
					 break;
				case "RelatingElement":
					 @RelatingElement = (IfcElement)value;
					 break;
				case "RelatedElement":
					 @RelatedElement = (IfcElement)value;
					 break;
				case "RelatingPriorities":
					 @RelatingPriorities.Add((long)value);
					 break;
				case "RelatedPriorities":
					 @RelatedPriorities.Add((long)value);
					 break;
				case "RelatedConnectionType":
					 if (value != null) @RelatedConnectionType = (IfcConnectionTypeEnum)value;
					 break;
				case "RelatingConnectionType":
					 if (value != null) @RelatingConnectionType = (IfcConnectionTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					base.Parse(propIndex, value); 
					return;
				case 7: 
					if (_relatingPriorities == null) _relatingPriorities = new ItemSet<long>( Model );
					_relatingPriorities.Add(value.IntegerVal);
					return;
				case 8: 
					if (_relatedPriorities == null) _relatedPriorities = new ItemSet<long>( Model );
					_relatedPriorities.Add(value.IntegerVal);
					return;
				case 9: 
                    _relatedConnectionType = (IfcConnectionTypeEnum) System.Enum.Parse(typeof (IfcConnectionTypeEnum), value.EnumVal, true);
					return;
				case 10: 
                    _relatingConnectionType = (IfcConnectionTypeEnum) System.Enum.Parse(typeof (IfcConnectionTypeEnum), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}