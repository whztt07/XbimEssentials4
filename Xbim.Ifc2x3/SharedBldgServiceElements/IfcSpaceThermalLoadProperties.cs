// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:23:01
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.TimeSeriesResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.SharedBldgServiceElements
{
	[EntityName("IFCSPACETHERMALLOADPROPERTIES", 610)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcSpaceThermalLoadProperties : IfcPropertySetDefinition, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSpaceThermalLoadProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveRatioMeasure? _applicableValueRatio;
		private IfcThermalLoadSourceEnum _thermalLoadSource;
		private IfcPropertySourceEnum _propertySource;
		private IfcText? _sourceDescription;
		private IfcPowerMeasure _maximumValue;
		private IfcPowerMeasure? _minimumValue;
		private IfcTimeSeries _thermalLoadTimeSeriesValues;
		private IfcLabel? _userDefinedThermalLoadSource;
		private IfcLabel? _userDefinedPropertySource;
		private IfcThermalLoadTypeEnum _thermalLoadType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ApplicableValueRatio 
		{ 
			get 
			{
				if(Activated) return _applicableValueRatio;
				
				Model.Activate(this, true);
				Activated = true;
				return _applicableValueRatio;
			} 
			set
			{
				SetValue( v =>  _applicableValueRatio = v, _applicableValueRatio, value,  "ApplicableValueRatio");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcThermalLoadSourceEnum @ThermalLoadSource 
		{ 
			get 
			{
				if(Activated) return _thermalLoadSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalLoadSource;
			} 
			set
			{
				SetValue( v =>  _thermalLoadSource = v, _thermalLoadSource, value,  "ThermalLoadSource");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public IfcPropertySourceEnum @PropertySource 
		{ 
			get 
			{
				if(Activated) return _propertySource;
				
				Model.Activate(this, true);
				Activated = true;
				return _propertySource;
			} 
			set
			{
				SetValue( v =>  _propertySource = v, _propertySource, value,  "PropertySource");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcText? @SourceDescription 
		{ 
			get 
			{
				if(Activated) return _sourceDescription;
				
				Model.Activate(this, true);
				Activated = true;
				return _sourceDescription;
			} 
			set
			{
				SetValue( v =>  _sourceDescription = v, _sourceDescription, value,  "SourceDescription");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcPowerMeasure @MaximumValue 
		{ 
			get 
			{
				if(Activated) return _maximumValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _maximumValue;
			} 
			set
			{
				SetValue( v =>  _maximumValue = v, _maximumValue, value,  "MaximumValue");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcPowerMeasure? @MinimumValue 
		{ 
			get 
			{
				if(Activated) return _minimumValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _minimumValue;
			} 
			set
			{
				SetValue( v =>  _minimumValue = v, _minimumValue, value,  "MinimumValue");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcTimeSeries @ThermalLoadTimeSeriesValues 
		{ 
			get 
			{
				if(Activated) return _thermalLoadTimeSeriesValues;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalLoadTimeSeriesValues;
			} 
			set
			{
				SetValue( v =>  _thermalLoadTimeSeriesValues = v, _thermalLoadTimeSeriesValues, value,  "ThermalLoadTimeSeriesValues");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedThermalLoadSource 
		{ 
			get 
			{
				if(Activated) return _userDefinedThermalLoadSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedThermalLoadSource;
			} 
			set
			{
				SetValue( v =>  _userDefinedThermalLoadSource = v, _userDefinedThermalLoadSource, value,  "UserDefinedThermalLoadSource");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedPropertySource 
		{ 
			get 
			{
				if(Activated) return _userDefinedPropertySource;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedPropertySource;
			} 
			set
			{
				SetValue( v =>  _userDefinedPropertySource = v, _userDefinedPropertySource, value,  "UserDefinedPropertySource");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Mandatory)]
		public IfcThermalLoadTypeEnum @ThermalLoadType 
		{ 
			get 
			{
				if(Activated) return _thermalLoadType;
				
				Model.Activate(this, true);
				Activated = true;
				return _thermalLoadType;
			} 
			set
			{
				SetValue( v =>  _thermalLoadType = v, _thermalLoadType, value,  "ThermalLoadType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ApplicableValueRatio",
			"ThermalLoadSource",
			"PropertySource",
			"SourceDescription",
			"MaximumValue",
			"MinimumValue",
			"ThermalLoadTimeSeriesValues",
			"UserDefinedThermalLoadSource",
			"UserDefinedPropertySource",
			"ThermalLoadType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ApplicableValueRatio;
				case 5: 
					return @ThermalLoadSource;
				case 6: 
					return @PropertySource;
				case 7: 
					return @SourceDescription;
				case 8: 
					return @MaximumValue;
				case 9: 
					return @MinimumValue;
				case 10: 
					return @ThermalLoadTimeSeriesValues;
				case 11: 
					return @UserDefinedThermalLoadSource;
				case 12: 
					return @UserDefinedPropertySource;
				case 13: 
					return @ThermalLoadType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ApplicableValueRatio":  
					return @ApplicableValueRatio;
				case "ThermalLoadSource":  
					return @ThermalLoadSource;
				case "PropertySource":  
					return @PropertySource;
				case "SourceDescription":  
					return @SourceDescription;
				case "MaximumValue":  
					return @MaximumValue;
				case "MinimumValue":  
					return @MinimumValue;
				case "ThermalLoadTimeSeriesValues":  
					return @ThermalLoadTimeSeriesValues;
				case "UserDefinedThermalLoadSource":  
					return @UserDefinedThermalLoadSource;
				case "UserDefinedPropertySource":  
					return @UserDefinedPropertySource;
				case "ThermalLoadType":  
					return @ThermalLoadType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ApplicableValueRatio = (IfcPositiveRatioMeasure?)value;
					 break;
				case 5:
					 if (value != null) @ThermalLoadSource = (IfcThermalLoadSourceEnum)value;
					 break;
				case 6:
					 if (value != null) @PropertySource = (IfcPropertySourceEnum)value;
					 break;
				case 7:
					 @SourceDescription = (IfcText?)value;
					 break;
				case 8:
					 if (value != null) @MaximumValue = (IfcPowerMeasure)value;
					 break;
				case 9:
					 @MinimumValue = (IfcPowerMeasure?)value;
					 break;
				case 10:
					 @ThermalLoadTimeSeriesValues = (IfcTimeSeries)value;
					 break;
				case 11:
					 @UserDefinedThermalLoadSource = (IfcLabel?)value;
					 break;
				case 12:
					 @UserDefinedPropertySource = (IfcLabel?)value;
					 break;
				case 13:
					 if (value != null) @ThermalLoadType = (IfcThermalLoadTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ApplicableValueRatio":
					 @ApplicableValueRatio = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ThermalLoadSource":
					 if (value != null) @ThermalLoadSource = (IfcThermalLoadSourceEnum)value;
					 break;
				case "PropertySource":
					 if (value != null) @PropertySource = (IfcPropertySourceEnum)value;
					 break;
				case "SourceDescription":
					 @SourceDescription = (IfcText?)value;
					 break;
				case "MaximumValue":
					 if (value != null) @MaximumValue = (IfcPowerMeasure)value;
					 break;
				case "MinimumValue":
					 @MinimumValue = (IfcPowerMeasure?)value;
					 break;
				case "ThermalLoadTimeSeriesValues":
					 @ThermalLoadTimeSeriesValues = (IfcTimeSeries)value;
					 break;
				case "UserDefinedThermalLoadSource":
					 @UserDefinedThermalLoadSource = (IfcLabel?)value;
					 break;
				case "UserDefinedPropertySource":
					 @UserDefinedPropertySource = (IfcLabel?)value;
					 break;
				case "ThermalLoadType":
					 if (value != null) @ThermalLoadType = (IfcThermalLoadTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_applicableValueRatio = value.RealVal;
					return;
				case 5: 
                    _thermalLoadSource = (IfcThermalLoadSourceEnum) System.Enum.Parse(typeof (IfcThermalLoadSourceEnum), value.EnumVal, true);
					return;
				case 6: 
                    _propertySource = (IfcPropertySourceEnum) System.Enum.Parse(typeof (IfcPropertySourceEnum), value.EnumVal, true);
					return;
				case 7: 
					_sourceDescription = value.StringVal;
					return;
				case 8: 
					_maximumValue = value.RealVal;
					return;
				case 9: 
					_minimumValue = value.RealVal;
					return;
				case 10: 
					_thermalLoadTimeSeriesValues = (IfcTimeSeries)(value.EntityVal);
					return;
				case 11: 
					_userDefinedThermalLoadSource = value.StringVal;
					return;
				case 12: 
					_userDefinedPropertySource = value.StringVal;
					return;
				case 13: 
                    _thermalLoadType = (IfcThermalLoadTypeEnum) System.Enum.Parse(typeof (IfcThermalLoadTypeEnum), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}