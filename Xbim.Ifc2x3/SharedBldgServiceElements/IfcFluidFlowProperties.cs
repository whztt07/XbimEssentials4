// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:13
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.TimeSeriesResource;
using Xbim.Ifc2x3.MaterialResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.SharedBldgServiceElements
{
	[EntityName("IFCFLUIDFLOWPROPERTIES", 255)]
	public  partial class @IfcFluidFlowProperties : IfcPropertySetDefinition, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcFluidFlowProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPropertySourceEnum _propertySource;
		private IfcTimeSeries _flowConditionTimeSeries;
		private IfcTimeSeries _velocityTimeSeries;
		private IfcTimeSeries _flowrateTimeSeries;
		private IfcMaterial _fluid;
		private IfcTimeSeries _pressureTimeSeries;
		private IfcLabel? _userDefinedPropertySource;
		private IfcThermodynamicTemperatureMeasure? _temperatureSingleValue;
		private IfcThermodynamicTemperatureMeasure? _wetBulbTemperatureSingleValue;
		private IfcTimeSeries _wetBulbTemperatureTimeSeries;
		private IfcTimeSeries _temperatureTimeSeries;
		private IfcDerivedMeasureValue _flowrateSingleValue;
		private IfcPositiveRatioMeasure? _flowConditionSingleValue;
		private IfcLinearVelocityMeasure? _velocitySingleValue;
		private IfcPressureMeasure? _pressureSingleValue;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcPropertySourceEnum @PropertySource 
		{ 
			get 
			{
				if(Activated) return _propertySource;
				
				Model.Activate(this, true);
				Activated = true;
				return _propertySource;
			} 
			set
			{
				SetValue( v =>  _propertySource = v, _propertySource, value,  "PropertySource");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcTimeSeries @FlowConditionTimeSeries 
		{ 
			get 
			{
				if(Activated) return _flowConditionTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _flowConditionTimeSeries;
			} 
			set
			{
				SetValue( v =>  _flowConditionTimeSeries = v, _flowConditionTimeSeries, value,  "FlowConditionTimeSeries");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcTimeSeries @VelocityTimeSeries 
		{ 
			get 
			{
				if(Activated) return _velocityTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _velocityTimeSeries;
			} 
			set
			{
				SetValue( v =>  _velocityTimeSeries = v, _velocityTimeSeries, value,  "VelocityTimeSeries");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcTimeSeries @FlowrateTimeSeries 
		{ 
			get 
			{
				if(Activated) return _flowrateTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _flowrateTimeSeries;
			} 
			set
			{
				SetValue( v =>  _flowrateTimeSeries = v, _flowrateTimeSeries, value,  "FlowrateTimeSeries");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcMaterial @Fluid 
		{ 
			get 
			{
				if(Activated) return _fluid;
				
				Model.Activate(this, true);
				Activated = true;
				return _fluid;
			} 
			set
			{
				SetValue( v =>  _fluid = v, _fluid, value,  "Fluid");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcTimeSeries @PressureTimeSeries 
		{ 
			get 
			{
				if(Activated) return _pressureTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _pressureTimeSeries;
			} 
			set
			{
				SetValue( v =>  _pressureTimeSeries = v, _pressureTimeSeries, value,  "PressureTimeSeries");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedPropertySource 
		{ 
			get 
			{
				if(Activated) return _userDefinedPropertySource;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedPropertySource;
			} 
			set
			{
				SetValue( v =>  _userDefinedPropertySource = v, _userDefinedPropertySource, value,  "UserDefinedPropertySource");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @TemperatureSingleValue 
		{ 
			get 
			{
				if(Activated) return _temperatureSingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _temperatureSingleValue;
			} 
			set
			{
				SetValue( v =>  _temperatureSingleValue = v, _temperatureSingleValue, value,  "TemperatureSingleValue");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcThermodynamicTemperatureMeasure? @WetBulbTemperatureSingleValue 
		{ 
			get 
			{
				if(Activated) return _wetBulbTemperatureSingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _wetBulbTemperatureSingleValue;
			} 
			set
			{
				SetValue( v =>  _wetBulbTemperatureSingleValue = v, _wetBulbTemperatureSingleValue, value,  "WetBulbTemperatureSingleValue");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public IfcTimeSeries @WetBulbTemperatureTimeSeries 
		{ 
			get 
			{
				if(Activated) return _wetBulbTemperatureTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _wetBulbTemperatureTimeSeries;
			} 
			set
			{
				SetValue( v =>  _wetBulbTemperatureTimeSeries = v, _wetBulbTemperatureTimeSeries, value,  "WetBulbTemperatureTimeSeries");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional)]
		public IfcTimeSeries @TemperatureTimeSeries 
		{ 
			get 
			{
				if(Activated) return _temperatureTimeSeries;
				
				Model.Activate(this, true);
				Activated = true;
				return _temperatureTimeSeries;
			} 
			set
			{
				SetValue( v =>  _temperatureTimeSeries = v, _temperatureTimeSeries, value,  "TemperatureTimeSeries");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Optional)]
		public IfcDerivedMeasureValue @FlowrateSingleValue 
		{ 
			get 
			{
				if(Activated) return _flowrateSingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _flowrateSingleValue;
			} 
			set
			{
				SetValue( v =>  _flowrateSingleValue = v, _flowrateSingleValue, value,  "FlowrateSingleValue");
			} 
		}
	
		[EntityAttribute(16, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @FlowConditionSingleValue 
		{ 
			get 
			{
				if(Activated) return _flowConditionSingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _flowConditionSingleValue;
			} 
			set
			{
				SetValue( v =>  _flowConditionSingleValue = v, _flowConditionSingleValue, value,  "FlowConditionSingleValue");
			} 
		}
	
		[EntityAttribute(17, EntityAttributeState.Optional)]
		public IfcLinearVelocityMeasure? @VelocitySingleValue 
		{ 
			get 
			{
				if(Activated) return _velocitySingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _velocitySingleValue;
			} 
			set
			{
				SetValue( v =>  _velocitySingleValue = v, _velocitySingleValue, value,  "VelocitySingleValue");
			} 
		}
	
		[EntityAttribute(18, EntityAttributeState.Optional)]
		public IfcPressureMeasure? @PressureSingleValue 
		{ 
			get 
			{
				if(Activated) return _pressureSingleValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _pressureSingleValue;
			} 
			set
			{
				SetValue( v =>  _pressureSingleValue = v, _pressureSingleValue, value,  "PressureSingleValue");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"PropertySource",
			"FlowConditionTimeSeries",
			"VelocityTimeSeries",
			"FlowrateTimeSeries",
			"Fluid",
			"PressureTimeSeries",
			"UserDefinedPropertySource",
			"TemperatureSingleValue",
			"WetBulbTemperatureSingleValue",
			"WetBulbTemperatureTimeSeries",
			"TemperatureTimeSeries",
			"FlowrateSingleValue",
			"FlowConditionSingleValue",
			"VelocitySingleValue",
			"PressureSingleValue",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @PropertySource;
				case 5: 
					return @FlowConditionTimeSeries;
				case 6: 
					return @VelocityTimeSeries;
				case 7: 
					return @FlowrateTimeSeries;
				case 8: 
					return @Fluid;
				case 9: 
					return @PressureTimeSeries;
				case 10: 
					return @UserDefinedPropertySource;
				case 11: 
					return @TemperatureSingleValue;
				case 12: 
					return @WetBulbTemperatureSingleValue;
				case 13: 
					return @WetBulbTemperatureTimeSeries;
				case 14: 
					return @TemperatureTimeSeries;
				case 15: 
					return @FlowrateSingleValue;
				case 16: 
					return @FlowConditionSingleValue;
				case 17: 
					return @VelocitySingleValue;
				case 18: 
					return @PressureSingleValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "PropertySource":  
					return @PropertySource;
				case "FlowConditionTimeSeries":  
					return @FlowConditionTimeSeries;
				case "VelocityTimeSeries":  
					return @VelocityTimeSeries;
				case "FlowrateTimeSeries":  
					return @FlowrateTimeSeries;
				case "Fluid":  
					return @Fluid;
				case "PressureTimeSeries":  
					return @PressureTimeSeries;
				case "UserDefinedPropertySource":  
					return @UserDefinedPropertySource;
				case "TemperatureSingleValue":  
					return @TemperatureSingleValue;
				case "WetBulbTemperatureSingleValue":  
					return @WetBulbTemperatureSingleValue;
				case "WetBulbTemperatureTimeSeries":  
					return @WetBulbTemperatureTimeSeries;
				case "TemperatureTimeSeries":  
					return @TemperatureTimeSeries;
				case "FlowrateSingleValue":  
					return @FlowrateSingleValue;
				case "FlowConditionSingleValue":  
					return @FlowConditionSingleValue;
				case "VelocitySingleValue":  
					return @VelocitySingleValue;
				case "PressureSingleValue":  
					return @PressureSingleValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 if (value != null) @PropertySource = (IfcPropertySourceEnum)value;
					 break;
				case 5:
					 @FlowConditionTimeSeries = (IfcTimeSeries)value;
					 break;
				case 6:
					 @VelocityTimeSeries = (IfcTimeSeries)value;
					 break;
				case 7:
					 @FlowrateTimeSeries = (IfcTimeSeries)value;
					 break;
				case 8:
					 @Fluid = (IfcMaterial)value;
					 break;
				case 9:
					 @PressureTimeSeries = (IfcTimeSeries)value;
					 break;
				case 10:
					 @UserDefinedPropertySource = (IfcLabel?)value;
					 break;
				case 11:
					 @TemperatureSingleValue = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 12:
					 @WetBulbTemperatureSingleValue = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case 13:
					 @WetBulbTemperatureTimeSeries = (IfcTimeSeries)value;
					 break;
				case 14:
					 @TemperatureTimeSeries = (IfcTimeSeries)value;
					 break;
				case 15:
					 @FlowrateSingleValue = (IfcDerivedMeasureValue)value;
					 break;
				case 16:
					 @FlowConditionSingleValue = (IfcPositiveRatioMeasure?)value;
					 break;
				case 17:
					 @VelocitySingleValue = (IfcLinearVelocityMeasure?)value;
					 break;
				case 18:
					 @PressureSingleValue = (IfcPressureMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "PropertySource":
					 if (value != null) @PropertySource = (IfcPropertySourceEnum)value;
					 break;
				case "FlowConditionTimeSeries":
					 @FlowConditionTimeSeries = (IfcTimeSeries)value;
					 break;
				case "VelocityTimeSeries":
					 @VelocityTimeSeries = (IfcTimeSeries)value;
					 break;
				case "FlowrateTimeSeries":
					 @FlowrateTimeSeries = (IfcTimeSeries)value;
					 break;
				case "Fluid":
					 @Fluid = (IfcMaterial)value;
					 break;
				case "PressureTimeSeries":
					 @PressureTimeSeries = (IfcTimeSeries)value;
					 break;
				case "UserDefinedPropertySource":
					 @UserDefinedPropertySource = (IfcLabel?)value;
					 break;
				case "TemperatureSingleValue":
					 @TemperatureSingleValue = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "WetBulbTemperatureSingleValue":
					 @WetBulbTemperatureSingleValue = (IfcThermodynamicTemperatureMeasure?)value;
					 break;
				case "WetBulbTemperatureTimeSeries":
					 @WetBulbTemperatureTimeSeries = (IfcTimeSeries)value;
					 break;
				case "TemperatureTimeSeries":
					 @TemperatureTimeSeries = (IfcTimeSeries)value;
					 break;
				case "FlowrateSingleValue":
					 @FlowrateSingleValue = (IfcDerivedMeasureValue)value;
					 break;
				case "FlowConditionSingleValue":
					 @FlowConditionSingleValue = (IfcPositiveRatioMeasure?)value;
					 break;
				case "VelocitySingleValue":
					 @VelocitySingleValue = (IfcLinearVelocityMeasure?)value;
					 break;
				case "PressureSingleValue":
					 @PressureSingleValue = (IfcPressureMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}