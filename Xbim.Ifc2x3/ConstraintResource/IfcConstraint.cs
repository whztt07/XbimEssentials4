// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:37
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ActorResource;
using Xbim.Ifc2x3.DateTimeResource;
using System.Collections.Generic;
using System.ComponentModel;
using System;
using Xbim.Common;

namespace Xbim.Ifc2x3.ConstraintResource
{
	[EntityName("IFCCONSTRAINT")]
	public abstract partial class @IfcConstraint : IPersistEntity, INotifyPropertyChanged
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; set;}
		public IModel Model { get; internal set; }

		protected bool IsActivated = false;

		public bool Activated { get { return IsActivated; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcConstraint(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLabel _name;
		private IfcText? _description;
		private IfcConstraintEnum _constraintGrade;
		private IfcLabel? _constraintSource;
		private IfcActorSelect _creatingActor;
		private IfcDateTimeSelect _creationTime;
		private IfcLabel? _userDefinedGrade;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcLabel @Name 
		{ 
			get 
			{
				if(IsActivated) return _name;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(IsActivated) return _description;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcConstraintEnum @ConstraintGrade 
		{ 
			get 
			{
				if(IsActivated) return _constraintGrade;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _constraintGrade;
			} 
			set
			{
				SetValue( v =>  _constraintGrade = v, _constraintGrade, value,  "ConstraintGrade");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcLabel? @ConstraintSource 
		{ 
			get 
			{
				if(IsActivated) return _constraintSource;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _constraintSource;
			} 
			set
			{
				SetValue( v =>  _constraintSource = v, _constraintSource, value,  "ConstraintSource");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcActorSelect @CreatingActor 
		{ 
			get 
			{
				if(IsActivated) return _creatingActor;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _creatingActor;
			} 
			set
			{
				SetValue( v =>  _creatingActor = v, _creatingActor, value,  "CreatingActor");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDateTimeSelect @CreationTime 
		{ 
			get 
			{
				if(IsActivated) return _creationTime;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _creationTime;
			} 
			set
			{
				SetValue( v =>  _creationTime = v, _creationTime, value,  "CreationTime");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedGrade 
		{ 
			get 
			{
				if(IsActivated) return _userDefinedGrade;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _userDefinedGrade;
			} 
			set
			{
				SetValue( v =>  _userDefinedGrade = v, _userDefinedGrade, value,  "UserDefinedGrade");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcConstraintClassificationRelationship> @ClassifiedAs 
		{ 
			get 
			{
				return Model.Instances.Where<IfcConstraintClassificationRelationship>(e => e.ClassifiedConstraint == this);
			} 
		}
	
		public IEnumerable<IfcConstraintRelationship> @RelatesConstraints 
		{ 
			get 
			{
				return Model.Instances.Where<IfcConstraintRelationship>(e => e.RelatingConstraint == this);
			} 
		}
	
		public IEnumerable<IfcConstraintRelationship> @IsRelatedWith 
		{ 
			get 
			{
				return Model.Instances.Where<IfcConstraintRelationship>(e => e.RelatedConstraints != null &&  e.RelatedConstraints.Contains(this));
			} 
		}
	
		public IEnumerable<IfcPropertyConstraintRelationship> @PropertiesForConstraint 
		{ 
			get 
			{
				return Model.Instances.Where<IfcPropertyConstraintRelationship>(e => e.RelatingConstraint == this);
			} 
		}
	
		public IEnumerable<IfcConstraintAggregationRelationship> @Aggregates 
		{ 
			get 
			{
				return Model.Instances.Where<IfcConstraintAggregationRelationship>(e => e.RelatingConstraint == this);
			} 
		}
	
		public IEnumerable<IfcConstraintAggregationRelationship> @IsAggregatedIn 
		{ 
			get 
			{
				return Model.Instances.Where<IfcConstraintAggregationRelationship>(e => e.RelatedConstraints != null &&  e.RelatedConstraints.Contains(this));
			} 
		}
	

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region Where rules
		/*WR11:             ((ConstraintGrade = IfcConstraintEnum.USERDEFINED) AND EXISTS(SELF\IfcConstraint.UserDefinedGrade));*/
		#endregion

		#region IPersist implementation
		#endregion

	}
}