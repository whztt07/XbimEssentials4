// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:43:55
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.DateTimeResource;
using System.Collections.Generic;
using System.ComponentModel;
using System;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ApprovalResource
{
	[EntityName("IFCAPPROVAL", 626)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcApproval : IPersistEntity, INotifyPropertyChanged, IInstantiableEntity
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; internal set;}
		
		public IModel Model { get; internal set; }
		
		public bool Activated { get; internal set; }

		public void Activate(bool write)
		{
			if (Activated) return; //activation can only happen once in a lifetime of the object

			Model.Activate(this, write);
			Activated = true;
		}

		public void Activate (Action activation)
		{
			activation();
			Activated = true;
		}
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcApproval(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcText? _description;
		private IfcDateTimeSelect _approvalDateTime;
		private IfcLabel? _approvalStatus;
		private IfcLabel? _approvalLevel;
		private IfcText? _approvalQualifier;
		private IfcLabel _name;
		private IfcIdentifier _identifier;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(0, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttributee(1, EntityAttributeState.Mandatory)]
		public IfcDateTimeSelect @ApprovalDateTime 
		{ 
			get 
			{
				if(Activated) return _approvalDateTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _approvalDateTime;
			} 
			set
			{
				SetValue( v =>  _approvalDateTime = v, _approvalDateTime, value,  "ApprovalDateTime");
			} 
		}
	
		[EntityAttributee(2, EntityAttributeState.Optional)]
		public IfcLabel? @ApprovalStatus 
		{ 
			get 
			{
				if(Activated) return _approvalStatus;
				
				Model.Activate(this, true);
				Activated = true;
				return _approvalStatus;
			} 
			set
			{
				SetValue( v =>  _approvalStatus = v, _approvalStatus, value,  "ApprovalStatus");
			} 
		}
	
		[EntityAttributee(3, EntityAttributeState.Optional)]
		public IfcLabel? @ApprovalLevel 
		{ 
			get 
			{
				if(Activated) return _approvalLevel;
				
				Model.Activate(this, true);
				Activated = true;
				return _approvalLevel;
			} 
			set
			{
				SetValue( v =>  _approvalLevel = v, _approvalLevel, value,  "ApprovalLevel");
			} 
		}
	
		[EntityAttributee(4, EntityAttributeState.Optional)]
		public IfcText? @ApprovalQualifier 
		{ 
			get 
			{
				if(Activated) return _approvalQualifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _approvalQualifier;
			} 
			set
			{
				SetValue( v =>  _approvalQualifier = v, _approvalQualifier, value,  "ApprovalQualifier");
			} 
		}
	
		[EntityAttributee(5, EntityAttributeState.Mandatory)]
		public IfcLabel @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttributee(6, EntityAttributeState.Mandatory)]
		public IfcIdentifier @Identifier 
		{ 
			get 
			{
				if(Activated) return _identifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _identifier;
			} 
			set
			{
				SetValue( v =>  _identifier = v, _identifier, value,  "Identifier");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcApprovalActorRelationship> @Actors 
		{ 
			get 
			{
				return Model.Instances.Where<IfcApprovalActorRelationship>(e => e.Approval == this);
			} 
		}
	
		public IEnumerable<IfcApprovalRelationship> @IsRelatedWith 
		{ 
			get 
			{
				return Model.Instances.Where<IfcApprovalRelationship>(e => e.RelatedApproval == this);
			} 
		}
	
		public IEnumerable<IfcApprovalRelationship> @Relates 
		{ 
			get 
			{
				return Model.Instances.Where<IfcApprovalRelationship>(e => e.RelatingApproval == this);
			} 
		}
	

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action doAction = () => setter(newValue);
			Action undoAction = () => setter(oldValue);
			txn.AddReversibleAction(doAction, undoAction, this);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region IPersist implementation
		public virtual void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_description = value.StringVal;
					return;
				case 1: 
					_approvalDateTime = (IfcDateTimeSelect)(value.EntityVal);
					return;
				case 2: 
					_approvalStatus = value.StringVal;
					return;
				case 3: 
					_approvalLevel = value.StringVal;
					return;
				case 4: 
					_approvalQualifier = value.StringVal;
					return;
				case 5: 
					_name = value.StringVal;
					return;
				case 6: 
					_identifier = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public virtual string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}