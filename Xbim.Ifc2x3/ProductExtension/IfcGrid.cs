// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:19
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.GeometricConstraintResource;
using Xbim.Ifc2x3.RepresentationResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ProductExtension
{
	[EntityName("IFCGRID", 564)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcGrid : IfcProduct, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcGrid(IModel model) : base(model) 		{ 
			Model = model; 
			_uAxes = new ItemSet<IfcGridAxis>( model );
			_vAxes = new ItemSet<IfcGridAxis>( model );
			_wAxes = new ItemSet<IfcGridAxis>( model );
		}

		#region Explicit attribute fields
		private ItemSet<IfcGridAxis> _uAxes;
		private ItemSet<IfcGridAxis> _vAxes;
		private ItemSet<IfcGridAxis> _wAxes;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public ItemSet<IfcGridAxis> @UAxes 
		{ 
			get 
			{
				if(Activated) return _uAxes;
				
				Model.Activate(this, true);
				Activated = true;
				return _uAxes;
			} 
			set
			{
				SetValue( v =>  _uAxes = v, _uAxes, value,  "UAxes");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public ItemSet<IfcGridAxis> @VAxes 
		{ 
			get 
			{
				if(Activated) return _vAxes;
				
				Model.Activate(this, true);
				Activated = true;
				return _vAxes;
			} 
			set
			{
				SetValue( v =>  _vAxes = v, _vAxes, value,  "VAxes");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public ItemSet<IfcGridAxis> @WAxes 
		{ 
			get 
			{
				if(Activated) return _wAxes;
				
				Model.Activate(this, true);
				Activated = true;
				return _wAxes;
			} 
			set
			{
				SetValue( v =>  _wAxes = v, _wAxes, value,  "WAxes");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcRelContainedInSpatialStructure> @ContainedInStructure 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelContainedInSpatialStructure>(e => e.RelatedElements != null &&  e.RelatedElements.Contains(this));
			} 
		}
	

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ObjectType",
			"ObjectPlacement",
			"Representation",
			"UAxes",
			"VAxes",
			"WAxes",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ObjectType;
				case 5: 
					return @ObjectPlacement;
				case 6: 
					return @Representation;
				case 7: 
					return @UAxes;
				case 8: 
					return @VAxes;
				case 9: 
					return @WAxes;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ObjectType":  
					return @ObjectType;
				case "ObjectPlacement":  
					return @ObjectPlacement;
				case "Representation":  
					return @Representation;
				case "UAxes":  
					return @UAxes;
				case "VAxes":  
					return @VAxes;
				case "WAxes":  
					return @WAxes;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ObjectType = (IfcLabel?)value;
					 break;
				case 5:
					 @ObjectPlacement = (IfcObjectPlacement)value;
					 break;
				case 6:
					 @Representation = (IfcProductRepresentation)value;
					 break;
				case 7:
					 @UAxes.Add((IfcGridAxis)value);
					 break;
				case 8:
					 @VAxes.Add((IfcGridAxis)value);
					 break;
				case 9:
					 @WAxes.Add((IfcGridAxis)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ObjectType":
					 @ObjectType = (IfcLabel?)value;
					 break;
				case "ObjectPlacement":
					 @ObjectPlacement = (IfcObjectPlacement)value;
					 break;
				case "Representation":
					 @Representation = (IfcProductRepresentation)value;
					 break;
				case "UAxes":
					 @UAxes.Add((IfcGridAxis)value);
					 break;
				case "VAxes":
					 @VAxes.Add((IfcGridAxis)value);
					 break;
				case "WAxes":
					 @WAxes.Add((IfcGridAxis)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					base.Parse(propIndex, value); 
					return;
				case 7: 
					if (_uAxes == null) _uAxes = new ItemSet<IfcGridAxis>( Model );
					_uAxes.Add((IfcGridAxis)value.EntityVal);
					return;
				case 8: 
					if (_vAxes == null) _vAxes = new ItemSet<IfcGridAxis>( Model );
					_vAxes.Add((IfcGridAxis)value.EntityVal);
					return;
				case 9: 
					if (_wAxes == null) _wAxes = new ItemSet<IfcGridAxis>( Model );
					_wAxes.Add((IfcGridAxis)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR41:	WR41 : EXISTS(SELF\IfcProduct.ObjectPlacement);*/
		}
		#endregion

		
	}
}