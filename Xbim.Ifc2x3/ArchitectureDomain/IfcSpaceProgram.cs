// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		24.09.2015 10:03:34
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ProductExtension;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ArchitectureDomain
{
	[IndexedClass]
	[ExpressType("IFCSPACEPROGRAM", 709)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcSpaceProgram : IfcControl, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSpaceProgram(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcIdentifier _spaceProgramIdentifier;
		private IfcAreaMeasure? _maxRequiredArea;
		private IfcAreaMeasure? _minRequiredArea;
		private IfcSpatialStructureElement _requestedLocation;
		private IfcAreaMeasure _standardRequiredArea;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcIdentifier @SpaceProgramIdentifier 
		{ 
			get 
			{
				if(Activated) return _spaceProgramIdentifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _spaceProgramIdentifier;
			} 
			set
			{
				SetValue( v =>  _spaceProgramIdentifier = v, _spaceProgramIdentifier, value,  "SpaceProgramIdentifier");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcAreaMeasure? @MaxRequiredArea 
		{ 
			get 
			{
				if(Activated) return _maxRequiredArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _maxRequiredArea;
			} 
			set
			{
				SetValue( v =>  _maxRequiredArea = v, _maxRequiredArea, value,  "MaxRequiredArea");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcAreaMeasure? @MinRequiredArea 
		{ 
			get 
			{
				if(Activated) return _minRequiredArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _minRequiredArea;
			} 
			set
			{
				SetValue( v =>  _minRequiredArea = v, _minRequiredArea, value,  "MinRequiredArea");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcSpatialStructureElement @RequestedLocation 
		{ 
			get 
			{
				if(Activated) return _requestedLocation;
				
				Model.Activate(this, true);
				Activated = true;
				return _requestedLocation;
			} 
			set
			{
				SetValue( v =>  _requestedLocation = v, _requestedLocation, value,  "RequestedLocation");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcAreaMeasure @StandardRequiredArea 
		{ 
			get 
			{
				if(Activated) return _standardRequiredArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _standardRequiredArea;
			} 
			set
			{
				SetValue( v =>  _standardRequiredArea = v, _standardRequiredArea, value,  "StandardRequiredArea");
			} 
		}
	
		#endregion

		#region Inverse attributes
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1)]
		public IEnumerable<IfcRelInteractionRequirements> @HasInteractionReqsFrom 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelInteractionRequirements>(e => e.RelatedSpaceProgram == this);
			} 
		}
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1)]
		public IEnumerable<IfcRelInteractionRequirements> @HasInteractionReqsTo 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelInteractionRequirements>(e => e.RelatingSpaceProgram == this);
			} 
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value); 
					return;
				case 5: 
					_spaceProgramIdentifier = value.StringVal;
					return;
				case 6: 
					_maxRequiredArea = value.RealVal;
					return;
				case 7: 
					_minRequiredArea = value.RealVal;
					return;
				case 8: 
					_requestedLocation = (IfcSpatialStructureElement)(value.EntityVal);
					return;
				case 9: 
					_standardRequiredArea = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}