// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:23:00
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.ProductExtension;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.ArchitectureDomain
{
	[EntityName("IFCRELINTERACTIONREQUIREMENTS", 708)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcRelInteractionRequirements : IfcRelConnects, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRelInteractionRequirements(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCountMeasure? _dailyInteraction;
		private IfcNormalisedRatioMeasure? _importanceRating;
		private IfcSpatialStructureElement _locationOfInteraction;
		private IfcSpaceProgram _relatedSpaceProgram;
		private IfcSpaceProgram _relatingSpaceProgram;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcCountMeasure? @DailyInteraction 
		{ 
			get 
			{
				if(Activated) return _dailyInteraction;
				
				Model.Activate(this, true);
				Activated = true;
				return _dailyInteraction;
			} 
			set
			{
				SetValue( v =>  _dailyInteraction = v, _dailyInteraction, value,  "DailyInteraction");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcNormalisedRatioMeasure? @ImportanceRating 
		{ 
			get 
			{
				if(Activated) return _importanceRating;
				
				Model.Activate(this, true);
				Activated = true;
				return _importanceRating;
			} 
			set
			{
				SetValue( v =>  _importanceRating = v, _importanceRating, value,  "ImportanceRating");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcSpatialStructureElement @LocationOfInteraction 
		{ 
			get 
			{
				if(Activated) return _locationOfInteraction;
				
				Model.Activate(this, true);
				Activated = true;
				return _locationOfInteraction;
			} 
			set
			{
				SetValue( v =>  _locationOfInteraction = v, _locationOfInteraction, value,  "LocationOfInteraction");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public IfcSpaceProgram @RelatedSpaceProgram 
		{ 
			get 
			{
				if(Activated) return _relatedSpaceProgram;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedSpaceProgram;
			} 
			set
			{
				SetValue( v =>  _relatedSpaceProgram = v, _relatedSpaceProgram, value,  "RelatedSpaceProgram");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcSpaceProgram @RelatingSpaceProgram 
		{ 
			get 
			{
				if(Activated) return _relatingSpaceProgram;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingSpaceProgram;
			} 
			set
			{
				SetValue( v =>  _relatingSpaceProgram = v, _relatingSpaceProgram, value,  "RelatingSpaceProgram");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"DailyInteraction",
			"ImportanceRating",
			"LocationOfInteraction",
			"RelatedSpaceProgram",
			"RelatingSpaceProgram",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @DailyInteraction;
				case 5: 
					return @ImportanceRating;
				case 6: 
					return @LocationOfInteraction;
				case 7: 
					return @RelatedSpaceProgram;
				case 8: 
					return @RelatingSpaceProgram;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "DailyInteraction":  
					return @DailyInteraction;
				case "ImportanceRating":  
					return @ImportanceRating;
				case "LocationOfInteraction":  
					return @LocationOfInteraction;
				case "RelatedSpaceProgram":  
					return @RelatedSpaceProgram;
				case "RelatingSpaceProgram":  
					return @RelatingSpaceProgram;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @DailyInteraction = (IfcCountMeasure?)value;
					 break;
				case 5:
					 @ImportanceRating = (IfcNormalisedRatioMeasure?)value;
					 break;
				case 6:
					 @LocationOfInteraction = (IfcSpatialStructureElement)value;
					 break;
				case 7:
					 @RelatedSpaceProgram = (IfcSpaceProgram)value;
					 break;
				case 8:
					 @RelatingSpaceProgram = (IfcSpaceProgram)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "DailyInteraction":
					 @DailyInteraction = (IfcCountMeasure?)value;
					 break;
				case "ImportanceRating":
					 @ImportanceRating = (IfcNormalisedRatioMeasure?)value;
					 break;
				case "LocationOfInteraction":
					 @LocationOfInteraction = (IfcSpatialStructureElement)value;
					 break;
				case "RelatedSpaceProgram":
					 @RelatedSpaceProgram = (IfcSpaceProgram)value;
					 break;
				case "RelatingSpaceProgram":
					 @RelatingSpaceProgram = (IfcSpaceProgram)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_dailyInteraction = value.NumberVal;
					return;
				case 5: 
					_importanceRating = value.RealVal;
					return;
				case 6: 
					_locationOfInteraction = (IfcSpatialStructureElement)(value.EntityVal);
					return;
				case 7: 
					_relatedSpaceProgram = (IfcSpaceProgram)(value.EntityVal);
					return;
				case 8: 
					_relatingSpaceProgram = (IfcSpaceProgram)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}