// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:35
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.PresentationResource;
using Xbim.Common;

namespace Xbim.Ifc2x3.PresentationOrganizationResource
{
	[EntityName("IFCLIGHTSOURCE", 755)]
	public abstract partial class @IfcLightSource : IfcGeometricRepresentationItem
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLightSource(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLabel? _name;
		private IfcColourRgb _lightColour;
		private IfcNormalisedRatioMeasure? _ambientIntensity;
		private IfcNormalisedRatioMeasure? _intensity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Optional)]
		public IfcLabel? @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcColourRgb @LightColour 
		{ 
			get 
			{
				if(Activated) return _lightColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _lightColour;
			} 
			set
			{
				SetValue( v =>  _lightColour = v, _lightColour, value,  "LightColour");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcNormalisedRatioMeasure? @AmbientIntensity 
		{ 
			get 
			{
				if(Activated) return _ambientIntensity;
				
				Model.Activate(this, true);
				Activated = true;
				return _ambientIntensity;
			} 
			set
			{
				SetValue( v =>  _ambientIntensity = v, _ambientIntensity, value,  "AmbientIntensity");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcNormalisedRatioMeasure? @Intensity 
		{ 
			get 
			{
				if(Activated) return _intensity;
				
				Model.Activate(this, true);
				Activated = true;
				return _intensity;
			} 
			set
			{
				SetValue( v =>  _intensity = v, _intensity, value,  "Intensity");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion


		#region IPersist implementation
		#endregion

		public virtual override string WhereRule() 
		{
			return "";
		}
	}
}