// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:22:58
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.GeometricModelResource
{
	[EntityName("IFCBLOCK", 702)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcBlock : IfcCsgPrimitive3D, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBlock(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure _xLength;
		private IfcPositiveLengthMeasure _yLength;
		private IfcPositiveLengthMeasure _zLength;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @XLength 
		{ 
			get 
			{
				if(Activated) return _xLength;
				
				Model.Activate(this, true);
				Activated = true;
				return _xLength;
			} 
			set
			{
				SetValue( v =>  _xLength = v, _xLength, value,  "XLength");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @YLength 
		{ 
			get 
			{
				if(Activated) return _yLength;
				
				Model.Activate(this, true);
				Activated = true;
				return _yLength;
			} 
			set
			{
				SetValue( v =>  _yLength = v, _yLength, value,  "YLength");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @ZLength 
		{ 
			get 
			{
				if(Activated) return _zLength;
				
				Model.Activate(this, true);
				Activated = true;
				return _zLength;
			} 
			set
			{
				SetValue( v =>  _zLength = v, _zLength, value,  "ZLength");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Position",
			"XLength",
			"YLength",
			"ZLength",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Position;
				case 1: 
					return @XLength;
				case 2: 
					return @YLength;
				case 3: 
					return @ZLength;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Position":  
					return @Position;
				case "XLength":  
					return @XLength;
				case "YLength":  
					return @YLength;
				case "ZLength":  
					return @ZLength;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case 1:
					 if (value != null) @XLength = (IfcPositiveLengthMeasure)value;
					 break;
				case 2:
					 if (value != null) @YLength = (IfcPositiveLengthMeasure)value;
					 break;
				case 3:
					 if (value != null) @ZLength = (IfcPositiveLengthMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Position":
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case "XLength":
					 if (value != null) @XLength = (IfcPositiveLengthMeasure)value;
					 break;
				case "YLength":
					 if (value != null) @YLength = (IfcPositiveLengthMeasure)value;
					 break;
				case "ZLength":
					 if (value != null) @ZLength = (IfcPositiveLengthMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_xLength = value.RealVal;
					return;
				case 2: 
					_yLength = value.RealVal;
					return;
				case 3: 
					_zLength = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}