// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:33
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.GeometricModelResource
{
	[EntityName("IFCBOOLEANRESULT", 339)]
	public  partial class @IfcBooleanResult : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBooleanResult(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcBooleanOperator _operator;
		private IfcBooleanOperand _firstOperand;
		private IfcBooleanOperand _secondOperand;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcBooleanOperator @Operator 
		{ 
			get 
			{
				if(Activated) return _operator;
				
				Model.Activate(this, true);
				Activated = true;
				return _operator;
			} 
			set
			{
				SetValue( v =>  _operator = v, _operator, value,  "Operator");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcBooleanOperand @FirstOperand 
		{ 
			get 
			{
				if(Activated) return _firstOperand;
				
				Model.Activate(this, true);
				Activated = true;
				return _firstOperand;
			} 
			set
			{
				SetValue( v =>  _firstOperand = v, _firstOperand, value,  "FirstOperand");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcBooleanOperand @SecondOperand 
		{ 
			get 
			{
				if(Activated) return _secondOperand;
				
				Model.Activate(this, true);
				Activated = true;
				return _secondOperand;
			} 
			set
			{
				SetValue( v =>  _secondOperand = v, _secondOperand, value,  "SecondOperand");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Operator",
			"FirstOperand",
			"SecondOperand",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Operator;
				case 1: 
					return @FirstOperand;
				case 2: 
					return @SecondOperand;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Operator":  
					return @Operator;
				case "FirstOperand":  
					return @FirstOperand;
				case "SecondOperand":  
					return @SecondOperand;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Operator = (IfcBooleanOperator)value;
					 break;
				case 1:
					 @FirstOperand = (IfcBooleanOperand)value;
					 break;
				case 2:
					 @SecondOperand = (IfcBooleanOperand)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Operator":
					 if (value != null) @Operator = (IfcBooleanOperator)value;
					 break;
				case "FirstOperand":
					 @FirstOperand = (IfcBooleanOperand)value;
					 break;
				case "SecondOperand":
					 @SecondOperand = (IfcBooleanOperand)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR1:	WR1 : FirstOperand.Dim = SecondOperand.Dim;*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}