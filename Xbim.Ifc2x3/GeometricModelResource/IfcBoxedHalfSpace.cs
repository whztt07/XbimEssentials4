// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:04:14
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.GeometricModelResource
{
	[EntityName("IFCBOXEDHALFSPACE", 655)]
	public  partial class @IfcBoxedHalfSpace : IfcHalfSpaceSolid, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBoxedHalfSpace(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcBoundingBox _enclosure;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcBoundingBox @Enclosure 
		{ 
			get 
			{
				if(Activated) return _enclosure;
				
				Model.Activate(this, true);
				Activated = true;
				return _enclosure;
			} 
			set
			{
				SetValue( v =>  _enclosure = v, _enclosure, value,  "Enclosure");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"BaseSurface",
			"AgreementFlag",
			"Enclosure",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @BaseSurface;
				case 1: 
					return @AgreementFlag;
				case 2: 
					return @Enclosure;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "BaseSurface":  
					return @BaseSurface;
				case "AgreementFlag":  
					return @AgreementFlag;
				case "Enclosure":  
					return @Enclosure;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @BaseSurface = (IfcSurface)value;
					 break;
				case 1:
					 if (value != null) @AgreementFlag = (bool)value;
					 break;
				case 2:
					 @Enclosure = (IfcBoundingBox)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "BaseSurface":
					 @BaseSurface = (IfcSurface)value;
					 break;
				case "AgreementFlag":
					 if (value != null) @AgreementFlag = (bool)value;
					 break;
				case "Enclosure":
					 @Enclosure = (IfcBoundingBox)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR1:	WR1 : NOT ('IFC2X3.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));*/
		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}