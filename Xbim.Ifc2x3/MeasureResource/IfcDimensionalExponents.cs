// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:38
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using System.ComponentModel;
using System;
using Xbim.Common;

namespace Xbim.Ifc2x3.MeasureResource
{
	[EntityName("IFCDIMENSIONALEXPONENTS")]
	public  partial class @IfcDimensionalExponents : INotifyPropertyChanged, IInstantiableEntity
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; set;}
		public IModel Model { get; internal set; }

		protected bool IsActivated = false;

		public bool Activated { get { return IsActivated; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcDimensionalExponents(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private int _lengthExponent;
		private int _massExponent;
		private int _timeExponent;
		private int _electricCurrentExponent;
		private int _thermodynamicTemperatureExponent;
		private int _amountOfSubstanceExponent;
		private int _luminousIntensityExponent;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public int @LengthExponent 
		{ 
			get 
			{
				if(IsActivated) return _lengthExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _lengthExponent;
			} 
			set
			{
				SetValue( v =>  _lengthExponent = v, _lengthExponent, value,  "LengthExponent");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public int @MassExponent 
		{ 
			get 
			{
				if(IsActivated) return _massExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _massExponent;
			} 
			set
			{
				SetValue( v =>  _massExponent = v, _massExponent, value,  "MassExponent");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public int @TimeExponent 
		{ 
			get 
			{
				if(IsActivated) return _timeExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _timeExponent;
			} 
			set
			{
				SetValue( v =>  _timeExponent = v, _timeExponent, value,  "TimeExponent");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public int @ElectricCurrentExponent 
		{ 
			get 
			{
				if(IsActivated) return _electricCurrentExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _electricCurrentExponent;
			} 
			set
			{
				SetValue( v =>  _electricCurrentExponent = v, _electricCurrentExponent, value,  "ElectricCurrentExponent");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public int @ThermodynamicTemperatureExponent 
		{ 
			get 
			{
				if(IsActivated) return _thermodynamicTemperatureExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _thermodynamicTemperatureExponent;
			} 
			set
			{
				SetValue( v =>  _thermodynamicTemperatureExponent = v, _thermodynamicTemperatureExponent, value,  "ThermodynamicTemperatureExponent");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public int @AmountOfSubstanceExponent 
		{ 
			get 
			{
				if(IsActivated) return _amountOfSubstanceExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _amountOfSubstanceExponent;
			} 
			set
			{
				SetValue( v =>  _amountOfSubstanceExponent = v, _amountOfSubstanceExponent, value,  "AmountOfSubstanceExponent");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public int @LuminousIntensityExponent 
		{ 
			get 
			{
				if(IsActivated) return _luminousIntensityExponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _luminousIntensityExponent;
			} 
			set
			{
				SetValue( v =>  _luminousIntensityExponent = v, _luminousIntensityExponent, value,  "LuminousIntensityExponent");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"LengthExponent",
			"MassExponent",
			"TimeExponent",
			"ElectricCurrentExponent",
			"ThermodynamicTemperatureExponent",
			"AmountOfSubstanceExponent",
			"LuminousIntensityExponent",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @LengthExponent;
				case 1: 
					return @MassExponent;
				case 2: 
					return @TimeExponent;
				case 3: 
					return @ElectricCurrentExponent;
				case 4: 
					return @ThermodynamicTemperatureExponent;
				case 5: 
					return @AmountOfSubstanceExponent;
				case 6: 
					return @LuminousIntensityExponent;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "LengthExponent":  
					return @LengthExponent;
				case "MassExponent":  
					return @MassExponent;
				case "TimeExponent":  
					return @TimeExponent;
				case "ElectricCurrentExponent":  
					return @ElectricCurrentExponent;
				case "ThermodynamicTemperatureExponent":  
					return @ThermodynamicTemperatureExponent;
				case "AmountOfSubstanceExponent":  
					return @AmountOfSubstanceExponent;
				case "LuminousIntensityExponent":  
					return @LuminousIntensityExponent;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @LengthExponent = (int)value;
					 break;
				case 1:
					 if (value != null) @MassExponent = (int)value;
					 break;
				case 2:
					 if (value != null) @TimeExponent = (int)value;
					 break;
				case 3:
					 if (value != null) @ElectricCurrentExponent = (int)value;
					 break;
				case 4:
					 if (value != null) @ThermodynamicTemperatureExponent = (int)value;
					 break;
				case 5:
					 if (value != null) @AmountOfSubstanceExponent = (int)value;
					 break;
				case 6:
					 if (value != null) @LuminousIntensityExponent = (int)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "LengthExponent":
					 if (value != null) @LengthExponent = (int)value;
					 break;
				case "MassExponent":
					 if (value != null) @MassExponent = (int)value;
					 break;
				case "TimeExponent":
					 if (value != null) @TimeExponent = (int)value;
					 break;
				case "ElectricCurrentExponent":
					 if (value != null) @ElectricCurrentExponent = (int)value;
					 break;
				case "ThermodynamicTemperatureExponent":
					 if (value != null) @ThermodynamicTemperatureExponent = (int)value;
					 break;
				case "AmountOfSubstanceExponent":
					 if (value != null) @AmountOfSubstanceExponent = (int)value;
					 break;
				case "LuminousIntensityExponent":
					 if (value != null) @LuminousIntensityExponent = (int)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}