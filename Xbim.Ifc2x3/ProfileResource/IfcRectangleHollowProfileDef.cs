// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:35
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.ProfileResource
{
	[EntityName("IFCRECTANGLEHOLLOWPROFILEDEF", 562)]
	public  partial class @IfcRectangleHollowProfileDef : IfcRectangleProfileDef, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRectangleHollowProfileDef(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure _wallThickness;
		private IfcPositiveLengthMeasure? _innerFilletRadius;
		private IfcPositiveLengthMeasure? _outerFilletRadius;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @WallThickness 
		{ 
			get 
			{
				if(Activated) return _wallThickness;
				
				Model.Activate(this, true);
				Activated = true;
				return _wallThickness;
			} 
			set
			{
				SetValue( v =>  _wallThickness = v, _wallThickness, value,  "WallThickness");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @InnerFilletRadius 
		{ 
			get 
			{
				if(Activated) return _innerFilletRadius;
				
				Model.Activate(this, true);
				Activated = true;
				return _innerFilletRadius;
			} 
			set
			{
				SetValue( v =>  _innerFilletRadius = v, _innerFilletRadius, value,  "InnerFilletRadius");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @OuterFilletRadius 
		{ 
			get 
			{
				if(Activated) return _outerFilletRadius;
				
				Model.Activate(this, true);
				Activated = true;
				return _outerFilletRadius;
			} 
			set
			{
				SetValue( v =>  _outerFilletRadius = v, _outerFilletRadius, value,  "OuterFilletRadius");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"ProfileType",
			"ProfileName",
			"Position",
			"XDim",
			"YDim",
			"WallThickness",
			"InnerFilletRadius",
			"OuterFilletRadius",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @ProfileType;
				case 1: 
					return @ProfileName;
				case 2: 
					return @Position;
				case 3: 
					return @XDim;
				case 4: 
					return @YDim;
				case 5: 
					return @WallThickness;
				case 6: 
					return @InnerFilletRadius;
				case 7: 
					return @OuterFilletRadius;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "ProfileType":  
					return @ProfileType;
				case "ProfileName":  
					return @ProfileName;
				case "Position":  
					return @Position;
				case "XDim":  
					return @XDim;
				case "YDim":  
					return @YDim;
				case "WallThickness":  
					return @WallThickness;
				case "InnerFilletRadius":  
					return @InnerFilletRadius;
				case "OuterFilletRadius":  
					return @OuterFilletRadius;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @ProfileType = (IfcProfileTypeEnum)value;
					 break;
				case 1:
					 @ProfileName = (IfcLabel?)value;
					 break;
				case 2:
					 @Position = (IfcAxis2Placement2D)value;
					 break;
				case 3:
					 if (value != null) @XDim = (IfcPositiveLengthMeasure)value;
					 break;
				case 4:
					 if (value != null) @YDim = (IfcPositiveLengthMeasure)value;
					 break;
				case 5:
					 if (value != null) @WallThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case 6:
					 @InnerFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case 7:
					 @OuterFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "ProfileType":
					 if (value != null) @ProfileType = (IfcProfileTypeEnum)value;
					 break;
				case "ProfileName":
					 @ProfileName = (IfcLabel?)value;
					 break;
				case "Position":
					 @Position = (IfcAxis2Placement2D)value;
					 break;
				case "XDim":
					 if (value != null) @XDim = (IfcPositiveLengthMeasure)value;
					 break;
				case "YDim":
					 if (value != null) @YDim = (IfcPositiveLengthMeasure)value;
					 break;
				case "WallThickness":
					 if (value != null) @WallThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case "InnerFilletRadius":
					 @InnerFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case "OuterFilletRadius":
					 @OuterFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR31:             (WallThickness < (SELF\IfcRectangleProfileDef.YDim/2.));*/
		/*WR32:              (OuterFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));*/
		/*WR33:              (InnerFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2. - WallThickness)));*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}