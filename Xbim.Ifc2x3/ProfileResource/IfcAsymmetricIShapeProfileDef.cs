// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:12
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.ProfileResource
{
	[EntityName("IFCASYMMETRICISHAPEPROFILEDEF", 31)]
	public  partial class @IfcAsymmetricIShapeProfileDef : IfcIShapeProfileDef, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAsymmetricIShapeProfileDef(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure _topFlangeWidth;
		private IfcPositiveLengthMeasure? _topFlangeThickness;
		private IfcPositiveLengthMeasure? _topFlangeFilletRadius;
		private IfcPositiveLengthMeasure? _centreOfGravityInY;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @TopFlangeWidth 
		{ 
			get 
			{
				if(Activated) return _topFlangeWidth;
				
				Model.Activate(this, true);
				Activated = true;
				return _topFlangeWidth;
			} 
			set
			{
				SetValue( v =>  _topFlangeWidth = v, _topFlangeWidth, value,  "TopFlangeWidth");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @TopFlangeThickness 
		{ 
			get 
			{
				if(Activated) return _topFlangeThickness;
				
				Model.Activate(this, true);
				Activated = true;
				return _topFlangeThickness;
			} 
			set
			{
				SetValue( v =>  _topFlangeThickness = v, _topFlangeThickness, value,  "TopFlangeThickness");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @TopFlangeFilletRadius 
		{ 
			get 
			{
				if(Activated) return _topFlangeFilletRadius;
				
				Model.Activate(this, true);
				Activated = true;
				return _topFlangeFilletRadius;
			} 
			set
			{
				SetValue( v =>  _topFlangeFilletRadius = v, _topFlangeFilletRadius, value,  "TopFlangeFilletRadius");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @CentreOfGravityInY 
		{ 
			get 
			{
				if(Activated) return _centreOfGravityInY;
				
				Model.Activate(this, true);
				Activated = true;
				return _centreOfGravityInY;
			} 
			set
			{
				SetValue( v =>  _centreOfGravityInY = v, _centreOfGravityInY, value,  "CentreOfGravityInY");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"ProfileType",
			"ProfileName",
			"Position",
			"OverallWidth",
			"OverallDepth",
			"WebThickness",
			"FlangeThickness",
			"FilletRadius",
			"TopFlangeWidth",
			"TopFlangeThickness",
			"TopFlangeFilletRadius",
			"CentreOfGravityInY",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @ProfileType;
				case 1: 
					return @ProfileName;
				case 2: 
					return @Position;
				case 3: 
					return @OverallWidth;
				case 4: 
					return @OverallDepth;
				case 5: 
					return @WebThickness;
				case 6: 
					return @FlangeThickness;
				case 7: 
					return @FilletRadius;
				case 8: 
					return @TopFlangeWidth;
				case 9: 
					return @TopFlangeThickness;
				case 10: 
					return @TopFlangeFilletRadius;
				case 11: 
					return @CentreOfGravityInY;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "ProfileType":  
					return @ProfileType;
				case "ProfileName":  
					return @ProfileName;
				case "Position":  
					return @Position;
				case "OverallWidth":  
					return @OverallWidth;
				case "OverallDepth":  
					return @OverallDepth;
				case "WebThickness":  
					return @WebThickness;
				case "FlangeThickness":  
					return @FlangeThickness;
				case "FilletRadius":  
					return @FilletRadius;
				case "TopFlangeWidth":  
					return @TopFlangeWidth;
				case "TopFlangeThickness":  
					return @TopFlangeThickness;
				case "TopFlangeFilletRadius":  
					return @TopFlangeFilletRadius;
				case "CentreOfGravityInY":  
					return @CentreOfGravityInY;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @ProfileType = (IfcProfileTypeEnum)value;
					 break;
				case 1:
					 @ProfileName = (IfcLabel?)value;
					 break;
				case 2:
					 @Position = (IfcAxis2Placement2D)value;
					 break;
				case 3:
					 if (value != null) @OverallWidth = (IfcPositiveLengthMeasure)value;
					 break;
				case 4:
					 if (value != null) @OverallDepth = (IfcPositiveLengthMeasure)value;
					 break;
				case 5:
					 if (value != null) @WebThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case 6:
					 if (value != null) @FlangeThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case 7:
					 @FilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case 8:
					 if (value != null) @TopFlangeWidth = (IfcPositiveLengthMeasure)value;
					 break;
				case 9:
					 @TopFlangeThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case 10:
					 @TopFlangeFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case 11:
					 @CentreOfGravityInY = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "ProfileType":
					 if (value != null) @ProfileType = (IfcProfileTypeEnum)value;
					 break;
				case "ProfileName":
					 @ProfileName = (IfcLabel?)value;
					 break;
				case "Position":
					 @Position = (IfcAxis2Placement2D)value;
					 break;
				case "OverallWidth":
					 if (value != null) @OverallWidth = (IfcPositiveLengthMeasure)value;
					 break;
				case "OverallDepth":
					 if (value != null) @OverallDepth = (IfcPositiveLengthMeasure)value;
					 break;
				case "WebThickness":
					 if (value != null) @WebThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case "FlangeThickness":
					 if (value != null) @FlangeThickness = (IfcPositiveLengthMeasure)value;
					 break;
				case "FilletRadius":
					 @FilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case "TopFlangeWidth":
					 if (value != null) @TopFlangeWidth = (IfcPositiveLengthMeasure)value;
					 break;
				case "TopFlangeThickness":
					 @TopFlangeThickness = (IfcPositiveLengthMeasure?)value;
					 break;
				case "TopFlangeFilletRadius":
					 @TopFlangeFilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case "CentreOfGravityInY":
					 @CentreOfGravityInY = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}