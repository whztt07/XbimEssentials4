// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:18
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.PresentationAppearanceResource;
using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.PresentationResource
{
	[EntityName("IFCCOLOURRGB", 27)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcColourRgb : IfcColourSpecification, IfcColourOrFactor, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcColourRgb(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcNormalisedRatioMeasure _red;
		private IfcNormalisedRatioMeasure _green;
		private IfcNormalisedRatioMeasure _blue;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcNormalisedRatioMeasure @Red 
		{ 
			get 
			{
				if(Activated) return _red;
				
				Model.Activate(this, true);
				Activated = true;
				return _red;
			} 
			set
			{
				SetValue( v =>  _red = v, _red, value,  "Red");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcNormalisedRatioMeasure @Green 
		{ 
			get 
			{
				if(Activated) return _green;
				
				Model.Activate(this, true);
				Activated = true;
				return _green;
			} 
			set
			{
				SetValue( v =>  _green = v, _green, value,  "Green");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcNormalisedRatioMeasure @Blue 
		{ 
			get 
			{
				if(Activated) return _blue;
				
				Model.Activate(this, true);
				Activated = true;
				return _blue;
			} 
			set
			{
				SetValue( v =>  _blue = v, _blue, value,  "Blue");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Name",
			"Red",
			"Green",
			"Blue",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Red;
				case 2: 
					return @Green;
				case 3: 
					return @Blue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Red":  
					return @Red;
				case "Green":  
					return @Green;
				case "Blue":  
					return @Blue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 if (value != null) @Red = (IfcNormalisedRatioMeasure)value;
					 break;
				case 2:
					 if (value != null) @Green = (IfcNormalisedRatioMeasure)value;
					 break;
				case 3:
					 if (value != null) @Blue = (IfcNormalisedRatioMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Red":
					 if (value != null) @Red = (IfcNormalisedRatioMeasure)value;
					 break;
				case "Green":
					 if (value != null) @Green = (IfcNormalisedRatioMeasure)value;
					 break;
				case "Blue":
					 if (value != null) @Blue = (IfcNormalisedRatioMeasure)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					_red = value.RealVal;
					return;
				case 2: 
					_green = value.RealVal;
					return;
				case 3: 
					_blue = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}