// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:23:01
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.PresentationAppearanceResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.PresentationResource
{
	[EntityName("IFCTEXTSTYLEFONTMODEL", 503)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcTextStyleFontModel : IfcPreDefinedTextFont, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTextStyleFontModel(IModel model) : base(model) 		{ 
			Model = model; 
			_fontFamily = new ItemSet<IfcTextFontName>( this );
		}

		#region Explicit attribute fields
		private ItemSet<IfcTextFontName> _fontFamily;
		private IfcFontStyle? _fontStyle;
		private IfcFontVariant? _fontVariant;
		private IfcFontWeight? _fontWeight;
		private IfcSizeSelect _fontSize;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public ItemSet<IfcTextFontName> @FontFamily 
		{ 
			get 
			{
				if(Activated) return _fontFamily;
				
				Model.Activate(this, true);
				Activated = true;
				return _fontFamily;
			} 
			set
			{
				SetValue( v =>  _fontFamily = v, _fontFamily, value,  "FontFamily");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcFontStyle? @FontStyle 
		{ 
			get 
			{
				if(Activated) return _fontStyle;
				
				Model.Activate(this, true);
				Activated = true;
				return _fontStyle;
			} 
			set
			{
				SetValue( v =>  _fontStyle = v, _fontStyle, value,  "FontStyle");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcFontVariant? @FontVariant 
		{ 
			get 
			{
				if(Activated) return _fontVariant;
				
				Model.Activate(this, true);
				Activated = true;
				return _fontVariant;
			} 
			set
			{
				SetValue( v =>  _fontVariant = v, _fontVariant, value,  "FontVariant");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcFontWeight? @FontWeight 
		{ 
			get 
			{
				if(Activated) return _fontWeight;
				
				Model.Activate(this, true);
				Activated = true;
				return _fontWeight;
			} 
			set
			{
				SetValue( v =>  _fontWeight = v, _fontWeight, value,  "FontWeight");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcSizeSelect @FontSize 
		{ 
			get 
			{
				if(Activated) return _fontSize;
				
				Model.Activate(this, true);
				Activated = true;
				return _fontSize;
			} 
			set
			{
				SetValue( v =>  _fontSize = v, _fontSize, value,  "FontSize");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Name",
			"FontFamily",
			"FontStyle",
			"FontVariant",
			"FontWeight",
			"FontSize",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @FontFamily;
				case 2: 
					return @FontStyle;
				case 3: 
					return @FontVariant;
				case 4: 
					return @FontWeight;
				case 5: 
					return @FontSize;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "FontFamily":  
					return @FontFamily;
				case "FontStyle":  
					return @FontStyle;
				case "FontVariant":  
					return @FontVariant;
				case "FontWeight":  
					return @FontWeight;
				case "FontSize":  
					return @FontSize;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case 1:
					 @FontFamily = (ItemSet<IfcTextFontName>)value;
					 break;
				case 2:
					 @FontStyle = (IfcFontStyle?)value;
					 break;
				case 3:
					 @FontVariant = (IfcFontVariant?)value;
					 break;
				case 4:
					 @FontWeight = (IfcFontWeight?)value;
					 break;
				case 5:
					 @FontSize = (IfcSizeSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case "FontFamily":
					 @FontFamily = (ItemSet<IfcTextFontName>)value;
					 break;
				case "FontStyle":
					 @FontStyle = (IfcFontStyle?)value;
					 break;
				case "FontVariant":
					 @FontVariant = (IfcFontVariant?)value;
					 break;
				case "FontWeight":
					 @FontWeight = (IfcFontWeight?)value;
					 break;
				case "FontSize":
					 @FontSize = (IfcSizeSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value); 
					return;
				case 1: 
					if (_fontFamily == null) _fontFamily = new ItemSet<IfcTextFontName>( this );
					_fontFamily.Add(value.StringVal);
					return;
				case 2: 
					_fontStyle = value.StringVal;
					return;
				case 3: 
					_fontVariant = value.StringVal;
					return;
				case 4: 
					_fontWeight = value.StringVal;
					return;
				case 5: 
					_fontSize = (IfcSizeSelect)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR31:             (SELF.FontSize > 0.);*/
		}
		#endregion

		
	}
}