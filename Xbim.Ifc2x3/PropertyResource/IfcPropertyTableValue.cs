// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:14
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.PropertyResource
{
	[EntityName("IFCPROPERTYTABLEVALUE", 408)]
	public  partial class @IfcPropertyTableValue : IfcSimpleProperty, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcPropertyTableValue(IModel model) : base(model) 		{ 
			Model = model; 
			_definingValues = new ItemSet<IfcValue>( model );
			_definedValues = new ItemSet<IfcValue>( model );
		}

		#region Explicit attribute fields
		private ItemSet<IfcValue> _definingValues;
		private ItemSet<IfcValue> _definedValues;
		private IfcText? _expression;
		private IfcUnit _definingUnit;
		private IfcUnit _definedUnit;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public ItemSet<IfcValue> @DefiningValues 
		{ 
			get 
			{
				if(Activated) return _definingValues;
				
				Model.Activate(this, true);
				Activated = true;
				return _definingValues;
			} 
			set
			{
				SetValue( v =>  _definingValues = v, _definingValues, value,  "DefiningValues");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public ItemSet<IfcValue> @DefinedValues 
		{ 
			get 
			{
				if(Activated) return _definedValues;
				
				Model.Activate(this, true);
				Activated = true;
				return _definedValues;
			} 
			set
			{
				SetValue( v =>  _definedValues = v, _definedValues, value,  "DefinedValues");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcText? @Expression 
		{ 
			get 
			{
				if(Activated) return _expression;
				
				Model.Activate(this, true);
				Activated = true;
				return _expression;
			} 
			set
			{
				SetValue( v =>  _expression = v, _expression, value,  "Expression");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcUnit @DefiningUnit 
		{ 
			get 
			{
				if(Activated) return _definingUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _definingUnit;
			} 
			set
			{
				SetValue( v =>  _definingUnit = v, _definingUnit, value,  "DefiningUnit");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcUnit @DefinedUnit 
		{ 
			get 
			{
				if(Activated) return _definedUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _definedUnit;
			} 
			set
			{
				SetValue( v =>  _definedUnit = v, _definedUnit, value,  "DefinedUnit");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"DefiningValues",
			"DefinedValues",
			"Expression",
			"DefiningUnit",
			"DefinedUnit",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @DefiningValues;
				case 3: 
					return @DefinedValues;
				case 4: 
					return @Expression;
				case 5: 
					return @DefiningUnit;
				case 6: 
					return @DefinedUnit;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "DefiningValues":  
					return @DefiningValues;
				case "DefinedValues":  
					return @DefinedValues;
				case "Expression":  
					return @Expression;
				case "DefiningUnit":  
					return @DefiningUnit;
				case "DefinedUnit":  
					return @DefinedUnit;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Name = (IfcIdentifier)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @DefiningValues.Add((IfcValue)value);
					 break;
				case 3:
					 @DefinedValues.Add((IfcValue)value);
					 break;
				case 4:
					 @Expression = (IfcText?)value;
					 break;
				case 5:
					 @DefiningUnit = (IfcUnit)value;
					 break;
				case 6:
					 @DefinedUnit = (IfcUnit)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 if (value != null) @Name = (IfcIdentifier)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "DefiningValues":
					 @DefiningValues.Add((IfcValue)value);
					 break;
				case "DefinedValues":
					 @DefinedValues.Add((IfcValue)value);
					 break;
				case "Expression":
					 @Expression = (IfcText?)value;
					 break;
				case "DefiningUnit":
					 @DefiningUnit = (IfcUnit)value;
					 break;
				case "DefinedUnit":
					 @DefinedUnit = (IfcUnit)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR1:	WR1 : SIZEOF(DefiningValues) = SIZEOF(DefinedValues);*/
		/*WR2:	WR2 : SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])))=0;*/
		/*WR3:	WR3 : SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])))=0;*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}