// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:43:55
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.PresentationDefinitionResource
{
	[EntityName("IFCANNOTATIONSURFACE", 731)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcAnnotationSurface : IfcGeometricRepresentationItem, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAnnotationSurface(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcGeometricRepresentationItem _item;
		private IfcTextureCoordinate _textureCoordinates;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(0, EntityAttributeState.Mandatory)]
		public IfcGeometricRepresentationItem @Item 
		{ 
			get 
			{
				if(Activated) return _item;
				
				Model.Activate(this, true);
				Activated = true;
				return _item;
			} 
			set
			{
				SetValue( v =>  _item = v, _item, value,  "Item");
			} 
		}
	
		[EntityAttributee(1, EntityAttributeState.Optional)]
		public IfcTextureCoordinate @TextureCoordinates 
		{ 
			get 
			{
				if(Activated) return _textureCoordinates;
				
				Model.Activate(this, true);
				Activated = true;
				return _textureCoordinates;
			} 
			set
			{
				SetValue( v =>  _textureCoordinates = v, _textureCoordinates, value,  "TextureCoordinates");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_item = (IfcGeometricRepresentationItem)(value.EntityVal);
					return;
				case 1: 
					_textureCoordinates = (IfcTextureCoordinate)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR01:               ) >= 1;*/
		}
		#endregion
	}
}