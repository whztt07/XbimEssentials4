// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:14
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc2x3.GeometryResource
{
	[EntityName("IFCRATIONALBEZIERCURVE", 424)]
	public  partial class @IfcRationalBezierCurve : IfcBezierCurve, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRationalBezierCurve(IModel model) : base(model) 		{ 
			Model = model; 
			_weightsData = new ItemSet<float>( model );
		}

		#region Explicit attribute fields
		private ItemSet<float> _weightsData;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public ItemSet<float> @WeightsData 
		{ 
			get 
			{
				if(Activated) return _weightsData;
				
				Model.Activate(this, true);
				Activated = true;
				return _weightsData;
			} 
			set
			{
				SetValue( v =>  _weightsData = v, _weightsData, value,  "WeightsData");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Degree",
			"ControlPointsList",
			"CurveForm",
			"ClosedCurve",
			"SelfIntersect",
			"WeightsData",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Degree;
				case 1: 
					return @ControlPointsList;
				case 2: 
					return @CurveForm;
				case 3: 
					return @ClosedCurve;
				case 4: 
					return @SelfIntersect;
				case 5: 
					return @WeightsData;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Degree":  
					return @Degree;
				case "ControlPointsList":  
					return @ControlPointsList;
				case "CurveForm":  
					return @CurveForm;
				case "ClosedCurve":  
					return @ClosedCurve;
				case "SelfIntersect":  
					return @SelfIntersect;
				case "WeightsData":  
					return @WeightsData;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Degree = (int)value;
					 break;
				case 1:
					 @ControlPointsList.Add((IfcCartesianPoint)value);
					 break;
				case 2:
					 if (value != null) @CurveForm = (IfcBSplineCurveForm)value;
					 break;
				case 3:
					 @ClosedCurve = (bool?)value;
					 break;
				case 4:
					 @SelfIntersect = (bool?)value;
					 break;
				case 5:
					 @WeightsData.Add((float)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Degree":
					 if (value != null) @Degree = (int)value;
					 break;
				case "ControlPointsList":
					 @ControlPointsList.Add((IfcCartesianPoint)value);
					 break;
				case "CurveForm":
					 if (value != null) @CurveForm = (IfcBSplineCurveForm)value;
					 break;
				case "ClosedCurve":
					 @ClosedCurve = (bool?)value;
					 break;
				case "SelfIntersect":
					 @SelfIntersect = (bool?)value;
					 break;
				case "WeightsData":
					 @WeightsData.Add((float)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR1:	WR1 : SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineCurve.ControlPointsList);*/
		/*WR2:	WR2 : IfcCurveWeightsPositive(SELF);*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}