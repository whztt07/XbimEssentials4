// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:22
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.GeometryResource
{
	[EntityName("IFCTRIMMEDCURVE", 143)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcTrimmedCurve : IfcBoundedCurve, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTrimmedCurve(IModel model) : base(model) 		{ 
			Model = model; 
			_trim1 = new ItemSet<IfcTrimmingSelect>( model );
			_trim2 = new ItemSet<IfcTrimmingSelect>( model );
		}

		#region Explicit attribute fields
		private IfcCurve _basisCurve;
		private ItemSet<IfcTrimmingSelect> _trim1;
		private ItemSet<IfcTrimmingSelect> _trim2;
		private bool _senseAgreement;
		private IfcTrimmingPreference _masterRepresentation;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcCurve @BasisCurve 
		{ 
			get 
			{
				if(Activated) return _basisCurve;
				
				Model.Activate(this, true);
				Activated = true;
				return _basisCurve;
			} 
			set
			{
				SetValue( v =>  _basisCurve = v, _basisCurve, value,  "BasisCurve");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public ItemSet<IfcTrimmingSelect> @Trim1 
		{ 
			get 
			{
				if(Activated) return _trim1;
				
				Model.Activate(this, true);
				Activated = true;
				return _trim1;
			} 
			set
			{
				SetValue( v =>  _trim1 = v, _trim1, value,  "Trim1");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public ItemSet<IfcTrimmingSelect> @Trim2 
		{ 
			get 
			{
				if(Activated) return _trim2;
				
				Model.Activate(this, true);
				Activated = true;
				return _trim2;
			} 
			set
			{
				SetValue( v =>  _trim2 = v, _trim2, value,  "Trim2");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public bool @SenseAgreement 
		{ 
			get 
			{
				if(Activated) return _senseAgreement;
				
				Model.Activate(this, true);
				Activated = true;
				return _senseAgreement;
			} 
			set
			{
				SetValue( v =>  _senseAgreement = v, _senseAgreement, value,  "SenseAgreement");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcTrimmingPreference @MasterRepresentation 
		{ 
			get 
			{
				if(Activated) return _masterRepresentation;
				
				Model.Activate(this, true);
				Activated = true;
				return _masterRepresentation;
			} 
			set
			{
				SetValue( v =>  _masterRepresentation = v, _masterRepresentation, value,  "MasterRepresentation");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"BasisCurve",
			"Trim1",
			"Trim2",
			"SenseAgreement",
			"MasterRepresentation",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @BasisCurve;
				case 1: 
					return @Trim1;
				case 2: 
					return @Trim2;
				case 3: 
					return @SenseAgreement;
				case 4: 
					return @MasterRepresentation;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "BasisCurve":  
					return @BasisCurve;
				case "Trim1":  
					return @Trim1;
				case "Trim2":  
					return @Trim2;
				case "SenseAgreement":  
					return @SenseAgreement;
				case "MasterRepresentation":  
					return @MasterRepresentation;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @BasisCurve = (IfcCurve)value;
					 break;
				case 1:
					 @Trim1.Add((IfcTrimmingSelect)value);
					 break;
				case 2:
					 @Trim2.Add((IfcTrimmingSelect)value);
					 break;
				case 3:
					 if (value != null) @SenseAgreement = (bool)value;
					 break;
				case 4:
					 if (value != null) @MasterRepresentation = (IfcTrimmingPreference)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "BasisCurve":
					 @BasisCurve = (IfcCurve)value;
					 break;
				case "Trim1":
					 @Trim1.Add((IfcTrimmingSelect)value);
					 break;
				case "Trim2":
					 @Trim2.Add((IfcTrimmingSelect)value);
					 break;
				case "SenseAgreement":
					 if (value != null) @SenseAgreement = (bool)value;
					 break;
				case "MasterRepresentation":
					 if (value != null) @MasterRepresentation = (IfcTrimmingPreference)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_basisCurve = (IfcCurve)(value.EntityVal);
					return;
				case 1: 
					if (_trim1 == null) _trim1 = new ItemSet<IfcTrimmingSelect>( Model );
					_trim1.Add((IfcTrimmingSelect)value.EntityVal);
					return;
				case 2: 
					if (_trim2 == null) _trim2 = new ItemSet<IfcTrimmingSelect>( Model );
					_trim2.Add((IfcTrimmingSelect)value.EntityVal);
					return;
				case 3: 
					_senseAgreement = value.BooleanVal;
					return;
				case 4: 
                    _masterRepresentation = (IfcTrimmingPreference) System.Enum.Parse(typeof (IfcTrimmingPreference), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR41:	WR41 : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));*/
		/*WR42:	WR42 : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));*/
		/*WR43:	WR43 : NOT('IFC2X3.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));*/
		}
		#endregion

		
	}
}