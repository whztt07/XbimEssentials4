// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:22:58
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.GeometryResource
{
	[EntityName("IFCCARTESIANTRANSFORMATIONOPERATOR2D", 145)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCartesianTransformationOperator2D(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		#endregion
	
		#region Explicit attribute properties
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Axis1",
			"Axis2",
			"LocalOrigin",
			"Scale",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Axis1;
				case 1: 
					return @Axis2;
				case 2: 
					return @LocalOrigin;
				case 3: 
					return @Scale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Axis1":  
					return @Axis1;
				case "Axis2":  
					return @Axis2;
				case "LocalOrigin":  
					return @LocalOrigin;
				case "Scale":  
					return @Scale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Axis1 = (IfcDirection)value;
					 break;
				case 1:
					 @Axis2 = (IfcDirection)value;
					 break;
				case 2:
					 @LocalOrigin = (IfcCartesianPoint)value;
					 break;
				case 3:
					 @Scale = (double?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Axis1":
					 @Axis1 = (IfcDirection)value;
					 break;
				case "Axis2":
					 @Axis2 = (IfcDirection)value;
					 break;
				case "LocalOrigin":
					 @LocalOrigin = (IfcCartesianPoint)value;
					 break;
				case "Scale":
					 @Scale = (double?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : SELF\IfcCartesianTransformationOperator.Dim = 2;*/
		/*WR2:            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);*/
		/*WR3:            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);*/
		}
		#endregion

		
	}
}