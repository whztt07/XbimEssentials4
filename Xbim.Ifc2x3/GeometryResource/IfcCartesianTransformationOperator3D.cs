// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.GeometryResource
{
	[ExpressType("IFCCARTESIANTRANSFORMATIONOPERATOR3D", 337)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator, IInstantiableEntity, System.Collections.Generic.IEqualityComparer<@IfcCartesianTransformationOperator3D>, System.IEquatable<@IfcCartesianTransformationOperator3D>
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCartesianTransformationOperator3D(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDirection _axis3;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcDirection @Axis3 
		{ 
			get 
			{
				if(Activated) return _axis3;
				
				Model.Activate(this, true);
				Activated = true;
				return _axis3;
			} 
			set
			{
				SetValue( v =>  _axis3 = v, _axis3, value,  "Axis3");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_axis3 = (IfcDirection)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : SELF\IfcCartesianTransformationOperator.Dim = 3;*/
		/*WR2:            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);*/
		/*WR3:            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);*/
		/*WR4:	WR4 : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);*/
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcCartesianTransformationOperator3D other)
	    {
	        return this == other;
	    }


        public static bool operator ==(@IfcCartesianTransformationOperator3D left, @IfcCartesianTransformationOperator3D right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcCartesianTransformationOperator3D left, @IfcCartesianTransformationOperator3D right)
        {
            return !(left == right);
        }


        public bool Equals(@IfcCartesianTransformationOperator3D x, @IfcCartesianTransformationOperator3D y)
        {
            return x == y;
        }

        public int GetHashCode(@IfcCartesianTransformationOperator3D obj)
        {
            return obj == null ? -1 : obj.GetHashCode();
        }
        #endregion
	}
}