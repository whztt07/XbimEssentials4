// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc2x3.GeometryResource
{
	[ExpressType("IFCCARTESIANTRANSFORMATIONOPERATOR", 146)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcCartesianTransformationOperator : IfcGeometricRepresentationItem, System.Collections.Generic.IEqualityComparer<@IfcCartesianTransformationOperator>, System.IEquatable<@IfcCartesianTransformationOperator>
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCartesianTransformationOperator(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDirection _axis1;
		private IfcDirection _axis2;
		private IfcCartesianPoint _localOrigin;
		private double? _scale;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcDirection @Axis1 
		{ 
			get 
			{
				if(Activated) return _axis1;
				
				Model.Activate(this, true);
				Activated = true;
				return _axis1;
			} 
			set
			{
				SetValue( v =>  _axis1 = v, _axis1, value,  "Axis1");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcDirection @Axis2 
		{ 
			get 
			{
				if(Activated) return _axis2;
				
				Model.Activate(this, true);
				Activated = true;
				return _axis2;
			} 
			set
			{
				SetValue( v =>  _axis2 = v, _axis2, value,  "Axis2");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcCartesianPoint @LocalOrigin 
		{ 
			get 
			{
				if(Activated) return _localOrigin;
				
				Model.Activate(this, true);
				Activated = true;
				return _localOrigin;
			} 
			set
			{
				SetValue( v =>  _localOrigin = v, _localOrigin, value,  "LocalOrigin");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public double? @Scale 
		{ 
			get 
			{
				if(Activated) return _scale;
				
				Model.Activate(this, true);
				Activated = true;
				return _scale;
			} 
			set
			{
				SetValue( v =>  _scale = v, _scale, value,  "Scale");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_axis1 = (IfcDirection)(value.EntityVal);
					return;
				case 1: 
					_axis2 = (IfcDirection)(value.EntityVal);
					return;
				case 2: 
					_localOrigin = (IfcCartesianPoint)(value.EntityVal);
					return;
				case 3: 
					_scale = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*WR1:	WR1 : Scl > 0.0;*/
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcCartesianTransformationOperator other)
	    {
	        return this == other;
	    }


        public static bool operator ==(@IfcCartesianTransformationOperator left, @IfcCartesianTransformationOperator right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcCartesianTransformationOperator left, @IfcCartesianTransformationOperator right)
        {
            return !(left == right);
        }


        public bool Equals(@IfcCartesianTransformationOperator x, @IfcCartesianTransformationOperator y)
        {
            return x == y;
        }

        public int GetHashCode(@IfcCartesianTransformationOperator obj)
        {
            return obj == null ? -1 : obj.GetHashCode();
        }
        #endregion
	}
}