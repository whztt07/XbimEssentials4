// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		23.09.2015 10:21:54
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.CobieExpress
{
	[IndexedClass]
	[ExpressType("SPACE", 20)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieSpace : CobieAsset, SpatialDivision, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieSpace(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private string _roomTag;
		private double? _usableHeight;
		private double? _grossArea;
		private double? _netArea;
		private CobieFloor _floor;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @RoomTag 
		{ 
			get 
			{
				if(Activated) return _roomTag;
				
				Model.Activate(this, true);
				Activated = true;
				return _roomTag;
			} 
			set
			{
				SetValue( v =>  _roomTag = v, _roomTag, value,  "RoomTag");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public double? @UsableHeight 
		{ 
			get 
			{
				if(Activated) return _usableHeight;
				
				Model.Activate(this, true);
				Activated = true;
				return _usableHeight;
			} 
			set
			{
				SetValue( v =>  _usableHeight = v, _usableHeight, value,  "UsableHeight");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public double? @GrossArea 
		{ 
			get 
			{
				if(Activated) return _grossArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _grossArea;
			} 
			set
			{
				SetValue( v =>  _grossArea = v, _grossArea, value,  "GrossArea");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public double? @NetArea 
		{ 
			get 
			{
				if(Activated) return _netArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _netArea;
			} 
			set
			{
				SetValue( v =>  _netArea = v, _netArea, value,  "NetArea");
			} 
		}
	
		[IndexedProperty]
		[EntityAttribute(15, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobieFloor @Floor 
		{ 
			get 
			{
				if(Activated) return _floor;
				
				Model.Activate(this, true);
				Activated = true;
				return _floor;
			} 
			set
			{
				SetValue( v =>  _floor = v, _floor, value,  "Floor");
			} 
		}
	
		#endregion

		#region Inverse attributes
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1)]
		public IEnumerable<CobieComponent> @Components 
		{ 
			get 
			{
				return Model.Instances.Where<CobieComponent>(e => e.Space == this);
			} 
		}
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1)]
		public IEnumerable<CobieZone> @Zones 
		{ 
			get 
			{
				return Model.Instances.Where<CobieZone>(e => e.Spaces != null &&  e.Spaces.Contains(this));
			} 
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
					base.Parse(propIndex, value); 
					return;
				case 10: 
					_roomTag = value.StringVal;
					return;
				case 11: 
					_usableHeight = value.RealVal;
					return;
				case 12: 
					_grossArea = value.RealVal;
					return;
				case 13: 
					_netArea = value.RealVal;
					return;
				case 14: 
					_floor = (CobieFloor)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}