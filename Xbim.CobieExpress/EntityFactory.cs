// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 10:12:23
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using Xbim.Common;

namespace Xbim.CobieExpress
{
	public sealed class EntityFactory : IEntityFactory
	{
		public T New<T>(IModel model, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			return (T)New(model, typeof(T), entityLabel, activated);
		}

		public T New<T>(IModel model, Action<T> init, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			var o = New<T>(model, entityLabel, activated);
			init(o);
			return o;
		}

		public IInstantiableEntity New(IModel model, Type t, int entityLabel, bool activated)
		{
			//check that the type is from this assembly
			if(t.Assembly != GetType().Assembly)
				throw new Exception("This factory only creates types from its assembly");

			return New(model, t.Name, entityLabel, activated);
		}

		public IInstantiableEntity New(IModel model, string typeName, int entityLabel, bool activated)
		{
			if (model == null || typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpper();
			switch(name)
			{
				case "COBIEPICKLIST": return new CobiePickList ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEPICKVALUE": return new CobiePickValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEPICKKEYVALUE": return new CobiePickKeyValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEPHASE": return new CobiePhase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEEXTERNALSYSTEM": return new CobieExternalSystem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIECREATEDINFO": return new CobieCreatedInfo ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIECONTACT": return new CobieContact ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEFACILITY": return new CobieFacility ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEPROJECT": return new CobieProject ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIESITE": return new CobieSite ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEFLOOR": return new CobieFloor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIESPACE": return new CobieSpace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEZONE": return new CobieZone ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIETYPE": return new CobieType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEWARRANTY": return new CobieWarranty ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIECOMPONENT": return new CobieComponent ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIESYSTEM": return new CobieSystem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIECONNECTION": return new CobieConnection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIESPARE": return new CobieSpare ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIERESOURCE": return new CobieResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEJOB": return new CobieJob ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEIMPACT": return new CobieImpact ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEDOCUMENT": return new CobieDocument ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEATTRIBUTE": return new CobieAttribute ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "COBIEISSUE": return new CobieIssue ( model ) { Activated = activated, EntityLabel = entityLabel };
				default:
					throw new Exception("Type must be non-abstract type of IInstantiableEntity");
			}
		}
	}
}
