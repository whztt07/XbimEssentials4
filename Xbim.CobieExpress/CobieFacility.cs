// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		22.09.2015 04:44:17
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.CobieExpress
{
	[IndexedClass]
	[ExpressType("FACILITY", 16)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieFacility : CobieAsset, SpatialDivision, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieFacility(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private CobiePickValue _linearUnits;
		private CobiePickValue _areaUnits;
		private CobiePickValue _volumeUnits;
		private CobiePickValue _currencyUnit;
		private string _areaMeasurement;
		private CobieProject _project;
		private CobieSite _site;
		private CobiePhase _phase;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(11, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @LinearUnits 
		{ 
			get 
			{
				if(Activated) return _linearUnits;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearUnits;
			} 
			set
			{
				SetValue( v =>  _linearUnits = v, _linearUnits, value,  "LinearUnits");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @AreaUnits 
		{ 
			get 
			{
				if(Activated) return _areaUnits;
				
				Model.Activate(this, true);
				Activated = true;
				return _areaUnits;
			} 
			set
			{
				SetValue( v =>  _areaUnits = v, _areaUnits, value,  "AreaUnits");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @VolumeUnits 
		{ 
			get 
			{
				if(Activated) return _volumeUnits;
				
				Model.Activate(this, true);
				Activated = true;
				return _volumeUnits;
			} 
			set
			{
				SetValue( v =>  _volumeUnits = v, _volumeUnits, value,  "VolumeUnits");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @CurrencyUnit 
		{ 
			get 
			{
				if(Activated) return _currencyUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _currencyUnit;
			} 
			set
			{
				SetValue( v =>  _currencyUnit = v, _currencyUnit, value,  "CurrencyUnit");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @AreaMeasurement 
		{ 
			get 
			{
				if(Activated) return _areaMeasurement;
				
				Model.Activate(this, true);
				Activated = true;
				return _areaMeasurement;
			} 
			set
			{
				SetValue( v =>  _areaMeasurement = v, _areaMeasurement, value,  "AreaMeasurement");
			} 
		}
	
		[IndexedProperty]
		[EntityAttribute(16, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobieProject @Project 
		{ 
			get 
			{
				if(Activated) return _project;
				
				Model.Activate(this, true);
				Activated = true;
				return _project;
			} 
			set
			{
				SetValue( v =>  _project = v, _project, value,  "Project");
			} 
		}
	
		[IndexedProperty]
		[EntityAttribute(17, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobieSite @Site 
		{ 
			get 
			{
				if(Activated) return _site;
				
				Model.Activate(this, true);
				Activated = true;
				return _site;
			} 
			set
			{
				SetValue( v =>  _site = v, _site, value,  "Site");
			} 
		}
	
		[EntityAttribute(18, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePhase @Phase 
		{ 
			get 
			{
				if(Activated) return _phase;
				
				Model.Activate(this, true);
				Activated = true;
				return _phase;
			} 
			set
			{
				SetValue( v =>  _phase = v, _phase, value,  "Phase");
			} 
		}
	
		#endregion

		#region Inverse attributes
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1)]
		public IEnumerable<CobieFloor> @Floors 
		{ 
			get 
			{
				return Model.Instances.Where<CobieFloor>(e => e.Facility == this);
			} 
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
					base.Parse(propIndex, value); 
					return;
				case 10: 
					_linearUnits = (CobiePickValue)(value.EntityVal);
					return;
				case 11: 
					_areaUnits = (CobiePickValue)(value.EntityVal);
					return;
				case 12: 
					_volumeUnits = (CobiePickValue)(value.EntityVal);
					return;
				case 13: 
					_currencyUnit = (CobiePickValue)(value.EntityVal);
					return;
				case 14: 
					_areaMeasurement = value.StringVal;
					return;
				case 15: 
					_project = (CobieProject)(value.EntityVal);
					return;
				case 16: 
					_site = (CobieSite)(value.EntityVal);
					return;
				case 17: 
					_phase = (CobiePhase)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}