// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:46
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.CobieExpress
{
	[EntityName("COMPONENT", 17)]
	public  partial class @CobieComponent : CobieAsset, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieComponent(IModel model) : base(model) 		{ 
			Model = model; 
			_assemblyOf = new ItemSet<CobieComponent>( model );
		}

		#region Explicit attribute fields
		private string _serialNumber;
		private DateTimeValue _installationDate;
		private DateTimeValue _warrantyStartDate;
		private string _tagNumber;
		private string _barCode;
		private string _assetIdentifier;
		private CobieType _type;
		private CobieSpace _space;
		private ItemSet<CobieComponent> _assemblyOf;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(11, EntityAttributeState.Mandatory)]
		public string @SerialNumber 
		{ 
			get 
			{
				if(Activated) return _serialNumber;
				
				Model.Activate(this, true);
				Activated = true;
				return _serialNumber;
			} 
			set
			{
				SetValue( v =>  _serialNumber = v, _serialNumber, value,  "SerialNumber");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Mandatory)]
		public DateTimeValue @InstallationDate 
		{ 
			get 
			{
				if(Activated) return _installationDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _installationDate;
			} 
			set
			{
				SetValue( v =>  _installationDate = v, _installationDate, value,  "InstallationDate");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Mandatory)]
		public DateTimeValue @WarrantyStartDate 
		{ 
			get 
			{
				if(Activated) return _warrantyStartDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _warrantyStartDate;
			} 
			set
			{
				SetValue( v =>  _warrantyStartDate = v, _warrantyStartDate, value,  "WarrantyStartDate");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional)]
		public string @TagNumber 
		{ 
			get 
			{
				if(Activated) return _tagNumber;
				
				Model.Activate(this, true);
				Activated = true;
				return _tagNumber;
			} 
			set
			{
				SetValue( v =>  _tagNumber = v, _tagNumber, value,  "TagNumber");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Optional)]
		public string @BarCode 
		{ 
			get 
			{
				if(Activated) return _barCode;
				
				Model.Activate(this, true);
				Activated = true;
				return _barCode;
			} 
			set
			{
				SetValue( v =>  _barCode = v, _barCode, value,  "BarCode");
			} 
		}
	
		[EntityAttribute(16, EntityAttributeState.Optional)]
		public string @AssetIdentifier 
		{ 
			get 
			{
				if(Activated) return _assetIdentifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _assetIdentifier;
			} 
			set
			{
				SetValue( v =>  _assetIdentifier = v, _assetIdentifier, value,  "AssetIdentifier");
			} 
		}
	
		[EntityAttribute(17, EntityAttributeState.Mandatory)]
		public CobieType @Type 
		{ 
			get 
			{
				if(Activated) return _type;
				
				Model.Activate(this, true);
				Activated = true;
				return _type;
			} 
			set
			{
				SetValue( v =>  _type = v, _type, value,  "Type");
			} 
		}
	
		[EntityAttribute(18, EntityAttributeState.Mandatory)]
		public CobieSpace @Space 
		{ 
			get 
			{
				if(Activated) return _space;
				
				Model.Activate(this, true);
				Activated = true;
				return _space;
			} 
			set
			{
				SetValue( v =>  _space = v, _space, value,  "Space");
			} 
		}
	
		[EntityAttribute(19, EntityAttributeState.Mandatory)]
		public ItemSet<CobieComponent> @AssemblyOf 
		{ 
			get 
			{
				if(Activated) return _assemblyOf;
				
				Model.Activate(this, true);
				Activated = true;
				return _assemblyOf;
			} 
			set
			{
				SetValue( v =>  _assemblyOf = v, _assemblyOf, value,  "AssemblyOf");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<CobieSystem> @Systems 
		{ 
			get 
			{
				return Model.Instances.Where<CobieSystem>(e => e.Components != null &&  e.Components.Contains(this));
			} 
		}
	
		public IEnumerable<CobieConnection> @ConnectedBefore 
		{ 
			get 
			{
				return Model.Instances.Where<CobieConnection>(e => e.ComponentA == this);
			} 
		}
	
		public IEnumerable<CobieConnection> @ConnectedAfter 
		{ 
			get 
			{
				return Model.Instances.Where<CobieConnection>(e => e.ComponentB == this);
			} 
		}
	
		public IEnumerable<CobieConnection> @Connecting 
		{ 
			get 
			{
				return Model.Instances.Where<CobieConnection>(e => e.RealizingComponent == this);
			} 
		}
	

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Created",
			"ExternalSystem",
			"ExternalObject",
			"ExternalId",
			"LocalId",
			"Name",
			"Description",
			"Category",
			"Impacts",
			"Documents",
			"Attributes",
			"SerialNumber",
			"InstallationDate",
			"WarrantyStartDate",
			"TagNumber",
			"BarCode",
			"AssetIdentifier",
			"Type",
			"Space",
			"AssemblyOf",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Created;
				case 1: 
					return @ExternalSystem;
				case 2: 
					return @ExternalObject;
				case 3: 
					return @ExternalId;
				case 4: 
					return @LocalId;
				case 5: 
					return @Name;
				case 6: 
					return @Description;
				case 7: 
					return @Category;
				case 8: 
					return @Impacts;
				case 9: 
					return @Documents;
				case 10: 
					return @Attributes;
				case 11: 
					return @SerialNumber;
				case 12: 
					return @InstallationDate;
				case 13: 
					return @WarrantyStartDate;
				case 14: 
					return @TagNumber;
				case 15: 
					return @BarCode;
				case 16: 
					return @AssetIdentifier;
				case 17: 
					return @Type;
				case 18: 
					return @Space;
				case 19: 
					return @AssemblyOf;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Created":  
					return @Created;
				case "ExternalSystem":  
					return @ExternalSystem;
				case "ExternalObject":  
					return @ExternalObject;
				case "ExternalId":  
					return @ExternalId;
				case "LocalId":  
					return @LocalId;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "Category":  
					return @Category;
				case "Impacts":  
					return @Impacts;
				case "Documents":  
					return @Documents;
				case "Attributes":  
					return @Attributes;
				case "SerialNumber":  
					return @SerialNumber;
				case "InstallationDate":  
					return @InstallationDate;
				case "WarrantyStartDate":  
					return @WarrantyStartDate;
				case "TagNumber":  
					return @TagNumber;
				case "BarCode":  
					return @BarCode;
				case "AssetIdentifier":  
					return @AssetIdentifier;
				case "Type":  
					return @Type;
				case "Space":  
					return @Space;
				case "AssemblyOf":  
					return @AssemblyOf;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Created = (CobieCreatedInfo)value;
					 break;
				case 1:
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case 2:
					 @ExternalObject = (string)value;
					 break;
				case 3:
					 @ExternalId = (string)value;
					 break;
				case 4:
					 if (value != null) @LocalId = (long)value;
					 break;
				case 5:
					 @Name = (string)value;
					 break;
				case 6:
					 @Description = (string)value;
					 break;
				case 7:
					 @Category.Add((CobiePickKeyValue)value);
					 break;
				case 8:
					 @Impacts.Add((CobieImpact)value);
					 break;
				case 9:
					 @Documents.Add((CobieDocument)value);
					 break;
				case 10:
					 @Attributes.Add((CobieAttribute)value);
					 break;
				case 11:
					 @SerialNumber = (string)value;
					 break;
				case 12:
					 if (value != null) @InstallationDate = (DateTimeValue)value;
					 break;
				case 13:
					 if (value != null) @WarrantyStartDate = (DateTimeValue)value;
					 break;
				case 14:
					 @TagNumber = (string)value;
					 break;
				case 15:
					 @BarCode = (string)value;
					 break;
				case 16:
					 @AssetIdentifier = (string)value;
					 break;
				case 17:
					 @Type = (CobieType)value;
					 break;
				case 18:
					 @Space = (CobieSpace)value;
					 break;
				case 19:
					 @AssemblyOf.Add((CobieComponent)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Created":
					 @Created = (CobieCreatedInfo)value;
					 break;
				case "ExternalSystem":
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case "ExternalObject":
					 @ExternalObject = (string)value;
					 break;
				case "ExternalId":
					 @ExternalId = (string)value;
					 break;
				case "LocalId":
					 if (value != null) @LocalId = (long)value;
					 break;
				case "Name":
					 @Name = (string)value;
					 break;
				case "Description":
					 @Description = (string)value;
					 break;
				case "Category":
					 @Category.Add((CobiePickKeyValue)value);
					 break;
				case "Impacts":
					 @Impacts.Add((CobieImpact)value);
					 break;
				case "Documents":
					 @Documents.Add((CobieDocument)value);
					 break;
				case "Attributes":
					 @Attributes.Add((CobieAttribute)value);
					 break;
				case "SerialNumber":
					 @SerialNumber = (string)value;
					 break;
				case "InstallationDate":
					 if (value != null) @InstallationDate = (DateTimeValue)value;
					 break;
				case "WarrantyStartDate":
					 if (value != null) @WarrantyStartDate = (DateTimeValue)value;
					 break;
				case "TagNumber":
					 @TagNumber = (string)value;
					 break;
				case "BarCode":
					 @BarCode = (string)value;
					 break;
				case "AssetIdentifier":
					 @AssetIdentifier = (string)value;
					 break;
				case "Type":
					 @Type = (CobieType)value;
					 break;
				case "Space":
					 @Space = (CobieSpace)value;
					 break;
				case "AssemblyOf":
					 @AssemblyOf.Add((CobieComponent)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}