// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		16.09.2015 04:23:02
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.CobieExpress
{
	[EntityName("IMPACT", 23)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieImpact : CobieExternalReference, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieImpact(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobiePickValue _impactType;
		private CobiePickValue _impactStage;
		private double _value;
		private CobiePickValue _impactUnit;
		private double _leadInTime;
		private double _duration;
		private double _leadOutTime;
		private CobiePickValue _timeUnit;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public string @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public string @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public CobiePickValue @ImpactType 
		{ 
			get 
			{
				if(Activated) return _impactType;
				
				Model.Activate(this, true);
				Activated = true;
				return _impactType;
			} 
			set
			{
				SetValue( v =>  _impactType = v, _impactType, value,  "ImpactType");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public CobiePickValue @ImpactStage 
		{ 
			get 
			{
				if(Activated) return _impactStage;
				
				Model.Activate(this, true);
				Activated = true;
				return _impactStage;
			} 
			set
			{
				SetValue( v =>  _impactStage = v, _impactStage, value,  "ImpactStage");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public double @Value 
		{ 
			get 
			{
				if(Activated) return _value;
				
				Model.Activate(this, true);
				Activated = true;
				return _value;
			} 
			set
			{
				SetValue( v =>  _value = v, _value, value,  "Value");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory)]
		public CobiePickValue @ImpactUnit 
		{ 
			get 
			{
				if(Activated) return _impactUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _impactUnit;
			} 
			set
			{
				SetValue( v =>  _impactUnit = v, _impactUnit, value,  "ImpactUnit");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Mandatory)]
		public double @LeadInTime 
		{ 
			get 
			{
				if(Activated) return _leadInTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _leadInTime;
			} 
			set
			{
				SetValue( v =>  _leadInTime = v, _leadInTime, value,  "LeadInTime");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Mandatory)]
		public double @Duration 
		{ 
			get 
			{
				if(Activated) return _duration;
				
				Model.Activate(this, true);
				Activated = true;
				return _duration;
			} 
			set
			{
				SetValue( v =>  _duration = v, _duration, value,  "Duration");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Mandatory)]
		public double @LeadOutTime 
		{ 
			get 
			{
				if(Activated) return _leadOutTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _leadOutTime;
			} 
			set
			{
				SetValue( v =>  _leadOutTime = v, _leadOutTime, value,  "LeadOutTime");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Mandatory)]
		public CobiePickValue @TimeUnit 
		{ 
			get 
			{
				if(Activated) return _timeUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _timeUnit;
			} 
			set
			{
				SetValue( v =>  _timeUnit = v, _timeUnit, value,  "TimeUnit");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
			"Created",
			"ExternalSystem",
			"ExternalObject",
			"ExternalId",
			"LocalId",
			"Name",
			"Description",
			"ImpactType",
			"ImpactStage",
			"Value",
			"ImpactUnit",
			"LeadInTime",
			"Duration",
			"LeadOutTime",
			"TimeUnit",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return AttributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Created;
				case 1: 
					return @ExternalSystem;
				case 2: 
					return @ExternalObject;
				case 3: 
					return @ExternalId;
				case 4: 
					return @LocalId;
				case 5: 
					return @Name;
				case 6: 
					return @Description;
				case 7: 
					return @ImpactType;
				case 8: 
					return @ImpactStage;
				case 9: 
					return @Value;
				case 10: 
					return @ImpactUnit;
				case 11: 
					return @LeadInTime;
				case 12: 
					return @Duration;
				case 13: 
					return @LeadOutTime;
				case 14: 
					return @TimeUnit;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Created":  
					return @Created;
				case "ExternalSystem":  
					return @ExternalSystem;
				case "ExternalObject":  
					return @ExternalObject;
				case "ExternalId":  
					return @ExternalId;
				case "LocalId":  
					return @LocalId;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ImpactType":  
					return @ImpactType;
				case "ImpactStage":  
					return @ImpactStage;
				case "Value":  
					return @Value;
				case "ImpactUnit":  
					return @ImpactUnit;
				case "LeadInTime":  
					return @LeadInTime;
				case "Duration":  
					return @Duration;
				case "LeadOutTime":  
					return @LeadOutTime;
				case "TimeUnit":  
					return @TimeUnit;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Created = (CobieCreatedInfo)value;
					 break;
				case 1:
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case 2:
					 @ExternalObject = (string)value;
					 break;
				case 3:
					 @ExternalId = (string)value;
					 break;
				case 4:
					 if (value != null) @LocalId = (long)value;
					 break;
				case 5:
					 @Name = (string)value;
					 break;
				case 6:
					 @Description = (string)value;
					 break;
				case 7:
					 @ImpactType = (CobiePickValue)value;
					 break;
				case 8:
					 @ImpactStage = (CobiePickValue)value;
					 break;
				case 9:
					 if (value != null) @Value = (double)value;
					 break;
				case 10:
					 @ImpactUnit = (CobiePickValue)value;
					 break;
				case 11:
					 if (value != null) @LeadInTime = (double)value;
					 break;
				case 12:
					 if (value != null) @Duration = (double)value;
					 break;
				case 13:
					 if (value != null) @LeadOutTime = (double)value;
					 break;
				case 14:
					 @TimeUnit = (CobiePickValue)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Created":
					 @Created = (CobieCreatedInfo)value;
					 break;
				case "ExternalSystem":
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case "ExternalObject":
					 @ExternalObject = (string)value;
					 break;
				case "ExternalId":
					 @ExternalId = (string)value;
					 break;
				case "LocalId":
					 if (value != null) @LocalId = (long)value;
					 break;
				case "Name":
					 @Name = (string)value;
					 break;
				case "Description":
					 @Description = (string)value;
					 break;
				case "ImpactType":
					 @ImpactType = (CobiePickValue)value;
					 break;
				case "ImpactStage":
					 @ImpactStage = (CobiePickValue)value;
					 break;
				case "Value":
					 if (value != null) @Value = (double)value;
					 break;
				case "ImpactUnit":
					 @ImpactUnit = (CobiePickValue)value;
					 break;
				case "LeadInTime":
					 if (value != null) @LeadInTime = (double)value;
					 break;
				case "Duration":
					 if (value != null) @Duration = (double)value;
					 break;
				case "LeadOutTime":
					 if (value != null) @LeadOutTime = (double)value;
					 break;
				case "TimeUnit":
					 @TimeUnit = (CobiePickValue)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value); 
					return;
				case 5: 
					_name = value.StringVal;
					return;
				case 6: 
					_description = value.StringVal;
					return;
				case 7: 
					_impactType = (CobiePickValue)(value.EntityVal);
					return;
				case 8: 
					_impactStage = (CobiePickValue)(value.EntityVal);
					return;
				case 9: 
					_value = value.RealVal;
					return;
				case 10: 
					_impactUnit = (CobiePickValue)(value.EntityVal);
					return;
				case 11: 
					_leadInTime = value.RealVal;
					return;
				case 12: 
					_duration = value.RealVal;
					return;
				case 13: 
					_leadOutTime = value.RealVal;
					return;
				case 14: 
					_timeUnit = (CobiePickValue)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		
	}
}