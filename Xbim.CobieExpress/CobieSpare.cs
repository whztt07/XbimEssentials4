// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		22.09.2015 04:44:17
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.CobieExpress
{
	[IndexedClass]
	[ExpressType("SPARE", 27)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieSpare : CobieReferencedObject, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieSpare(IModel model) : base(model) 		{ 
			Model = model; 
			_suppliers = new ItemSet<CobieContact>( this );
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobiePickValue _spareType;
		private CobieType _type;
		private ItemSet<CobieContact> _suppliers;
		private string _setNumber;
		private string _partNumber;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @SpareType 
		{ 
			get 
			{
				if(Activated) return _spareType;
				
				Model.Activate(this, true);
				Activated = true;
				return _spareType;
			} 
			set
			{
				SetValue( v =>  _spareType = v, _spareType, value,  "SpareType");
			} 
		}
	
		[IndexedProperty]
		[EntityAttribute(8, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobieType @Type 
		{ 
			get 
			{
				if(Activated) return _type;
				
				Model.Activate(this, true);
				Activated = true;
				return _type;
			} 
			set
			{
				SetValue( v =>  _type = v, _type, value,  "Type");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory, EntityAttributeType.List, EntityAttributeType.Class, 0, -1)]
		public ItemSet<CobieContact> @Suppliers 
		{ 
			get 
			{
				if(Activated) return _suppliers;
				
				Model.Activate(this, true);
				Activated = true;
				return _suppliers;
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @SetNumber 
		{ 
			get 
			{
				if(Activated) return _setNumber;
				
				Model.Activate(this, true);
				Activated = true;
				return _setNumber;
			} 
			set
			{
				SetValue( v =>  _setNumber = v, _setNumber, value,  "SetNumber");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @PartNumber 
		{ 
			get 
			{
				if(Activated) return _partNumber;
				
				Model.Activate(this, true);
				Activated = true;
				return _partNumber;
			} 
			set
			{
				SetValue( v =>  _partNumber = v, _partNumber, value,  "PartNumber");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_name = value.StringVal;
					return;
				case 5: 
					_description = value.StringVal;
					return;
				case 6: 
					_spareType = (CobiePickValue)(value.EntityVal);
					return;
				case 7: 
					_type = (CobieType)(value.EntityVal);
					return;
				case 8: 
					if (_suppliers == null) _suppliers = new ItemSet<CobieContact>( this );
					_suppliers.InternalAdd((CobieContact)value.EntityVal);
					return;
				case 9: 
					_setNumber = value.StringVal;
					return;
				case 10: 
					_partNumber = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}