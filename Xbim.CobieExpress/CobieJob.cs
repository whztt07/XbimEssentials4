// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:04:21
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.CobieExpress
{
	[EntityName("JOB", 22)]
	public  partial class @CobieJob : CobieExternalReference, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieJob(IModel model) : base(model) 		{ 
			Model = model; 
			_resources = new ItemSet<CobieResource>( model );
		}

		#region Explicit attribute fields
		private string _taskNumber;
		private string _name;
		private string _description;
		private CobiePickValue _jobType;
		private CobiePickValue _jobStatusType;
		private double _duration;
		private CobiePickValue _durationUnit;
		private double _start;
		private CobiePickValue _startUnit;
		private double _frequency;
		private CobiePickValue _frequencyUnit;
		private CobieJob _priors;
		private ItemSet<CobieResource> _resources;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public string @TaskNumber 
		{ 
			get 
			{
				if(Activated) return _taskNumber;
				
				Model.Activate(this, true);
				Activated = true;
				return _taskNumber;
			} 
			set
			{
				SetValue( v =>  _taskNumber = v, _taskNumber, value,  "TaskNumber");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public string @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public string @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public CobiePickValue @JobType 
		{ 
			get 
			{
				if(Activated) return _jobType;
				
				Model.Activate(this, true);
				Activated = true;
				return _jobType;
			} 
			set
			{
				SetValue( v =>  _jobType = v, _jobType, value,  "JobType");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public CobiePickValue @JobStatusType 
		{ 
			get 
			{
				if(Activated) return _jobStatusType;
				
				Model.Activate(this, true);
				Activated = true;
				return _jobStatusType;
			} 
			set
			{
				SetValue( v =>  _jobStatusType = v, _jobStatusType, value,  "JobStatusType");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory)]
		public double @Duration 
		{ 
			get 
			{
				if(Activated) return _duration;
				
				Model.Activate(this, true);
				Activated = true;
				return _duration;
			} 
			set
			{
				SetValue( v =>  _duration = v, _duration, value,  "Duration");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Mandatory)]
		public CobiePickValue @DurationUnit 
		{ 
			get 
			{
				if(Activated) return _durationUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _durationUnit;
			} 
			set
			{
				SetValue( v =>  _durationUnit = v, _durationUnit, value,  "DurationUnit");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Mandatory)]
		public double @Start 
		{ 
			get 
			{
				if(Activated) return _start;
				
				Model.Activate(this, true);
				Activated = true;
				return _start;
			} 
			set
			{
				SetValue( v =>  _start = v, _start, value,  "Start");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Mandatory)]
		public CobiePickValue @StartUnit 
		{ 
			get 
			{
				if(Activated) return _startUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _startUnit;
			} 
			set
			{
				SetValue( v =>  _startUnit = v, _startUnit, value,  "StartUnit");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Mandatory)]
		public double @Frequency 
		{ 
			get 
			{
				if(Activated) return _frequency;
				
				Model.Activate(this, true);
				Activated = true;
				return _frequency;
			} 
			set
			{
				SetValue( v =>  _frequency = v, _frequency, value,  "Frequency");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Mandatory)]
		public CobiePickValue @FrequencyUnit 
		{ 
			get 
			{
				if(Activated) return _frequencyUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _frequencyUnit;
			} 
			set
			{
				SetValue( v =>  _frequencyUnit = v, _frequencyUnit, value,  "FrequencyUnit");
			} 
		}
	
		[EntityAttribute(16, EntityAttributeState.Mandatory)]
		public CobieJob @Priors 
		{ 
			get 
			{
				if(Activated) return _priors;
				
				Model.Activate(this, true);
				Activated = true;
				return _priors;
			} 
			set
			{
				SetValue( v =>  _priors = v, _priors, value,  "Priors");
			} 
		}
	
		[EntityAttribute(17, EntityAttributeState.Mandatory)]
		public ItemSet<CobieResource> @Resources 
		{ 
			get 
			{
				if(Activated) return _resources;
				
				Model.Activate(this, true);
				Activated = true;
				return _resources;
			} 
			set
			{
				SetValue( v =>  _resources = v, _resources, value,  "Resources");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<CobieType> @ForTypes 
		{ 
			get 
			{
				return Model.Instances.Where<CobieType>(e => e.Jobs != null &&  e.Jobs.Contains(this));
			} 
		}
	

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Created",
			"ExternalSystem",
			"ExternalObject",
			"ExternalId",
			"LocalId",
			"TaskNumber",
			"Name",
			"Description",
			"JobType",
			"JobStatusType",
			"Duration",
			"DurationUnit",
			"Start",
			"StartUnit",
			"Frequency",
			"FrequencyUnit",
			"Priors",
			"Resources",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Created;
				case 1: 
					return @ExternalSystem;
				case 2: 
					return @ExternalObject;
				case 3: 
					return @ExternalId;
				case 4: 
					return @LocalId;
				case 5: 
					return @TaskNumber;
				case 6: 
					return @Name;
				case 7: 
					return @Description;
				case 8: 
					return @JobType;
				case 9: 
					return @JobStatusType;
				case 10: 
					return @Duration;
				case 11: 
					return @DurationUnit;
				case 12: 
					return @Start;
				case 13: 
					return @StartUnit;
				case 14: 
					return @Frequency;
				case 15: 
					return @FrequencyUnit;
				case 16: 
					return @Priors;
				case 17: 
					return @Resources;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Created":  
					return @Created;
				case "ExternalSystem":  
					return @ExternalSystem;
				case "ExternalObject":  
					return @ExternalObject;
				case "ExternalId":  
					return @ExternalId;
				case "LocalId":  
					return @LocalId;
				case "TaskNumber":  
					return @TaskNumber;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "JobType":  
					return @JobType;
				case "JobStatusType":  
					return @JobStatusType;
				case "Duration":  
					return @Duration;
				case "DurationUnit":  
					return @DurationUnit;
				case "Start":  
					return @Start;
				case "StartUnit":  
					return @StartUnit;
				case "Frequency":  
					return @Frequency;
				case "FrequencyUnit":  
					return @FrequencyUnit;
				case "Priors":  
					return @Priors;
				case "Resources":  
					return @Resources;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Created = (CobieCreatedInfo)value;
					 break;
				case 1:
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case 2:
					 @ExternalObject = (string)value;
					 break;
				case 3:
					 @ExternalId = (string)value;
					 break;
				case 4:
					 if (value != null) @LocalId = (long)value;
					 break;
				case 5:
					 @TaskNumber = (string)value;
					 break;
				case 6:
					 @Name = (string)value;
					 break;
				case 7:
					 @Description = (string)value;
					 break;
				case 8:
					 @JobType = (CobiePickValue)value;
					 break;
				case 9:
					 @JobStatusType = (CobiePickValue)value;
					 break;
				case 10:
					 if (value != null) @Duration = (double)value;
					 break;
				case 11:
					 @DurationUnit = (CobiePickValue)value;
					 break;
				case 12:
					 if (value != null) @Start = (double)value;
					 break;
				case 13:
					 @StartUnit = (CobiePickValue)value;
					 break;
				case 14:
					 if (value != null) @Frequency = (double)value;
					 break;
				case 15:
					 @FrequencyUnit = (CobiePickValue)value;
					 break;
				case 16:
					 @Priors = (CobieJob)value;
					 break;
				case 17:
					 @Resources.Add((CobieResource)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Created":
					 @Created = (CobieCreatedInfo)value;
					 break;
				case "ExternalSystem":
					 @ExternalSystem = (CobieExternalSystem)value;
					 break;
				case "ExternalObject":
					 @ExternalObject = (string)value;
					 break;
				case "ExternalId":
					 @ExternalId = (string)value;
					 break;
				case "LocalId":
					 if (value != null) @LocalId = (long)value;
					 break;
				case "TaskNumber":
					 @TaskNumber = (string)value;
					 break;
				case "Name":
					 @Name = (string)value;
					 break;
				case "Description":
					 @Description = (string)value;
					 break;
				case "JobType":
					 @JobType = (CobiePickValue)value;
					 break;
				case "JobStatusType":
					 @JobStatusType = (CobiePickValue)value;
					 break;
				case "Duration":
					 if (value != null) @Duration = (double)value;
					 break;
				case "DurationUnit":
					 @DurationUnit = (CobiePickValue)value;
					 break;
				case "Start":
					 if (value != null) @Start = (double)value;
					 break;
				case "StartUnit":
					 @StartUnit = (CobiePickValue)value;
					 break;
				case "Frequency":
					 if (value != null) @Frequency = (double)value;
					 break;
				case "FrequencyUnit":
					 @FrequencyUnit = (CobiePickValue)value;
					 break;
				case "Priors":
					 @Priors = (CobieJob)value;
					 break;
				case "Resources":
					 @Resources.Add((CobieResource)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}