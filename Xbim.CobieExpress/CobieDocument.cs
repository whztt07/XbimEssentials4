// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.CobieExpress
{
	[IndexedClass]
	[ExpressType("DOCUMENT", 31)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieDocument : CobieReferencedObject, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieDocument(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobiePickValue _documentType;
		private CobiePickValue _approvalBy;
		private CobiePickValue _stage;
		private string _uRL;
		private string _reference;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @DocumentType 
		{ 
			get 
			{
				if(Activated) return _documentType;
				
				Model.Activate(this, true);
				Activated = true;
				return _documentType;
			} 
			set
			{
				SetValue( v =>  _documentType = v, _documentType, value,  "DocumentType");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @ApprovalBy 
		{ 
			get 
			{
				if(Activated) return _approvalBy;
				
				Model.Activate(this, true);
				Activated = true;
				return _approvalBy;
			} 
			set
			{
				SetValue( v =>  _approvalBy = v, _approvalBy, value,  "ApprovalBy");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public CobiePickValue @Stage 
		{ 
			get 
			{
				if(Activated) return _stage;
				
				Model.Activate(this, true);
				Activated = true;
				return _stage;
			} 
			set
			{
				SetValue( v =>  _stage = v, _stage, value,  "Stage");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @URL 
		{ 
			get 
			{
				if(Activated) return _uRL;
				
				Model.Activate(this, true);
				Activated = true;
				return _uRL;
			} 
			set
			{
				SetValue( v =>  _uRL = v, _uRL, value,  "URL");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public string @Reference 
		{ 
			get 
			{
				if(Activated) return _reference;
				
				Model.Activate(this, true);
				Activated = true;
				return _reference;
			} 
			set
			{
				SetValue( v =>  _reference = v, _reference, value,  "Reference");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_name = value.StringVal;
					return;
				case 5: 
					_description = value.StringVal;
					return;
				case 6: 
					_documentType = (CobiePickValue)(value.EntityVal);
					return;
				case 7: 
					_approvalBy = (CobiePickValue)(value.EntityVal);
					return;
				case 8: 
					_stage = (CobiePickValue)(value.EntityVal);
					return;
				case 9: 
					_uRL = value.StringVal;
					return;
				case 10: 
					_reference = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}