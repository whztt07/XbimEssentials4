// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:46
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.CobieExpress
{
	[EntityName("ASSET", 8)]
	public abstract partial class @CobieAsset : CobieExternalReference
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieAsset(IModel model) : base(model) 		{ 
			Model = model; 
			_category = new ItemSet<CobiePickKeyValue>( model );
			_impacts = new ItemSet<CobieImpact>( model );
			_documents = new ItemSet<CobieDocument>( model );
			_attributes = new ItemSet<CobieAttribute>( model );
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private ItemSet<CobiePickKeyValue> _category;
		private ItemSet<CobieImpact> _impacts;
		private ItemSet<CobieDocument> _documents;
		private ItemSet<CobieAttribute> _attributes;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public string @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public string @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public ItemSet<CobiePickKeyValue> @Category 
		{ 
			get 
			{
				if(Activated) return _category;
				
				Model.Activate(this, true);
				Activated = true;
				return _category;
			} 
			set
			{
				SetValue( v =>  _category = v, _category, value,  "Category");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public ItemSet<CobieImpact> @Impacts 
		{ 
			get 
			{
				if(Activated) return _impacts;
				
				Model.Activate(this, true);
				Activated = true;
				return _impacts;
			} 
			set
			{
				SetValue( v =>  _impacts = v, _impacts, value,  "Impacts");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public ItemSet<CobieDocument> @Documents 
		{ 
			get 
			{
				if(Activated) return _documents;
				
				Model.Activate(this, true);
				Activated = true;
				return _documents;
			} 
			set
			{
				SetValue( v =>  _documents = v, _documents, value,  "Documents");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory)]
		public ItemSet<CobieAttribute> @Attributes 
		{ 
			get 
			{
				if(Activated) return _attributes;
				
				Model.Activate(this, true);
				Activated = true;
				return _attributes;
			} 
			set
			{
				SetValue( v =>  _attributes = v, _attributes, value,  "Attributes");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<CobieIssue> @CausingIssues 
		{ 
			get 
			{
				return Model.Instances.Where<CobieIssue>(e => e.Causing == this);
			} 
		}
	
		public IEnumerable<CobieIssue> @AffectedBy 
		{ 
			get 
			{
				return Model.Instances.Where<CobieIssue>(e => e.Affected == this);
			} 
		}
	

		#endregion


		#region IPersist implementation
		#endregion

		public virtual override string WhereRule() 
		{
			return "";
		}
	}
}