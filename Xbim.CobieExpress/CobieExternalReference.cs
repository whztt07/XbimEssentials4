// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:44
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.ComponentModel;
using System;
using Xbim.Common;

namespace Xbim.CobieExpress
{
	[EntityName("EXTERNALREFERENCE")]
	public abstract partial class @CobieExternalReference : IPersistEntity, INotifyPropertyChanged
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; set;}
		public IModel Model { get; internal set; }

		protected bool IsActivated = false;

		public bool Activated { get { return IsActivated; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieExternalReference(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private CobieCreatedInfo _created;
		private CobieExternalSystem _externalSystem;
		private string _externalObject;
		private string _externalId;
		private int _localId;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public CobieCreatedInfo @Created 
		{ 
			get 
			{
				if(IsActivated) return _created;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _created;
			} 
			set
			{
				SetValue( v =>  _created = v, _created, value,  "Created");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public CobieExternalSystem @ExternalSystem 
		{ 
			get 
			{
				if(IsActivated) return _externalSystem;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _externalSystem;
			} 
			set
			{
				SetValue( v =>  _externalSystem = v, _externalSystem, value,  "ExternalSystem");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public string @ExternalObject 
		{ 
			get 
			{
				if(IsActivated) return _externalObject;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _externalObject;
			} 
			set
			{
				SetValue( v =>  _externalObject = v, _externalObject, value,  "ExternalObject");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public string @ExternalId 
		{ 
			get 
			{
				if(IsActivated) return _externalId;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _externalId;
			} 
			set
			{
				SetValue( v =>  _externalId = v, _externalId, value,  "ExternalId");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public int @LocalId 
		{ 
			get 
			{
				if(IsActivated) return _localId;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _localId;
			} 
			set
			{
				SetValue( v =>  _localId = v, _localId, value,  "LocalId");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion


		#region IPersist implementation
		#endregion

	}
}