// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:37
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.Kernel;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ExternalReferenceResource
{
	[EntityName("IFCCLASSIFICATIONREFERENCE", 95)]
	public  partial class @IfcClassificationReference : IfcExternalReference, IfcClassificationReferenceSelect, IfcClassificationSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcClassificationReference(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcClassificationReferenceSelect _referencedSource;
		private IfcText? _description;
		private IfcIdentifier? _sort;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcClassificationReferenceSelect @ReferencedSource 
		{ 
			get 
			{
				if(Activated) return _referencedSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _referencedSource;
			} 
			set
			{
				SetValue( v =>  _referencedSource = v, _referencedSource, value,  "ReferencedSource");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcIdentifier? @Sort 
		{ 
			get 
			{
				if(Activated) return _sort;
				
				Model.Activate(this, true);
				Activated = true;
				return _sort;
			} 
			set
			{
				SetValue( v =>  _sort = v, _sort, value,  "Sort");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcRelAssociatesClassification> @ClassificationRefForObjects 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelAssociatesClassification>(e => e.RelatingClassification == this);
			} 
		}
	
		public IEnumerable<IfcClassificationReference> @HasReferences 
		{ 
			get 
			{
				return Model.Instances.Where<IfcClassificationReference>(e => e.ReferencedSource == this);
			} 
		}
	

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Location",
			"Identification",
			"Name",
			"ReferencedSource",
			"Description",
			"Sort",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Location;
				case 1: 
					return @Identification;
				case 2: 
					return @Name;
				case 3: 
					return @ReferencedSource;
				case 4: 
					return @Description;
				case 5: 
					return @Sort;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Location":  
					return @Location;
				case "Identification":  
					return @Identification;
				case "Name":  
					return @Name;
				case "ReferencedSource":  
					return @ReferencedSource;
				case "Description":  
					return @Description;
				case "Sort":  
					return @Sort;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Location = (IfcURIReference?)value;
					 break;
				case 1:
					 @Identification = (IfcIdentifier?)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @ReferencedSource = (IfcClassificationReferenceSelect)value;
					 break;
				case 4:
					 @Description = (IfcText?)value;
					 break;
				case 5:
					 @Sort = (IfcIdentifier?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Location":
					 @Location = (IfcURIReference?)value;
					 break;
				case "Identification":
					 @Identification = (IfcIdentifier?)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "ReferencedSource":
					 @ReferencedSource = (IfcClassificationReferenceSelect)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "Sort":
					 @Sort = (IfcIdentifier?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}