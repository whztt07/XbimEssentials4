// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.ActorResource;
using Xbim.Ifc4.DateTimeResource;
using Xbim.Ifc4.Kernel;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ExternalReferenceResource
{
	[EntityName("IFCLIBRARYINFORMATION", 332)]
	public  partial class @IfcLibraryInformation : IfcExternalInformation, IfcLibrarySelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLibraryInformation(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLabel _name;
		private IfcLabel? _version;
		private IfcActorSelect _publisher;
		private IfcDateTime? _versionDate;
		private IfcURIReference? _location;
		private IfcText? _description;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcLabel @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcLabel? @Version 
		{ 
			get 
			{
				if(Activated) return _version;
				
				Model.Activate(this, true);
				Activated = true;
				return _version;
			} 
			set
			{
				SetValue( v =>  _version = v, _version, value,  "Version");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcActorSelect @Publisher 
		{ 
			get 
			{
				if(Activated) return _publisher;
				
				Model.Activate(this, true);
				Activated = true;
				return _publisher;
			} 
			set
			{
				SetValue( v =>  _publisher = v, _publisher, value,  "Publisher");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcDateTime? @VersionDate 
		{ 
			get 
			{
				if(Activated) return _versionDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _versionDate;
			} 
			set
			{
				SetValue( v =>  _versionDate = v, _versionDate, value,  "VersionDate");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcURIReference? @Location 
		{ 
			get 
			{
				if(Activated) return _location;
				
				Model.Activate(this, true);
				Activated = true;
				return _location;
			} 
			set
			{
				SetValue( v =>  _location = v, _location, value,  "Location");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcRelAssociatesLibrary> @LibraryInfoForObjects 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelAssociatesLibrary>(e => e.RelatingLibrary == this);
			} 
		}
	
		public IEnumerable<IfcLibraryReference> @HasLibraryReferences 
		{ 
			get 
			{
				return Model.Instances.Where<IfcLibraryReference>(e => e.ReferencedLibrary == this);
			} 
		}
	

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Version",
			"Publisher",
			"VersionDate",
			"Location",
			"Description",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Version;
				case 2: 
					return @Publisher;
				case 3: 
					return @VersionDate;
				case 4: 
					return @Location;
				case 5: 
					return @Description;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Version":  
					return @Version;
				case "Publisher":  
					return @Publisher;
				case "VersionDate":  
					return @VersionDate;
				case "Location":  
					return @Location;
				case "Description":  
					return @Description;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case 1:
					 @Version = (IfcLabel?)value;
					 break;
				case 2:
					 @Publisher = (IfcActorSelect)value;
					 break;
				case 3:
					 @VersionDate = (IfcDateTime?)value;
					 break;
				case 4:
					 @Location = (IfcURIReference?)value;
					 break;
				case 5:
					 @Description = (IfcText?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case "Version":
					 @Version = (IfcLabel?)value;
					 break;
				case "Publisher":
					 @Publisher = (IfcActorSelect)value;
					 break;
				case "VersionDate":
					 @VersionDate = (IfcDateTime?)value;
					 break;
				case "Location":
					 @Location = (IfcURIReference?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}