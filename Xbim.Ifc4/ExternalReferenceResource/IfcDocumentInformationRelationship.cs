// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:21
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ExternalReferenceResource
{
	[EntityName("IFCDOCUMENTINFORMATIONRELATIONSHIP", 188)]
	public  partial class @IfcDocumentInformationRelationship : IfcResourceLevelRelationship, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcDocumentInformationRelationship(IModel model) : base(model) 		{ 
			Model = model; 
			_relatedDocuments = new ItemSet<IfcDocumentInformation>( model );
		}

		#region Explicit attribute fields
		private IfcDocumentInformation _relatingDocument;
		private ItemSet<IfcDocumentInformation> _relatedDocuments;
		private IfcLabel? _relationshipType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcDocumentInformation @RelatingDocument 
		{ 
			get 
			{
				if(Activated) return _relatingDocument;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingDocument;
			} 
			set
			{
				SetValue( v =>  _relatingDocument = v, _relatingDocument, value,  "RelatingDocument");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public ItemSet<IfcDocumentInformation> @RelatedDocuments 
		{ 
			get 
			{
				if(Activated) return _relatedDocuments;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedDocuments;
			} 
			set
			{
				SetValue( v =>  _relatedDocuments = v, _relatedDocuments, value,  "RelatedDocuments");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcLabel? @RelationshipType 
		{ 
			get 
			{
				if(Activated) return _relationshipType;
				
				Model.Activate(this, true);
				Activated = true;
				return _relationshipType;
			} 
			set
			{
				SetValue( v =>  _relationshipType = v, _relationshipType, value,  "RelationshipType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"RelatingDocument",
			"RelatedDocuments",
			"RelationshipType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @RelatingDocument;
				case 3: 
					return @RelatedDocuments;
				case 4: 
					return @RelationshipType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "RelatingDocument":  
					return @RelatingDocument;
				case "RelatedDocuments":  
					return @RelatedDocuments;
				case "RelationshipType":  
					return @RelationshipType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @RelatingDocument = (IfcDocumentInformation)value;
					 break;
				case 3:
					 @RelatedDocuments.Add((IfcDocumentInformation)value);
					 break;
				case 4:
					 @RelationshipType = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "RelatingDocument":
					 @RelatingDocument = (IfcDocumentInformation)value;
					 break;
				case "RelatedDocuments":
					 @RelatedDocuments.Add((IfcDocumentInformation)value);
					 break;
				case "RelationshipType":
					 @RelationshipType = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}