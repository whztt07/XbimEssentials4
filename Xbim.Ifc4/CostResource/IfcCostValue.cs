// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:40
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.CostResource
{
	[EntityName("IFCCOSTVALUE", 149)]
	public  partial class @IfcCostValue : IfcAppliedValue, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCostValue(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		#endregion
	
		#region Explicit attribute properties
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"AppliedValue",
			"UnitBasis",
			"ApplicableDate",
			"FixedUntilDate",
			"Category",
			"Condition",
			"ArithmeticOperator",
			"Components",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @AppliedValue;
				case 3: 
					return @UnitBasis;
				case 4: 
					return @ApplicableDate;
				case 5: 
					return @FixedUntilDate;
				case 6: 
					return @Category;
				case 7: 
					return @Condition;
				case 8: 
					return @ArithmeticOperator;
				case 9: 
					return @Components;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "AppliedValue":  
					return @AppliedValue;
				case "UnitBasis":  
					return @UnitBasis;
				case "ApplicableDate":  
					return @ApplicableDate;
				case "FixedUntilDate":  
					return @FixedUntilDate;
				case "Category":  
					return @Category;
				case "Condition":  
					return @Condition;
				case "ArithmeticOperator":  
					return @ArithmeticOperator;
				case "Components":  
					return @Components;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @AppliedValue = (IfcAppliedValueSelect)value;
					 break;
				case 3:
					 @UnitBasis = (IfcMeasureWithUnit)value;
					 break;
				case 4:
					 @ApplicableDate = (IfcDate?)value;
					 break;
				case 5:
					 @FixedUntilDate = (IfcDate?)value;
					 break;
				case 6:
					 @Category = (IfcLabel?)value;
					 break;
				case 7:
					 @Condition = (IfcLabel?)value;
					 break;
				case 8:
					 @ArithmeticOperator = (IfcArithmeticOperatorEnum?)value;
					 break;
				case 9:
					 @Components.Add((IfcAppliedValue)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "AppliedValue":
					 @AppliedValue = (IfcAppliedValueSelect)value;
					 break;
				case "UnitBasis":
					 @UnitBasis = (IfcMeasureWithUnit)value;
					 break;
				case "ApplicableDate":
					 @ApplicableDate = (IfcDate?)value;
					 break;
				case "FixedUntilDate":
					 @FixedUntilDate = (IfcDate?)value;
					 break;
				case "Category":
					 @Category = (IfcLabel?)value;
					 break;
				case "Condition":
					 @Condition = (IfcLabel?)value;
					 break;
				case "ArithmeticOperator":
					 @ArithmeticOperator = (IfcArithmeticOperatorEnum?)value;
					 break;
				case "Components":
					 @Components.Add((IfcAppliedValue)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}