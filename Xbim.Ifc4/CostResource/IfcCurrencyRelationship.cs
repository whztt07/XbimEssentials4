// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:37
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.CostResource
{
	[EntityName("IFCCURRENCYRELATIONSHIP", 156)]
	public  partial class @IfcCurrencyRelationship : IfcResourceLevelRelationship, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCurrencyRelationship(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcMonetaryUnit _relatingMonetaryUnit;
		private IfcMonetaryUnit _relatedMonetaryUnit;
		private IfcPositiveRatioMeasure _exchangeRate;
		private IfcDateTime? _rateDateTime;
		private IfcLibraryInformation _rateSource;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcMonetaryUnit @RelatingMonetaryUnit 
		{ 
			get 
			{
				if(Activated) return _relatingMonetaryUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingMonetaryUnit;
			} 
			set
			{
				SetValue( v =>  _relatingMonetaryUnit = v, _relatingMonetaryUnit, value,  "RelatingMonetaryUnit");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcMonetaryUnit @RelatedMonetaryUnit 
		{ 
			get 
			{
				if(Activated) return _relatedMonetaryUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedMonetaryUnit;
			} 
			set
			{
				SetValue( v =>  _relatedMonetaryUnit = v, _relatedMonetaryUnit, value,  "RelatedMonetaryUnit");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcPositiveRatioMeasure @ExchangeRate 
		{ 
			get 
			{
				if(Activated) return _exchangeRate;
				
				Model.Activate(this, true);
				Activated = true;
				return _exchangeRate;
			} 
			set
			{
				SetValue( v =>  _exchangeRate = v, _exchangeRate, value,  "ExchangeRate");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDateTime? @RateDateTime 
		{ 
			get 
			{
				if(Activated) return _rateDateTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _rateDateTime;
			} 
			set
			{
				SetValue( v =>  _rateDateTime = v, _rateDateTime, value,  "RateDateTime");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLibraryInformation @RateSource 
		{ 
			get 
			{
				if(Activated) return _rateSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _rateSource;
			} 
			set
			{
				SetValue( v =>  _rateSource = v, _rateSource, value,  "RateSource");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"RelatingMonetaryUnit",
			"RelatedMonetaryUnit",
			"ExchangeRate",
			"RateDateTime",
			"RateSource",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @RelatingMonetaryUnit;
				case 3: 
					return @RelatedMonetaryUnit;
				case 4: 
					return @ExchangeRate;
				case 5: 
					return @RateDateTime;
				case 6: 
					return @RateSource;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "RelatingMonetaryUnit":  
					return @RelatingMonetaryUnit;
				case "RelatedMonetaryUnit":  
					return @RelatedMonetaryUnit;
				case "ExchangeRate":  
					return @ExchangeRate;
				case "RateDateTime":  
					return @RateDateTime;
				case "RateSource":  
					return @RateSource;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @RelatingMonetaryUnit = (IfcMonetaryUnit)value;
					 break;
				case 3:
					 @RelatedMonetaryUnit = (IfcMonetaryUnit)value;
					 break;
				case 4:
					 if (value != null) @ExchangeRate = (IfcPositiveRatioMeasure)value;
					 break;
				case 5:
					 @RateDateTime = (IfcDateTime?)value;
					 break;
				case 6:
					 @RateSource = (IfcLibraryInformation)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "RelatingMonetaryUnit":
					 @RelatingMonetaryUnit = (IfcMonetaryUnit)value;
					 break;
				case "RelatedMonetaryUnit":
					 @RelatedMonetaryUnit = (IfcMonetaryUnit)value;
					 break;
				case "ExchangeRate":
					 if (value != null) @ExchangeRate = (IfcPositiveRatioMeasure)value;
					 break;
				case "RateDateTime":
					 @RateDateTime = (IfcDateTime?)value;
					 break;
				case "RateSource":
					 @RateSource = (IfcLibraryInformation)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}