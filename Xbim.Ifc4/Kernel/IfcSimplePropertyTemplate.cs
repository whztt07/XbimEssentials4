// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:24
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.PropertyResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.Kernel
{
	[EntityName("IFCSIMPLEPROPERTYTEMPLATE", 592)]
	public  partial class @IfcSimplePropertyTemplate : IfcPropertyTemplate, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSimplePropertyTemplate(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSimplePropertyTemplateTypeEnum _templateType;
		private IfcLabel? _primaryMeasureType;
		private IfcLabel? _secondaryMeasureType;
		private IfcPropertyEnumeration _enumerators;
		private IfcUnit _primaryUnit;
		private IfcUnit _secondaryUnit;
		private IfcLabel? _expression;
		private IfcStateEnum _accessState;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcSimplePropertyTemplateTypeEnum @TemplateType 
		{ 
			get 
			{
				if(Activated) return _templateType;
				
				Model.Activate(this, true);
				Activated = true;
				return _templateType;
			} 
			set
			{
				SetValue( v =>  _templateType = v, _templateType, value,  "TemplateType");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcLabel? @PrimaryMeasureType 
		{ 
			get 
			{
				if(Activated) return _primaryMeasureType;
				
				Model.Activate(this, true);
				Activated = true;
				return _primaryMeasureType;
			} 
			set
			{
				SetValue( v =>  _primaryMeasureType = v, _primaryMeasureType, value,  "PrimaryMeasureType");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLabel? @SecondaryMeasureType 
		{ 
			get 
			{
				if(Activated) return _secondaryMeasureType;
				
				Model.Activate(this, true);
				Activated = true;
				return _secondaryMeasureType;
			} 
			set
			{
				SetValue( v =>  _secondaryMeasureType = v, _secondaryMeasureType, value,  "SecondaryMeasureType");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcPropertyEnumeration @Enumerators 
		{ 
			get 
			{
				if(Activated) return _enumerators;
				
				Model.Activate(this, true);
				Activated = true;
				return _enumerators;
			} 
			set
			{
				SetValue( v =>  _enumerators = v, _enumerators, value,  "Enumerators");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcUnit @PrimaryUnit 
		{ 
			get 
			{
				if(Activated) return _primaryUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _primaryUnit;
			} 
			set
			{
				SetValue( v =>  _primaryUnit = v, _primaryUnit, value,  "PrimaryUnit");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcUnit @SecondaryUnit 
		{ 
			get 
			{
				if(Activated) return _secondaryUnit;
				
				Model.Activate(this, true);
				Activated = true;
				return _secondaryUnit;
			} 
			set
			{
				SetValue( v =>  _secondaryUnit = v, _secondaryUnit, value,  "SecondaryUnit");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcLabel? @Expression 
		{ 
			get 
			{
				if(Activated) return _expression;
				
				Model.Activate(this, true);
				Activated = true;
				return _expression;
			} 
			set
			{
				SetValue( v =>  _expression = v, _expression, value,  "Expression");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcStateEnum @AccessState 
		{ 
			get 
			{
				if(Activated) return _accessState;
				
				Model.Activate(this, true);
				Activated = true;
				return _accessState;
			} 
			set
			{
				SetValue( v =>  _accessState = v, _accessState, value,  "AccessState");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"TemplateType",
			"PrimaryMeasureType",
			"SecondaryMeasureType",
			"Enumerators",
			"PrimaryUnit",
			"SecondaryUnit",
			"Expression",
			"AccessState",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @TemplateType;
				case 5: 
					return @PrimaryMeasureType;
				case 6: 
					return @SecondaryMeasureType;
				case 7: 
					return @Enumerators;
				case 8: 
					return @PrimaryUnit;
				case 9: 
					return @SecondaryUnit;
				case 10: 
					return @Expression;
				case 11: 
					return @AccessState;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "TemplateType":  
					return @TemplateType;
				case "PrimaryMeasureType":  
					return @PrimaryMeasureType;
				case "SecondaryMeasureType":  
					return @SecondaryMeasureType;
				case "Enumerators":  
					return @Enumerators;
				case "PrimaryUnit":  
					return @PrimaryUnit;
				case "SecondaryUnit":  
					return @SecondaryUnit;
				case "Expression":  
					return @Expression;
				case "AccessState":  
					return @AccessState;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @TemplateType = (IfcSimplePropertyTemplateTypeEnum)value;
					 break;
				case 5:
					 @PrimaryMeasureType = (IfcLabel?)value;
					 break;
				case 6:
					 @SecondaryMeasureType = (IfcLabel?)value;
					 break;
				case 7:
					 @Enumerators = (IfcPropertyEnumeration)value;
					 break;
				case 8:
					 @PrimaryUnit = (IfcUnit)value;
					 break;
				case 9:
					 @SecondaryUnit = (IfcUnit)value;
					 break;
				case 10:
					 @Expression = (IfcLabel?)value;
					 break;
				case 11:
					 @AccessState = (IfcStateEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "TemplateType":
					 @TemplateType = (IfcSimplePropertyTemplateTypeEnum)value;
					 break;
				case "PrimaryMeasureType":
					 @PrimaryMeasureType = (IfcLabel?)value;
					 break;
				case "SecondaryMeasureType":
					 @SecondaryMeasureType = (IfcLabel?)value;
					 break;
				case "Enumerators":
					 @Enumerators = (IfcPropertyEnumeration)value;
					 break;
				case "PrimaryUnit":
					 @PrimaryUnit = (IfcUnit)value;
					 break;
				case "SecondaryUnit":
					 @SecondaryUnit = (IfcUnit)value;
					 break;
				case "Expression":
					 @Expression = (IfcLabel?)value;
					 break;
				case "AccessState":
					 @AccessState = (IfcStateEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}