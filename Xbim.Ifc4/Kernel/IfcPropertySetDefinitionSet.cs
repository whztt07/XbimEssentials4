// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		22.09.2015 04:44:10
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.Kernel
{
	[ExpressType("IFCPROPERTYSETDEFINITIONSET", 85)]
    // ReSharper disable once PartialTypeWithSinglePart
	public partial struct IfcPropertySetDefinitionSet : IfcPropertySetDefinitionSelect, IExpressComplexType
	{ 
		private List<IfcPropertySetDefinition> _value;
        
		public object Value
        {
            get { return _value; }
        }

        public override string ToString()
        {
            return Value != null ? Value.ToString() : typeof(List<IfcPropertySetDefinition>).Name;
        }

        public IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> val)
        {
            _value = val;
        }

        public static implicit operator IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> value)
        {
            return new IfcPropertySetDefinitionSet(value);
        }

        public static implicit operator List<IfcPropertySetDefinition>(IfcPropertySetDefinitionSet obj)
        {
            return obj._value;
        }


        public override bool Equals(object obj)
        {
			if (obj == null && Value == null)
                return true;

            if (obj == null)
                return false;

            if (GetType() != obj.GetType())
                return false;

            return System.Linq.Enumerable.SequenceEqual(((IfcPropertySetDefinitionSet) obj)._value, _value);
        }

        public static bool operator ==(IfcPropertySetDefinitionSet obj1, IfcPropertySetDefinitionSet obj2)
        {
            return Equals(obj1, obj2);
        }

        public static bool operator !=(IfcPropertySetDefinitionSet obj1, IfcPropertySetDefinitionSet obj2)
        {
            return !Equals(obj1, obj2);
        }

        public override int GetHashCode()
        {
            return Value != null ? _value.GetHashCode() : base.GetHashCode();
        }

		#region IPersist implementation
		void IPersist.Parse(int propIndex, IPropertyValue value)
		{
			if (propIndex != 0)
				throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			if (_value == null)
				_value = new List<IfcPropertySetDefinition>();
            _value.Add(value.EntityVal as IfcPropertySetDefinition);
            
		}

		string IPersist.WhereRule()
		{
            throw new System.NotImplementedException();
		}
		#endregion

		#region IExpressType implementation
        System.Type IExpressType.UnderlyingSystemType { 
			get 
			{
				return typeof(List<IfcPropertySetDefinition>);
			}
		}
		#endregion

		#region IExpressComplexType implementation
		IEnumerable<object> IExpressComplexType.Properties
        {
            get
            {
				if(_value == null) yield break;
	            foreach (var value in _value)
	                yield return value;
            }
        }

		void IExpressComplexType.Add(object o)
	    {
			if (_value == null)
				_value = new List<IfcPropertySetDefinition>();
			 _value.Add((IfcPropertySetDefinition) o);
	    }
		#endregion

	}
}
