// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		21.09.2015 05:11:20
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.GeometricConstraintResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.ProductExtension
{
	[IndexedClass]
	[ExpressType("IFCRELINTERFERESELEMENTS", 938)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcRelInterferesElements : IfcRelConnects, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRelInterferesElements(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcElement _relatingElement;
		private IfcElement _relatedElement;
		private IfcConnectionGeometry _interferenceGeometry;
		private IfcIdentifier? _interferenceType;
		private bool? _impliedOrder;
		#endregion
	
		#region Explicit attribute properties
		[IndexedProperty]
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcElement @RelatingElement 
		{ 
			get 
			{
				if(Activated) return _relatingElement;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingElement;
			} 
			set
			{
				SetValue( v =>  _relatingElement = v, _relatingElement, value,  "RelatingElement");
			} 
		}
	
		[IndexedProperty]
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcElement @RelatedElement 
		{ 
			get 
			{
				if(Activated) return _relatedElement;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedElement;
			} 
			set
			{
				SetValue( v =>  _relatedElement = v, _relatedElement, value,  "RelatedElement");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcConnectionGeometry @InterferenceGeometry 
		{ 
			get 
			{
				if(Activated) return _interferenceGeometry;
				
				Model.Activate(this, true);
				Activated = true;
				return _interferenceGeometry;
			} 
			set
			{
				SetValue( v =>  _interferenceGeometry = v, _interferenceGeometry, value,  "InterferenceGeometry");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcIdentifier? @InterferenceType 
		{ 
			get 
			{
				if(Activated) return _interferenceType;
				
				Model.Activate(this, true);
				Activated = true;
				return _interferenceType;
			} 
			set
			{
				SetValue( v =>  _interferenceType = v, _interferenceType, value,  "InterferenceType");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public bool? @ImpliedOrder 
		{ 
			get 
			{
				if(Activated) return _impliedOrder;
				
				Model.Activate(this, true);
				Activated = true;
				return _impliedOrder;
			} 
			set
			{
				SetValue( v =>  _impliedOrder = v, _impliedOrder, value,  "ImpliedOrder");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value); 
					return;
				case 4: 
					_relatingElement = (IfcElement)(value.EntityVal);
					return;
				case 5: 
					_relatedElement = (IfcElement)(value.EntityVal);
					return;
				case 6: 
					_interferenceGeometry = (IfcConnectionGeometry)(value.EntityVal);
					return;
				case 7: 
					_interferenceType = value.StringVal;
					return;
				case 8: 
					_impliedOrder = value.BooleanVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*NotSelfReference:	NotSelfReference : RelatingElement :<>: RelatedElement;*/
		}
		#endregion
	}
}