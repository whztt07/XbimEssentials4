// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:43
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.GeometricConstraintResource;
using Xbim.Ifc4.RepresentationResource;
using Xbim.Ifc4.ActorResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ProductExtension
{
	[EntityName("IFCSITE")]
	public  partial class @IfcSite : IfcSpatialStructureElement, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSite(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCompoundPlaneAngleMeasure? _refLatitude;
		private IfcCompoundPlaneAngleMeasure? _refLongitude;
		private IfcLengthMeasure? _refElevation;
		private IfcLabel? _landTitleNumber;
		private IfcPostalAddress _siteAddress;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcCompoundPlaneAngleMeasure? @RefLatitude 
		{ 
			get 
			{
				if(IsActivated) return _refLatitude;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _refLatitude;
			} 
			set
			{
				SetValue( v =>  _refLatitude = v, _refLatitude, value,  "RefLatitude");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcCompoundPlaneAngleMeasure? @RefLongitude 
		{ 
			get 
			{
				if(IsActivated) return _refLongitude;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _refLongitude;
			} 
			set
			{
				SetValue( v =>  _refLongitude = v, _refLongitude, value,  "RefLongitude");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcLengthMeasure? @RefElevation 
		{ 
			get 
			{
				if(IsActivated) return _refElevation;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _refElevation;
			} 
			set
			{
				SetValue( v =>  _refElevation = v, _refElevation, value,  "RefElevation");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcLabel? @LandTitleNumber 
		{ 
			get 
			{
				if(IsActivated) return _landTitleNumber;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _landTitleNumber;
			} 
			set
			{
				SetValue( v =>  _landTitleNumber = v, _landTitleNumber, value,  "LandTitleNumber");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public IfcPostalAddress @SiteAddress 
		{ 
			get 
			{
				if(IsActivated) return _siteAddress;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _siteAddress;
			} 
			set
			{
				SetValue( v =>  _siteAddress = v, _siteAddress, value,  "SiteAddress");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ObjectType",
			"ObjectPlacement",
			"Representation",
			"LongName",
			"CompositionType",
			"RefLatitude",
			"RefLongitude",
			"RefElevation",
			"LandTitleNumber",
			"SiteAddress",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ObjectType;
				case 5: 
					return @ObjectPlacement;
				case 6: 
					return @Representation;
				case 7: 
					return @LongName;
				case 8: 
					return @CompositionType;
				case 9: 
					return @RefLatitude;
				case 10: 
					return @RefLongitude;
				case 11: 
					return @RefElevation;
				case 12: 
					return @LandTitleNumber;
				case 13: 
					return @SiteAddress;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ObjectType":  
					return @ObjectType;
				case "ObjectPlacement":  
					return @ObjectPlacement;
				case "Representation":  
					return @Representation;
				case "LongName":  
					return @LongName;
				case "CompositionType":  
					return @CompositionType;
				case "RefLatitude":  
					return @RefLatitude;
				case "RefLongitude":  
					return @RefLongitude;
				case "RefElevation":  
					return @RefElevation;
				case "LandTitleNumber":  
					return @LandTitleNumber;
				case "SiteAddress":  
					return @SiteAddress;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ObjectType = (IfcLabel?)value;
					 break;
				case 5:
					 @ObjectPlacement = (IfcObjectPlacement)value;
					 break;
				case 6:
					 @Representation = (IfcProductRepresentation)value;
					 break;
				case 7:
					 @LongName = (IfcLabel?)value;
					 break;
				case 8:
					 @CompositionType = (IfcElementCompositionEnum)value;
					 break;
				case 9:
					 @RefLatitude = (IfcCompoundPlaneAngleMeasure?)value;
					 break;
				case 10:
					 @RefLongitude = (IfcCompoundPlaneAngleMeasure?)value;
					 break;
				case 11:
					 @RefElevation = (IfcLengthMeasure?)value;
					 break;
				case 12:
					 @LandTitleNumber = (IfcLabel?)value;
					 break;
				case 13:
					 @SiteAddress = (IfcPostalAddress)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ObjectType":
					 @ObjectType = (IfcLabel?)value;
					 break;
				case "ObjectPlacement":
					 @ObjectPlacement = (IfcObjectPlacement)value;
					 break;
				case "Representation":
					 @Representation = (IfcProductRepresentation)value;
					 break;
				case "LongName":
					 @LongName = (IfcLabel?)value;
					 break;
				case "CompositionType":
					 @CompositionType = (IfcElementCompositionEnum)value;
					 break;
				case "RefLatitude":
					 @RefLatitude = (IfcCompoundPlaneAngleMeasure?)value;
					 break;
				case "RefLongitude":
					 @RefLongitude = (IfcCompoundPlaneAngleMeasure?)value;
					 break;
				case "RefElevation":
					 @RefElevation = (IfcLengthMeasure?)value;
					 break;
				case "LandTitleNumber":
					 @LandTitleNumber = (IfcLabel?)value;
					 break;
				case "SiteAddress":
					 @SiteAddress = (IfcPostalAddress)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}