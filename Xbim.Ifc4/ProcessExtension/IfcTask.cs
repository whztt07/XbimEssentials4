// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:43
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ProcessExtension
{
	[EntityName("IFCTASK")]
	public  partial class @IfcTask : IfcProcess, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTask(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLabel? _status;
		private IfcLabel? _workMethod;
		private bool _isMilestone;
		private int? _priority;
		private IfcTaskTime _taskTime;
		private IfcTaskTypeEnum _predefinedType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcLabel? @Status 
		{ 
			get 
			{
				if(IsActivated) return _status;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _status;
			} 
			set
			{
				SetValue( v =>  _status = v, _status, value,  "Status");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcLabel? @WorkMethod 
		{ 
			get 
			{
				if(IsActivated) return _workMethod;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _workMethod;
			} 
			set
			{
				SetValue( v =>  _workMethod = v, _workMethod, value,  "WorkMethod");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public bool @IsMilestone 
		{ 
			get 
			{
				if(IsActivated) return _isMilestone;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _isMilestone;
			} 
			set
			{
				SetValue( v =>  _isMilestone = v, _isMilestone, value,  "IsMilestone");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public int? @Priority 
		{ 
			get 
			{
				if(IsActivated) return _priority;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _priority;
			} 
			set
			{
				SetValue( v =>  _priority = v, _priority, value,  "Priority");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcTaskTime @TaskTime 
		{ 
			get 
			{
				if(IsActivated) return _taskTime;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _taskTime;
			} 
			set
			{
				SetValue( v =>  _taskTime = v, _taskTime, value,  "TaskTime");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcTaskTypeEnum @PredefinedType 
		{ 
			get 
			{
				if(IsActivated) return _predefinedType;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _predefinedType;
			} 
			set
			{
				SetValue( v =>  _predefinedType = v, _predefinedType, value,  "PredefinedType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ObjectType",
			"Identification",
			"LongDescription",
			"Status",
			"WorkMethod",
			"IsMilestone",
			"Priority",
			"TaskTime",
			"PredefinedType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ObjectType;
				case 5: 
					return @Identification;
				case 6: 
					return @LongDescription;
				case 7: 
					return @Status;
				case 8: 
					return @WorkMethod;
				case 9: 
					return @IsMilestone;
				case 10: 
					return @Priority;
				case 11: 
					return @TaskTime;
				case 12: 
					return @PredefinedType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ObjectType":  
					return @ObjectType;
				case "Identification":  
					return @Identification;
				case "LongDescription":  
					return @LongDescription;
				case "Status":  
					return @Status;
				case "WorkMethod":  
					return @WorkMethod;
				case "IsMilestone":  
					return @IsMilestone;
				case "Priority":  
					return @Priority;
				case "TaskTime":  
					return @TaskTime;
				case "PredefinedType":  
					return @PredefinedType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ObjectType = (IfcLabel?)value;
					 break;
				case 5:
					 @Identification = (IfcIdentifier?)value;
					 break;
				case 6:
					 @LongDescription = (IfcText?)value;
					 break;
				case 7:
					 @Status = (IfcLabel?)value;
					 break;
				case 8:
					 @WorkMethod = (IfcLabel?)value;
					 break;
				case 9:
					 if (value != null) @IsMilestone = (bool)value;
					 break;
				case 10:
					 @Priority = (int?)value;
					 break;
				case 11:
					 @TaskTime = (IfcTaskTime)value;
					 break;
				case 12:
					 @PredefinedType = (IfcTaskTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ObjectType":
					 @ObjectType = (IfcLabel?)value;
					 break;
				case "Identification":
					 @Identification = (IfcIdentifier?)value;
					 break;
				case "LongDescription":
					 @LongDescription = (IfcText?)value;
					 break;
				case "Status":
					 @Status = (IfcLabel?)value;
					 break;
				case "WorkMethod":
					 @WorkMethod = (IfcLabel?)value;
					 break;
				case "IsMilestone":
					 if (value != null) @IsMilestone = (bool)value;
					 break;
				case "Priority":
					 @Priority = (int?)value;
					 break;
				case "TaskTime":
					 @TaskTime = (IfcTaskTime)value;
					 break;
				case "PredefinedType":
					 @PredefinedType = (IfcTaskTypeEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*HasName:	HasName : EXISTS(SELF\IfcRoot.Name);*/
		/*CorrectPredefinedType:	CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcTaskTypeEnum.USERDEFINED) OR ((PredefinedType = IfcTaskTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}