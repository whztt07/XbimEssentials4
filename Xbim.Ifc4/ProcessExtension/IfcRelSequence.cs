// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:23
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.ProcessExtension
{
	[EntityName("IFCRELSEQUENCE", 551)]
	public  partial class @IfcRelSequence : IfcRelConnects, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRelSequence(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcProcess _relatingProcess;
		private IfcProcess _relatedProcess;
		private IfcLagTime _timeLag;
		private IfcSequenceEnum _sequenceType;
		private IfcLabel? _userDefinedSequenceType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcProcess @RelatingProcess 
		{ 
			get 
			{
				if(Activated) return _relatingProcess;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingProcess;
			} 
			set
			{
				SetValue( v =>  _relatingProcess = v, _relatingProcess, value,  "RelatingProcess");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcProcess @RelatedProcess 
		{ 
			get 
			{
				if(Activated) return _relatedProcess;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedProcess;
			} 
			set
			{
				SetValue( v =>  _relatedProcess = v, _relatedProcess, value,  "RelatedProcess");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLagTime @TimeLag 
		{ 
			get 
			{
				if(Activated) return _timeLag;
				
				Model.Activate(this, true);
				Activated = true;
				return _timeLag;
			} 
			set
			{
				SetValue( v =>  _timeLag = v, _timeLag, value,  "TimeLag");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcSequenceEnum @SequenceType 
		{ 
			get 
			{
				if(Activated) return _sequenceType;
				
				Model.Activate(this, true);
				Activated = true;
				return _sequenceType;
			} 
			set
			{
				SetValue( v =>  _sequenceType = v, _sequenceType, value,  "SequenceType");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcLabel? @UserDefinedSequenceType 
		{ 
			get 
			{
				if(Activated) return _userDefinedSequenceType;
				
				Model.Activate(this, true);
				Activated = true;
				return _userDefinedSequenceType;
			} 
			set
			{
				SetValue( v =>  _userDefinedSequenceType = v, _userDefinedSequenceType, value,  "UserDefinedSequenceType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"RelatingProcess",
			"RelatedProcess",
			"TimeLag",
			"SequenceType",
			"UserDefinedSequenceType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @RelatingProcess;
				case 5: 
					return @RelatedProcess;
				case 6: 
					return @TimeLag;
				case 7: 
					return @SequenceType;
				case 8: 
					return @UserDefinedSequenceType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "RelatingProcess":  
					return @RelatingProcess;
				case "RelatedProcess":  
					return @RelatedProcess;
				case "TimeLag":  
					return @TimeLag;
				case "SequenceType":  
					return @SequenceType;
				case "UserDefinedSequenceType":  
					return @UserDefinedSequenceType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @RelatingProcess = (IfcProcess)value;
					 break;
				case 5:
					 @RelatedProcess = (IfcProcess)value;
					 break;
				case 6:
					 @TimeLag = (IfcLagTime)value;
					 break;
				case 7:
					 @SequenceType = (IfcSequenceEnum)value;
					 break;
				case 8:
					 @UserDefinedSequenceType = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "RelatingProcess":
					 @RelatingProcess = (IfcProcess)value;
					 break;
				case "RelatedProcess":
					 @RelatedProcess = (IfcProcess)value;
					 break;
				case "TimeLag":
					 @TimeLag = (IfcLagTime)value;
					 break;
				case "SequenceType":
					 @SequenceType = (IfcSequenceEnum)value;
					 break;
				case "UserDefinedSequenceType":
					 @UserDefinedSequenceType = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*AvoidInconsistentSequence:	AvoidInconsistentSequence : RelatingProcess :<>: RelatedProcess;*/
		/*CorrectSequenceType:	CorrectSequenceType : (SequenceType <> IfcSequenceEnum.USERDEFINED) OR ((SequenceType = IfcSequenceEnum.USERDEFINED) AND EXISTS(UserDefinedSequenceType));*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}