// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:38
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.RepresentationResource
{
	[EntityName("IFCGEOMETRICREPRESENTATIONCONTEXT", 301)]
	public  partial class @IfcGeometricRepresentationContext : IfcRepresentationContext, IfcCoordinateReferenceSystemSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcGeometricRepresentationContext(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDimensionCount _coordinateSpaceDimension;
		private double? _precision;
		private IfcAxis2Placement _worldCoordinateSystem;
		private IfcDirection _trueNorth;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcDimensionCount @CoordinateSpaceDimension 
		{ 
			get 
			{
				if(Activated) return _coordinateSpaceDimension;
				
				Model.Activate(this, true);
				Activated = true;
				return _coordinateSpaceDimension;
			} 
			set
			{
				SetValue( v =>  _coordinateSpaceDimension = v, _coordinateSpaceDimension, value,  "CoordinateSpaceDimension");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public double? @Precision 
		{ 
			get 
			{
				if(Activated) return _precision;
				
				Model.Activate(this, true);
				Activated = true;
				return _precision;
			} 
			set
			{
				SetValue( v =>  _precision = v, _precision, value,  "Precision");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcAxis2Placement @WorldCoordinateSystem 
		{ 
			get 
			{
				if(Activated) return _worldCoordinateSystem;
				
				Model.Activate(this, true);
				Activated = true;
				return _worldCoordinateSystem;
			} 
			set
			{
				SetValue( v =>  _worldCoordinateSystem = v, _worldCoordinateSystem, value,  "WorldCoordinateSystem");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDirection @TrueNorth 
		{ 
			get 
			{
				if(Activated) return _trueNorth;
				
				Model.Activate(this, true);
				Activated = true;
				return _trueNorth;
			} 
			set
			{
				SetValue( v =>  _trueNorth = v, _trueNorth, value,  "TrueNorth");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcGeometricRepresentationSubContext> @HasSubContexts 
		{ 
			get 
			{
				return Model.Instances.Where<IfcGeometricRepresentationSubContext>(e => e.ParentContext == this);
			} 
		}
	

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"ContextIdentifier",
			"ContextType",
			"CoordinateSpaceDimension",
			"Precision",
			"WorldCoordinateSystem",
			"TrueNorth",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @ContextIdentifier;
				case 1: 
					return @ContextType;
				case 2: 
					return @CoordinateSpaceDimension;
				case 3: 
					return @Precision;
				case 4: 
					return @WorldCoordinateSystem;
				case 5: 
					return @TrueNorth;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "ContextIdentifier":  
					return @ContextIdentifier;
				case "ContextType":  
					return @ContextType;
				case "CoordinateSpaceDimension":  
					return @CoordinateSpaceDimension;
				case "Precision":  
					return @Precision;
				case "WorldCoordinateSystem":  
					return @WorldCoordinateSystem;
				case "TrueNorth":  
					return @TrueNorth;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @ContextIdentifier = (IfcLabel?)value;
					 break;
				case 1:
					 @ContextType = (IfcLabel?)value;
					 break;
				case 2:
					 if (value != null) @CoordinateSpaceDimension = (IfcDimensionCount)value;
					 break;
				case 3:
					 @Precision = (double?)value;
					 break;
				case 4:
					 @WorldCoordinateSystem = (IfcAxis2Placement)value;
					 break;
				case 5:
					 @TrueNorth = (IfcDirection)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "ContextIdentifier":
					 @ContextIdentifier = (IfcLabel?)value;
					 break;
				case "ContextType":
					 @ContextType = (IfcLabel?)value;
					 break;
				case "CoordinateSpaceDimension":
					 if (value != null) @CoordinateSpaceDimension = (IfcDimensionCount)value;
					 break;
				case "Precision":
					 @Precision = (double?)value;
					 break;
				case "WorldCoordinateSystem":
					 @WorldCoordinateSystem = (IfcAxis2Placement)value;
					 break;
				case "TrueNorth":
					 @TrueNorth = (IfcDirection)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*WR11:	WR11 : NOT(EXISTS(TrueNorth)) OR (HIINDEX(TrueNorth.DirectionRatios) = 2);*/
		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}