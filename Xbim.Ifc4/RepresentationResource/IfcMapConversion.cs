// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:39
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.RepresentationResource
{
	[EntityName("IFCMAPCONVERSION", 348)]
	public  partial class @IfcMapConversion : IfcCoordinateOperation, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMapConversion(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLengthMeasure _eastings;
		private IfcLengthMeasure _northings;
		private IfcLengthMeasure _orthogonalHeight;
		private IfcReal? _xAxisAbscissa;
		private IfcReal? _xAxisOrdinate;
		private IfcReal? _scale;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcLengthMeasure @Eastings 
		{ 
			get 
			{
				if(Activated) return _eastings;
				
				Model.Activate(this, true);
				Activated = true;
				return _eastings;
			} 
			set
			{
				SetValue( v =>  _eastings = v, _eastings, value,  "Eastings");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcLengthMeasure @Northings 
		{ 
			get 
			{
				if(Activated) return _northings;
				
				Model.Activate(this, true);
				Activated = true;
				return _northings;
			} 
			set
			{
				SetValue( v =>  _northings = v, _northings, value,  "Northings");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcLengthMeasure @OrthogonalHeight 
		{ 
			get 
			{
				if(Activated) return _orthogonalHeight;
				
				Model.Activate(this, true);
				Activated = true;
				return _orthogonalHeight;
			} 
			set
			{
				SetValue( v =>  _orthogonalHeight = v, _orthogonalHeight, value,  "OrthogonalHeight");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcReal? @XAxisAbscissa 
		{ 
			get 
			{
				if(Activated) return _xAxisAbscissa;
				
				Model.Activate(this, true);
				Activated = true;
				return _xAxisAbscissa;
			} 
			set
			{
				SetValue( v =>  _xAxisAbscissa = v, _xAxisAbscissa, value,  "XAxisAbscissa");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcReal? @XAxisOrdinate 
		{ 
			get 
			{
				if(Activated) return _xAxisOrdinate;
				
				Model.Activate(this, true);
				Activated = true;
				return _xAxisOrdinate;
			} 
			set
			{
				SetValue( v =>  _xAxisOrdinate = v, _xAxisOrdinate, value,  "XAxisOrdinate");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcReal? @Scale 
		{ 
			get 
			{
				if(Activated) return _scale;
				
				Model.Activate(this, true);
				Activated = true;
				return _scale;
			} 
			set
			{
				SetValue( v =>  _scale = v, _scale, value,  "Scale");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"SourceCRS",
			"TargetCRS",
			"Eastings",
			"Northings",
			"OrthogonalHeight",
			"XAxisAbscissa",
			"XAxisOrdinate",
			"Scale",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @SourceCRS;
				case 1: 
					return @TargetCRS;
				case 2: 
					return @Eastings;
				case 3: 
					return @Northings;
				case 4: 
					return @OrthogonalHeight;
				case 5: 
					return @XAxisAbscissa;
				case 6: 
					return @XAxisOrdinate;
				case 7: 
					return @Scale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "SourceCRS":  
					return @SourceCRS;
				case "TargetCRS":  
					return @TargetCRS;
				case "Eastings":  
					return @Eastings;
				case "Northings":  
					return @Northings;
				case "OrthogonalHeight":  
					return @OrthogonalHeight;
				case "XAxisAbscissa":  
					return @XAxisAbscissa;
				case "XAxisOrdinate":  
					return @XAxisOrdinate;
				case "Scale":  
					return @Scale;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @SourceCRS = (IfcCoordinateReferenceSystemSelect)value;
					 break;
				case 1:
					 @TargetCRS = (IfcCoordinateReferenceSystem)value;
					 break;
				case 2:
					 if (value != null) @Eastings = (IfcLengthMeasure)value;
					 break;
				case 3:
					 if (value != null) @Northings = (IfcLengthMeasure)value;
					 break;
				case 4:
					 if (value != null) @OrthogonalHeight = (IfcLengthMeasure)value;
					 break;
				case 5:
					 @XAxisAbscissa = (IfcReal?)value;
					 break;
				case 6:
					 @XAxisOrdinate = (IfcReal?)value;
					 break;
				case 7:
					 @Scale = (IfcReal?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "SourceCRS":
					 @SourceCRS = (IfcCoordinateReferenceSystemSelect)value;
					 break;
				case "TargetCRS":
					 @TargetCRS = (IfcCoordinateReferenceSystem)value;
					 break;
				case "Eastings":
					 if (value != null) @Eastings = (IfcLengthMeasure)value;
					 break;
				case "Northings":
					 if (value != null) @Northings = (IfcLengthMeasure)value;
					 break;
				case "OrthogonalHeight":
					 if (value != null) @OrthogonalHeight = (IfcLengthMeasure)value;
					 break;
				case "XAxisAbscissa":
					 @XAxisAbscissa = (IfcReal?)value;
					 break;
				case "XAxisOrdinate":
					 @XAxisOrdinate = (IfcReal?)value;
					 break;
				case "Scale":
					 @Scale = (IfcReal?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}