// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:43
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ProfileResource;
using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometricModelResource
{
	[EntityName("IFCREVOLVEDAREASOLIDTAPERED")]
	public  partial class @IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRevolvedAreaSolidTapered(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcProfileDef _endSweptArea;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcProfileDef @EndSweptArea 
		{ 
			get 
			{
				if(IsActivated) return _endSweptArea;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _endSweptArea;
			} 
			set
			{
				SetValue( v =>  _endSweptArea = v, _endSweptArea, value,  "EndSweptArea");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"SweptArea",
			"Position",
			"Axis",
			"Angle",
			"EndSweptArea",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @SweptArea;
				case 1: 
					return @Position;
				case 2: 
					return @Axis;
				case 3: 
					return @Angle;
				case 4: 
					return @EndSweptArea;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "SweptArea":  
					return @SweptArea;
				case "Position":  
					return @Position;
				case "Axis":  
					return @Axis;
				case "Angle":  
					return @Angle;
				case "EndSweptArea":  
					return @EndSweptArea;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @SweptArea = (IfcProfileDef)value;
					 break;
				case 1:
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case 2:
					 @Axis = (IfcAxis1Placement)value;
					 break;
				case 3:
					 if (value != null) @Angle = (IfcPlaneAngleMeasure)value;
					 break;
				case 4:
					 @EndSweptArea = (IfcProfileDef)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "SweptArea":
					 @SweptArea = (IfcProfileDef)value;
					 break;
				case "Position":
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case "Axis":
					 @Axis = (IfcAxis1Placement)value;
					 break;
				case "Angle":
					 if (value != null) @Angle = (IfcPlaneAngleMeasure)value;
					 break;
				case "EndSweptArea":
					 @EndSweptArea = (IfcProfileDef)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*CorrectProfileAssignment:	CorrectProfileAssignment : IfcTaperedSweptAreaProfiles(SELF\IfcSweptAreaSolid.SweptArea, SELF.EndSweptArea);*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}