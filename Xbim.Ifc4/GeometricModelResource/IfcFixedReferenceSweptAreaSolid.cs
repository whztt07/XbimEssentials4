// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:21
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ProfileResource;
using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometricModelResource
{
	[EntityName("IFCFIXEDREFERENCESWEPTAREASOLID", 273)]
	public  partial class @IfcFixedReferenceSweptAreaSolid : IfcSweptAreaSolid, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcFixedReferenceSweptAreaSolid(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCurve _directrix;
		private IfcParameterValue? _startParam;
		private IfcParameterValue? _endParam;
		private IfcDirection _fixedReference;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcCurve @Directrix 
		{ 
			get 
			{
				if(Activated) return _directrix;
				
				Model.Activate(this, true);
				Activated = true;
				return _directrix;
			} 
			set
			{
				SetValue( v =>  _directrix = v, _directrix, value,  "Directrix");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcParameterValue? @StartParam 
		{ 
			get 
			{
				if(Activated) return _startParam;
				
				Model.Activate(this, true);
				Activated = true;
				return _startParam;
			} 
			set
			{
				SetValue( v =>  _startParam = v, _startParam, value,  "StartParam");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcParameterValue? @EndParam 
		{ 
			get 
			{
				if(Activated) return _endParam;
				
				Model.Activate(this, true);
				Activated = true;
				return _endParam;
			} 
			set
			{
				SetValue( v =>  _endParam = v, _endParam, value,  "EndParam");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public IfcDirection @FixedReference 
		{ 
			get 
			{
				if(Activated) return _fixedReference;
				
				Model.Activate(this, true);
				Activated = true;
				return _fixedReference;
			} 
			set
			{
				SetValue( v =>  _fixedReference = v, _fixedReference, value,  "FixedReference");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"SweptArea",
			"Position",
			"Directrix",
			"StartParam",
			"EndParam",
			"FixedReference",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @SweptArea;
				case 1: 
					return @Position;
				case 2: 
					return @Directrix;
				case 3: 
					return @StartParam;
				case 4: 
					return @EndParam;
				case 5: 
					return @FixedReference;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "SweptArea":  
					return @SweptArea;
				case "Position":  
					return @Position;
				case "Directrix":  
					return @Directrix;
				case "StartParam":  
					return @StartParam;
				case "EndParam":  
					return @EndParam;
				case "FixedReference":  
					return @FixedReference;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @SweptArea = (IfcProfileDef)value;
					 break;
				case 1:
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case 2:
					 @Directrix = (IfcCurve)value;
					 break;
				case 3:
					 @StartParam = (IfcParameterValue?)value;
					 break;
				case 4:
					 @EndParam = (IfcParameterValue?)value;
					 break;
				case 5:
					 @FixedReference = (IfcDirection)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "SweptArea":
					 @SweptArea = (IfcProfileDef)value;
					 break;
				case "Position":
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case "Directrix":
					 @Directrix = (IfcCurve)value;
					 break;
				case "StartParam":
					 @StartParam = (IfcParameterValue?)value;
					 break;
				case "EndParam":
					 @EndParam = (IfcParameterValue?)value;
					 break;
				case "FixedReference":
					 @FixedReference = (IfcDirection)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*DirectrixBounded:                         (SIZEOF(['IFC4.IFCCONIC', 'IFC4.IFCBOUNDEDCURVE'] * TYPEOF(Directrix)) = 1);*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}