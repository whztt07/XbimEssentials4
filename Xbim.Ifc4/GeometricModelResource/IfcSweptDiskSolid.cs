// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:44:07
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.GeometricModelResource
{
	[EntityName("IFCSWEPTDISKSOLID", 676)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcSweptDiskSolid : IfcSolidModel, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSweptDiskSolid(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCurve _directrix;
		private IfcPositiveLengthMeasure _radius;
		private IfcPositiveLengthMeasure? _innerRadius;
		private IfcParameterValue? _startParam;
		private IfcParameterValue? _endParam;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(0, EntityAttributeState.Mandatory)]
		public IfcCurve @Directrix 
		{ 
			get 
			{
				if(Activated) return _directrix;
				
				Model.Activate(this, true);
				Activated = true;
				return _directrix;
			} 
			set
			{
				SetValue( v =>  _directrix = v, _directrix, value,  "Directrix");
			} 
		}
	
		[EntityAttributee(1, EntityAttributeState.Mandatory)]
		public IfcPositiveLengthMeasure @Radius 
		{ 
			get 
			{
				if(Activated) return _radius;
				
				Model.Activate(this, true);
				Activated = true;
				return _radius;
			} 
			set
			{
				SetValue( v =>  _radius = v, _radius, value,  "Radius");
			} 
		}
	
		[EntityAttributee(2, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @InnerRadius 
		{ 
			get 
			{
				if(Activated) return _innerRadius;
				
				Model.Activate(this, true);
				Activated = true;
				return _innerRadius;
			} 
			set
			{
				SetValue( v =>  _innerRadius = v, _innerRadius, value,  "InnerRadius");
			} 
		}
	
		[EntityAttributee(3, EntityAttributeState.Optional)]
		public IfcParameterValue? @StartParam 
		{ 
			get 
			{
				if(Activated) return _startParam;
				
				Model.Activate(this, true);
				Activated = true;
				return _startParam;
			} 
			set
			{
				SetValue( v =>  _startParam = v, _startParam, value,  "StartParam");
			} 
		}
	
		[EntityAttributee(4, EntityAttributeState.Optional)]
		public IfcParameterValue? @EndParam 
		{ 
			get 
			{
				if(Activated) return _endParam;
				
				Model.Activate(this, true);
				Activated = true;
				return _endParam;
			} 
			set
			{
				SetValue( v =>  _endParam = v, _endParam, value,  "EndParam");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_directrix = (IfcCurve)(value.EntityVal);
					return;
				case 1: 
					_radius = value.RealVal;
					return;
				case 2: 
					_innerRadius = value.RealVal;
					return;
				case 3: 
					_startParam = value.RealVal;
					return;
				case 4: 
					_endParam = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*DirectrixDim:	DirectrixDim : Directrix.Dim = 3;*/
		/*InnerRadiusSize:	InnerRadiusSize : (NOT EXISTS(InnerRadius)) OR (Radius > InnerRadius);*/
		/*DirectrixBounded:                         (SIZEOF(['IFC4.IFCCONIC', 'IFC4.IFCBOUNDEDCURVE'] * TYPEOF(Directrix)) = 1);*/
		}
		#endregion
	}
}