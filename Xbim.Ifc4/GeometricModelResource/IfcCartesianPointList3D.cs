// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 10:21:06
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.GeometricModelResource
{
	[EntityName("IFCCARTESIANPOINTLIST3D", 78)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcCartesianPointList3D : IfcCartesianPointList, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCartesianPointList3D(IModel model) : base(model) 		{ 
			Model = model; 
			_coordList = new ItemSet<ItemSet<IfcLengthMeasure>>( this );
		}

		#region Explicit attribute fields
		private ItemSet<ItemSet<IfcLengthMeasure>> _coordList;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public ItemSet<ItemSet<IfcLengthMeasure>> @CoordList 
		{ 
			get 
			{
				if(Activated) return _coordList;
				
				Model.Activate(this, true);
				Activated = true;
				return _coordList;
			} 
			set
			{
				SetValue( v =>  _coordList = v, _coordList, value,  "CoordList");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					//this is a special case which has to be handled in a partial class which is not generated.
					//ParseCoordList(propIndex, value);
					//return;
					throw new System.NotImplementedException("CoordList in IfcCartesianPointList3D is a special case of nested lists. It is not implemented for now.");
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}