// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:24
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometricModelResource
{
	[EntityName("IFCSWEPTDISKSOLIDPOLYGONAL", 677)]
	public  partial class @IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSweptDiskSolidPolygonal(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure? _filletRadius;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @FilletRadius 
		{ 
			get 
			{
				if(Activated) return _filletRadius;
				
				Model.Activate(this, true);
				Activated = true;
				return _filletRadius;
			} 
			set
			{
				SetValue( v =>  _filletRadius = v, _filletRadius, value,  "FilletRadius");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Directrix",
			"Radius",
			"InnerRadius",
			"StartParam",
			"EndParam",
			"FilletRadius",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Directrix;
				case 1: 
					return @Radius;
				case 2: 
					return @InnerRadius;
				case 3: 
					return @StartParam;
				case 4: 
					return @EndParam;
				case 5: 
					return @FilletRadius;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Directrix":  
					return @Directrix;
				case "Radius":  
					return @Radius;
				case "InnerRadius":  
					return @InnerRadius;
				case "StartParam":  
					return @StartParam;
				case "EndParam":  
					return @EndParam;
				case "FilletRadius":  
					return @FilletRadius;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Directrix = (IfcCurve)value;
					 break;
				case 1:
					 if (value != null) @Radius = (IfcPositiveLengthMeasure)value;
					 break;
				case 2:
					 @InnerRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case 3:
					 @StartParam = (IfcParameterValue?)value;
					 break;
				case 4:
					 @EndParam = (IfcParameterValue?)value;
					 break;
				case 5:
					 @FilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Directrix":
					 @Directrix = (IfcCurve)value;
					 break;
				case "Radius":
					 if (value != null) @Radius = (IfcPositiveLengthMeasure)value;
					 break;
				case "InnerRadius":
					 @InnerRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				case "StartParam":
					 @StartParam = (IfcParameterValue?)value;
					 break;
				case "EndParam":
					 @EndParam = (IfcParameterValue?)value;
					 break;
				case "FilletRadius":
					 @FilletRadius = (IfcPositiveLengthMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*CorrectRadii:	CorrectRadii : NOT(EXISTS(FilletRadius)) OR (FilletRadius >= SELF\IfcSweptDiskSolid.Radius);*/
		/*DirectrixIsPolyline:	DirectrixIsPolyline : 'IFC4.IFCPOLYLINE' IN TYPEOF(SELF\IfcSweptDiskSolid.Directrix);*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}