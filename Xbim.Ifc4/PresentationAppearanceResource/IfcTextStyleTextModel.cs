// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:44
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCTEXTSTYLETEXTMODEL", 706)]
	public  partial class @IfcTextStyleTextModel : IfcPresentationItem, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTextStyleTextModel(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSizeSelect _textIndent;
		private IfcTextAlignment? _textAlign;
		private IfcTextDecoration? _textDecoration;
		private IfcSizeSelect _letterSpacing;
		private IfcSizeSelect _wordSpacing;
		private IfcTextTransformation? _textTransform;
		private IfcSizeSelect _lineHeight;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Optional)]
		public IfcSizeSelect @TextIndent 
		{ 
			get 
			{
				if(Activated) return _textIndent;
				
				Model.Activate(this, true);
				Activated = true;
				return _textIndent;
			} 
			set
			{
				SetValue( v =>  _textIndent = v, _textIndent, value,  "TextIndent");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcTextAlignment? @TextAlign 
		{ 
			get 
			{
				if(Activated) return _textAlign;
				
				Model.Activate(this, true);
				Activated = true;
				return _textAlign;
			} 
			set
			{
				SetValue( v =>  _textAlign = v, _textAlign, value,  "TextAlign");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcTextDecoration? @TextDecoration 
		{ 
			get 
			{
				if(Activated) return _textDecoration;
				
				Model.Activate(this, true);
				Activated = true;
				return _textDecoration;
			} 
			set
			{
				SetValue( v =>  _textDecoration = v, _textDecoration, value,  "TextDecoration");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcSizeSelect @LetterSpacing 
		{ 
			get 
			{
				if(Activated) return _letterSpacing;
				
				Model.Activate(this, true);
				Activated = true;
				return _letterSpacing;
			} 
			set
			{
				SetValue( v =>  _letterSpacing = v, _letterSpacing, value,  "LetterSpacing");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcSizeSelect @WordSpacing 
		{ 
			get 
			{
				if(Activated) return _wordSpacing;
				
				Model.Activate(this, true);
				Activated = true;
				return _wordSpacing;
			} 
			set
			{
				SetValue( v =>  _wordSpacing = v, _wordSpacing, value,  "WordSpacing");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcTextTransformation? @TextTransform 
		{ 
			get 
			{
				if(Activated) return _textTransform;
				
				Model.Activate(this, true);
				Activated = true;
				return _textTransform;
			} 
			set
			{
				SetValue( v =>  _textTransform = v, _textTransform, value,  "TextTransform");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcSizeSelect @LineHeight 
		{ 
			get 
			{
				if(Activated) return _lineHeight;
				
				Model.Activate(this, true);
				Activated = true;
				return _lineHeight;
			} 
			set
			{
				SetValue( v =>  _lineHeight = v, _lineHeight, value,  "LineHeight");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"TextIndent",
			"TextAlign",
			"TextDecoration",
			"LetterSpacing",
			"WordSpacing",
			"TextTransform",
			"LineHeight",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @TextIndent;
				case 1: 
					return @TextAlign;
				case 2: 
					return @TextDecoration;
				case 3: 
					return @LetterSpacing;
				case 4: 
					return @WordSpacing;
				case 5: 
					return @TextTransform;
				case 6: 
					return @LineHeight;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "TextIndent":  
					return @TextIndent;
				case "TextAlign":  
					return @TextAlign;
				case "TextDecoration":  
					return @TextDecoration;
				case "LetterSpacing":  
					return @LetterSpacing;
				case "WordSpacing":  
					return @WordSpacing;
				case "TextTransform":  
					return @TextTransform;
				case "LineHeight":  
					return @LineHeight;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @TextIndent = (IfcSizeSelect)value;
					 break;
				case 1:
					 @TextAlign = (IfcTextAlignment?)value;
					 break;
				case 2:
					 @TextDecoration = (IfcTextDecoration?)value;
					 break;
				case 3:
					 @LetterSpacing = (IfcSizeSelect)value;
					 break;
				case 4:
					 @WordSpacing = (IfcSizeSelect)value;
					 break;
				case 5:
					 @TextTransform = (IfcTextTransformation?)value;
					 break;
				case 6:
					 @LineHeight = (IfcSizeSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "TextIndent":
					 @TextIndent = (IfcSizeSelect)value;
					 break;
				case "TextAlign":
					 @TextAlign = (IfcTextAlignment?)value;
					 break;
				case "TextDecoration":
					 @TextDecoration = (IfcTextDecoration?)value;
					 break;
				case "LetterSpacing":
					 @LetterSpacing = (IfcSizeSelect)value;
					 break;
				case "WordSpacing":
					 @WordSpacing = (IfcSizeSelect)value;
					 break;
				case "TextTransform":
					 @TextTransform = (IfcTextTransformation?)value;
					 break;
				case "LineHeight":
					 @LineHeight = (IfcSizeSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}