// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:44:05
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using Xbim.Ifc4.GeometricModelResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCINDEXEDCOLOURMAP", 316)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcIndexedColourMap : IfcPresentationItem, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcIndexedColourMap(IModel model) : base(model) 		{ 
			Model = model; 
			_colourIndex = new ItemSet<long>( this );
		}

		#region Explicit attribute fields
		private IfcTessellatedFaceSet _mappedTo;
		private IfcSurfaceStyleShading _overrides;
		private IfcColourRgbList _colours;
		private ItemSet<long> _colourIndex;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcTessellatedFaceSet @MappedTo 
		{ 
			get 
			{
				if(Activated) return _mappedTo;
				
				Model.Activate(this, true);
				Activated = true;
				return _mappedTo;
			} 
			set
			{
				SetValue( v =>  _mappedTo = v, _mappedTo, value,  "MappedTo");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcSurfaceStyleShading @Overrides 
		{ 
			get 
			{
				if(Activated) return _overrides;
				
				Model.Activate(this, true);
				Activated = true;
				return _overrides;
			} 
			set
			{
				SetValue( v =>  _overrides = v, _overrides, value,  "Overrides");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcColourRgbList @Colours 
		{ 
			get 
			{
				if(Activated) return _colours;
				
				Model.Activate(this, true);
				Activated = true;
				return _colours;
			} 
			set
			{
				SetValue( v =>  _colours = v, _colours, value,  "Colours");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public ItemSet<long> @ColourIndex 
		{ 
			get 
			{
				if(Activated) return _colourIndex;
				
				Model.Activate(this, true);
				Activated = true;
				return _colourIndex;
			} 
			set
			{
				SetValue( v =>  _colourIndex = v, _colourIndex, value,  "ColourIndex");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_mappedTo = (IfcTessellatedFaceSet)(value.EntityVal);
					return;
				case 1: 
					_overrides = (IfcSurfaceStyleShading)(value.EntityVal);
					return;
				case 2: 
					_colours = (IfcColourRgbList)(value.EntityVal);
					return;
				case 3: 
					if (_colourIndex == null) _colourIndex = new ItemSet<long>( this );
					_colourIndex.InternalAdd(value.IntegerVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}