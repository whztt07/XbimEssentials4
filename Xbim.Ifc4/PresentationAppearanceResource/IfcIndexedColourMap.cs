// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:39
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using Xbim.Ifc4.GeometricModelResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCINDEXEDCOLOURMAP", 316)]
	public  partial class @IfcIndexedColourMap : IfcPresentationItem, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcIndexedColourMap(IModel model) : base(model) 		{ 
			Model = model; 
			_colourIndex = new ItemSet<long>( model );
		}

		#region Explicit attribute fields
		private IfcTessellatedFaceSet _mappedTo;
		private IfcSurfaceStyleShading _overrides;
		private IfcColourRgbList _colours;
		private ItemSet<long> _colourIndex;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcTessellatedFaceSet @MappedTo 
		{ 
			get 
			{
				if(Activated) return _mappedTo;
				
				Model.Activate(this, true);
				Activated = true;
				return _mappedTo;
			} 
			set
			{
				SetValue( v =>  _mappedTo = v, _mappedTo, value,  "MappedTo");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcSurfaceStyleShading @Overrides 
		{ 
			get 
			{
				if(Activated) return _overrides;
				
				Model.Activate(this, true);
				Activated = true;
				return _overrides;
			} 
			set
			{
				SetValue( v =>  _overrides = v, _overrides, value,  "Overrides");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcColourRgbList @Colours 
		{ 
			get 
			{
				if(Activated) return _colours;
				
				Model.Activate(this, true);
				Activated = true;
				return _colours;
			} 
			set
			{
				SetValue( v =>  _colours = v, _colours, value,  "Colours");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public ItemSet<long> @ColourIndex 
		{ 
			get 
			{
				if(Activated) return _colourIndex;
				
				Model.Activate(this, true);
				Activated = true;
				return _colourIndex;
			} 
			set
			{
				SetValue( v =>  _colourIndex = v, _colourIndex, value,  "ColourIndex");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"MappedTo",
			"Overrides",
			"Colours",
			"ColourIndex",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @MappedTo;
				case 1: 
					return @Overrides;
				case 2: 
					return @Colours;
				case 3: 
					return @ColourIndex;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "MappedTo":  
					return @MappedTo;
				case "Overrides":  
					return @Overrides;
				case "Colours":  
					return @Colours;
				case "ColourIndex":  
					return @ColourIndex;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @MappedTo = (IfcTessellatedFaceSet)value;
					 break;
				case 1:
					 @Overrides = (IfcSurfaceStyleShading)value;
					 break;
				case 2:
					 @Colours = (IfcColourRgbList)value;
					 break;
				case 3:
					 @ColourIndex.Add((long)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "MappedTo":
					 @MappedTo = (IfcTessellatedFaceSet)value;
					 break;
				case "Overrides":
					 @Overrides = (IfcSurfaceStyleShading)value;
					 break;
				case "Colours":
					 @Colours = (IfcColourRgbList)value;
					 break;
				case "ColourIndex":
					 @ColourIndex.Add((long)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}