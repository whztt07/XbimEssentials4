// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:24
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCSURFACESTYLELIGHTING", 669)]
	public  partial class @IfcSurfaceStyleLighting : IfcPresentationItem, IfcSurfaceStyleElementSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSurfaceStyleLighting(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcColourRgb _diffuseTransmissionColour;
		private IfcColourRgb _diffuseReflectionColour;
		private IfcColourRgb _transmissionColour;
		private IfcColourRgb _reflectanceColour;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcColourRgb @DiffuseTransmissionColour 
		{ 
			get 
			{
				if(Activated) return _diffuseTransmissionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _diffuseTransmissionColour;
			} 
			set
			{
				SetValue( v =>  _diffuseTransmissionColour = v, _diffuseTransmissionColour, value,  "DiffuseTransmissionColour");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcColourRgb @DiffuseReflectionColour 
		{ 
			get 
			{
				if(Activated) return _diffuseReflectionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _diffuseReflectionColour;
			} 
			set
			{
				SetValue( v =>  _diffuseReflectionColour = v, _diffuseReflectionColour, value,  "DiffuseReflectionColour");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcColourRgb @TransmissionColour 
		{ 
			get 
			{
				if(Activated) return _transmissionColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _transmissionColour;
			} 
			set
			{
				SetValue( v =>  _transmissionColour = v, _transmissionColour, value,  "TransmissionColour");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcColourRgb @ReflectanceColour 
		{ 
			get 
			{
				if(Activated) return _reflectanceColour;
				
				Model.Activate(this, true);
				Activated = true;
				return _reflectanceColour;
			} 
			set
			{
				SetValue( v =>  _reflectanceColour = v, _reflectanceColour, value,  "ReflectanceColour");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"DiffuseTransmissionColour",
			"DiffuseReflectionColour",
			"TransmissionColour",
			"ReflectanceColour",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @DiffuseTransmissionColour;
				case 1: 
					return @DiffuseReflectionColour;
				case 2: 
					return @TransmissionColour;
				case 3: 
					return @ReflectanceColour;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "DiffuseTransmissionColour":  
					return @DiffuseTransmissionColour;
				case "DiffuseReflectionColour":  
					return @DiffuseReflectionColour;
				case "TransmissionColour":  
					return @TransmissionColour;
				case "ReflectanceColour":  
					return @ReflectanceColour;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @DiffuseTransmissionColour = (IfcColourRgb)value;
					 break;
				case 1:
					 @DiffuseReflectionColour = (IfcColourRgb)value;
					 break;
				case 2:
					 @TransmissionColour = (IfcColourRgb)value;
					 break;
				case 3:
					 @ReflectanceColour = (IfcColourRgb)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "DiffuseTransmissionColour":
					 @DiffuseTransmissionColour = (IfcColourRgb)value;
					 break;
				case "DiffuseReflectionColour":
					 @DiffuseReflectionColour = (IfcColourRgb)value;
					 break;
				case "TransmissionColour":
					 @TransmissionColour = (IfcColourRgb)value;
					 break;
				case "ReflectanceColour":
					 @ReflectanceColour = (IfcColourRgb)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}