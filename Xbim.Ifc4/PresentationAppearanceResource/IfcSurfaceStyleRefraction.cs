// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:44
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCSURFACESTYLEREFRACTION", 670)]
	public  partial class @IfcSurfaceStyleRefraction : IfcPresentationItem, IfcSurfaceStyleElementSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSurfaceStyleRefraction(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcReal? _refractionIndex;
		private IfcReal? _dispersionFactor;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Optional)]
		public IfcReal? @RefractionIndex 
		{ 
			get 
			{
				if(Activated) return _refractionIndex;
				
				Model.Activate(this, true);
				Activated = true;
				return _refractionIndex;
			} 
			set
			{
				SetValue( v =>  _refractionIndex = v, _refractionIndex, value,  "RefractionIndex");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcReal? @DispersionFactor 
		{ 
			get 
			{
				if(Activated) return _dispersionFactor;
				
				Model.Activate(this, true);
				Activated = true;
				return _dispersionFactor;
			} 
			set
			{
				SetValue( v =>  _dispersionFactor = v, _dispersionFactor, value,  "DispersionFactor");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"RefractionIndex",
			"DispersionFactor",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @RefractionIndex;
				case 1: 
					return @DispersionFactor;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "RefractionIndex":  
					return @RefractionIndex;
				case "DispersionFactor":  
					return @DispersionFactor;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @RefractionIndex = (IfcReal?)value;
					 break;
				case 1:
					 @DispersionFactor = (IfcReal?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "RefractionIndex":
					 @RefractionIndex = (IfcReal?)value;
					 break;
				case "DispersionFactor":
					 @DispersionFactor = (IfcReal?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}