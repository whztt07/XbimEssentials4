// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:44:04
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[EntityName("IFCFILLAREASTYLEHATCHING", 267)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcFillAreaStyleHatching : IfcGeometricRepresentationItem, IfcFillStyleSelect, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcFillAreaStyleHatching(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCurveStyle _hatchLineAppearance;
		private IfcHatchLineDistanceSelect _startOfNextHatchLine;
		private IfcCartesianPoint _pointOfReferenceHatchLine;
		private IfcCartesianPoint _patternStart;
		private IfcPlaneAngleMeasure _hatchLineAngle;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(0, EntityAttributeState.Mandatory)]
		public IfcCurveStyle @HatchLineAppearance 
		{ 
			get 
			{
				if(Activated) return _hatchLineAppearance;
				
				Model.Activate(this, true);
				Activated = true;
				return _hatchLineAppearance;
			} 
			set
			{
				SetValue( v =>  _hatchLineAppearance = v, _hatchLineAppearance, value,  "HatchLineAppearance");
			} 
		}
	
		[EntityAttributee(1, EntityAttributeState.Mandatory)]
		public IfcHatchLineDistanceSelect @StartOfNextHatchLine 
		{ 
			get 
			{
				if(Activated) return _startOfNextHatchLine;
				
				Model.Activate(this, true);
				Activated = true;
				return _startOfNextHatchLine;
			} 
			set
			{
				SetValue( v =>  _startOfNextHatchLine = v, _startOfNextHatchLine, value,  "StartOfNextHatchLine");
			} 
		}
	
		[EntityAttributee(2, EntityAttributeState.Optional)]
		public IfcCartesianPoint @PointOfReferenceHatchLine 
		{ 
			get 
			{
				if(Activated) return _pointOfReferenceHatchLine;
				
				Model.Activate(this, true);
				Activated = true;
				return _pointOfReferenceHatchLine;
			} 
			set
			{
				SetValue( v =>  _pointOfReferenceHatchLine = v, _pointOfReferenceHatchLine, value,  "PointOfReferenceHatchLine");
			} 
		}
	
		[EntityAttributee(3, EntityAttributeState.Optional)]
		public IfcCartesianPoint @PatternStart 
		{ 
			get 
			{
				if(Activated) return _patternStart;
				
				Model.Activate(this, true);
				Activated = true;
				return _patternStart;
			} 
			set
			{
				SetValue( v =>  _patternStart = v, _patternStart, value,  "PatternStart");
			} 
		}
	
		[EntityAttributee(4, EntityAttributeState.Mandatory)]
		public IfcPlaneAngleMeasure @HatchLineAngle 
		{ 
			get 
			{
				if(Activated) return _hatchLineAngle;
				
				Model.Activate(this, true);
				Activated = true;
				return _hatchLineAngle;
			} 
			set
			{
				SetValue( v =>  _hatchLineAngle = v, _hatchLineAngle, value,  "HatchLineAngle");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_hatchLineAppearance = (IfcCurveStyle)(value.EntityVal);
					return;
				case 1: 
					_startOfNextHatchLine = (IfcHatchLineDistanceSelect)(value.EntityVal);
					return;
				case 2: 
					_pointOfReferenceHatchLine = (IfcCartesianPoint)(value.EntityVal);
					return;
				case 3: 
					_patternStart = (IfcCartesianPoint)(value.EntityVal);
					return;
				case 4: 
					_hatchLineAngle = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		/*PatternStart2D:	PatternStart2D : NOT(EXISTS(PatternStart)) OR (PatternStart.Dim = 2);*/
		/*RefHatchLine2D:	RefHatchLine2D : NOT(EXISTS(PointOfReferenceHatchLine)) OR (PointOfReferenceHatchLine.Dim = 2);*/
		}
		#endregion
	}
}