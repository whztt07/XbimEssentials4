// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		21.09.2015 05:11:18
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.GeometricConstraintResource
{
	[IndexedClass]
	[ExpressType("IFCCONNECTIONVOLUMEGEOMETRY", 515)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcConnectionVolumeGeometry : IfcConnectionGeometry, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcConnectionVolumeGeometry(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcSolidOrShell _volumeOnRelatingElement;
		private IfcSolidOrShell _volumeOnRelatedElement;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcSolidOrShell @VolumeOnRelatingElement 
		{ 
			get 
			{
				if(Activated) return _volumeOnRelatingElement;
				
				Model.Activate(this, true);
				Activated = true;
				return _volumeOnRelatingElement;
			} 
			set
			{
				SetValue( v =>  _volumeOnRelatingElement = v, _volumeOnRelatingElement, value,  "VolumeOnRelatingElement");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcSolidOrShell @VolumeOnRelatedElement 
		{ 
			get 
			{
				if(Activated) return _volumeOnRelatedElement;
				
				Model.Activate(this, true);
				Activated = true;
				return _volumeOnRelatedElement;
			} 
			set
			{
				SetValue( v =>  _volumeOnRelatedElement = v, _volumeOnRelatedElement, value,  "VolumeOnRelatedElement");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_volumeOnRelatingElement = (IfcSolidOrShell)(value.EntityVal);
					return;
				case 1: 
					_volumeOnRelatedElement = (IfcSolidOrShell)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}