// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		22.09.2015 02:32:04
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.GeometricConstraintResource
{
	[IndexedClass]
	[ExpressType("IFCCONNECTIONPOINTECCENTRICITY", 512)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcConnectionPointEccentricity : IfcConnectionPointGeometry, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcConnectionPointEccentricity(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLengthMeasure? _eccentricityInX;
		private IfcLengthMeasure? _eccentricityInY;
		private IfcLengthMeasure? _eccentricityInZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcLengthMeasure? @EccentricityInX 
		{ 
			get 
			{
				if(Activated) return _eccentricityInX;
				
				Model.Activate(this, true);
				Activated = true;
				return _eccentricityInX;
			} 
			set
			{
				SetValue( v =>  _eccentricityInX = v, _eccentricityInX, value,  "EccentricityInX");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcLengthMeasure? @EccentricityInY 
		{ 
			get 
			{
				if(Activated) return _eccentricityInY;
				
				Model.Activate(this, true);
				Activated = true;
				return _eccentricityInY;
			} 
			set
			{
				SetValue( v =>  _eccentricityInY = v, _eccentricityInY, value,  "EccentricityInY");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1)]
		public IfcLengthMeasure? @EccentricityInZ 
		{ 
			get 
			{
				if(Activated) return _eccentricityInZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _eccentricityInZ;
			} 
			set
			{
				SetValue( v =>  _eccentricityInZ = v, _eccentricityInZ, value,  "EccentricityInZ");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
					base.Parse(propIndex, value); 
					return;
				case 2: 
					_eccentricityInX = value.RealVal;
					return;
				case 3: 
					_eccentricityInY = value.RealVal;
					return;
				case 4: 
					_eccentricityInZ = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}