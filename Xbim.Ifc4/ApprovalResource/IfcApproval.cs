// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:36
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using Xbim.Ifc4.ActorResource;
using Xbim.Ifc4.ControlExtension;
using System.Collections.Generic;
using System.ComponentModel;
using System;
using Xbim.Common;

namespace Xbim.Ifc4.ApprovalResource
{
	[EntityName("IFCAPPROVAL", 21)]
	public  partial class @IfcApproval : INotifyPropertyChanged, IfcResourceObjectSelect, IInstantiableEntity
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; internal set;}
		
		public IModel Model { get; internal set; }
		
		public bool Activated { get; internal set; }

		public void Activate(bool write)
		{
			if (Activated) return; //activation can only happen once in a lifetime of the object

			Model.Activate(this, write);
			Activated = true;
		}

		public void Activate (Action activation)
		{
			activation();
			Activated = true;
		}
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcApproval(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcIdentifier? _identifier;
		private IfcLabel? _name;
		private IfcText? _description;
		private IfcDateTime? _timeOfApproval;
		private IfcLabel? _status;
		private IfcLabel? _level;
		private IfcText? _qualifier;
		private IfcActorSelect _requestingApproval;
		private IfcActorSelect _givingApproval;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Optional)]
		public IfcIdentifier? @Identifier 
		{ 
			get 
			{
				if(Activated) return _identifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _identifier;
			} 
			set
			{
				SetValue( v =>  _identifier = v, _identifier, value,  "Identifier");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcLabel? @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcDateTime? @TimeOfApproval 
		{ 
			get 
			{
				if(Activated) return _timeOfApproval;
				
				Model.Activate(this, true);
				Activated = true;
				return _timeOfApproval;
			} 
			set
			{
				SetValue( v =>  _timeOfApproval = v, _timeOfApproval, value,  "TimeOfApproval");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcLabel? @Status 
		{ 
			get 
			{
				if(Activated) return _status;
				
				Model.Activate(this, true);
				Activated = true;
				return _status;
			} 
			set
			{
				SetValue( v =>  _status = v, _status, value,  "Status");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcLabel? @Level 
		{ 
			get 
			{
				if(Activated) return _level;
				
				Model.Activate(this, true);
				Activated = true;
				return _level;
			} 
			set
			{
				SetValue( v =>  _level = v, _level, value,  "Level");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcText? @Qualifier 
		{ 
			get 
			{
				if(Activated) return _qualifier;
				
				Model.Activate(this, true);
				Activated = true;
				return _qualifier;
			} 
			set
			{
				SetValue( v =>  _qualifier = v, _qualifier, value,  "Qualifier");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcActorSelect @RequestingApproval 
		{ 
			get 
			{
				if(Activated) return _requestingApproval;
				
				Model.Activate(this, true);
				Activated = true;
				return _requestingApproval;
			} 
			set
			{
				SetValue( v =>  _requestingApproval = v, _requestingApproval, value,  "RequestingApproval");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcActorSelect @GivingApproval 
		{ 
			get 
			{
				if(Activated) return _givingApproval;
				
				Model.Activate(this, true);
				Activated = true;
				return _givingApproval;
			} 
			set
			{
				SetValue( v =>  _givingApproval = v, _givingApproval, value,  "GivingApproval");
			} 
		}
	
		#endregion

		#region Inverse attributes
		public IEnumerable<IfcExternalReferenceRelationship> @HasExternalReferences 
		{ 
			get 
			{
				return Model.Instances.Where<IfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this));
			} 
		}
	
		public IEnumerable<IfcRelAssociatesApproval> @ApprovedObjects 
		{ 
			get 
			{
				return Model.Instances.Where<IfcRelAssociatesApproval>(e => e.RelatingApproval == this);
			} 
		}
	
		public IEnumerable<IfcResourceApprovalRelationship> @ApprovedResources 
		{ 
			get 
			{
				return Model.Instances.Where<IfcResourceApprovalRelationship>(e => e.RelatingApproval == this);
			} 
		}
	
		public IEnumerable<IfcApprovalRelationship> @IsRelatedWith 
		{ 
			get 
			{
				return Model.Instances.Where<IfcApprovalRelationship>(e => e.RelatedApprovals != null &&  e.RelatedApprovals.Contains(this));
			} 
		}
	
		public IEnumerable<IfcApprovalRelationship> @Relates 
		{ 
			get 
			{
				return Model.Instances.Where<IfcApprovalRelationship>(e => e.RelatingApproval == this);
			} 
		}
	

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Identifier",
			"Name",
			"Description",
			"TimeOfApproval",
			"Status",
			"Level",
			"Qualifier",
			"RequestingApproval",
			"GivingApproval",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Identifier;
				case 1: 
					return @Name;
				case 2: 
					return @Description;
				case 3: 
					return @TimeOfApproval;
				case 4: 
					return @Status;
				case 5: 
					return @Level;
				case 6: 
					return @Qualifier;
				case 7: 
					return @RequestingApproval;
				case 8: 
					return @GivingApproval;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Identifier":  
					return @Identifier;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "TimeOfApproval":  
					return @TimeOfApproval;
				case "Status":  
					return @Status;
				case "Level":  
					return @Level;
				case "Qualifier":  
					return @Qualifier;
				case "RequestingApproval":  
					return @RequestingApproval;
				case "GivingApproval":  
					return @GivingApproval;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Identifier = (IfcIdentifier?)value;
					 break;
				case 1:
					 @Name = (IfcLabel?)value;
					 break;
				case 2:
					 @Description = (IfcText?)value;
					 break;
				case 3:
					 @TimeOfApproval = (IfcDateTime?)value;
					 break;
				case 4:
					 @Status = (IfcLabel?)value;
					 break;
				case 5:
					 @Level = (IfcLabel?)value;
					 break;
				case 6:
					 @Qualifier = (IfcText?)value;
					 break;
				case 7:
					 @RequestingApproval = (IfcActorSelect)value;
					 break;
				case 8:
					 @GivingApproval = (IfcActorSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Identifier":
					 @Identifier = (IfcIdentifier?)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "TimeOfApproval":
					 @TimeOfApproval = (IfcDateTime?)value;
					 break;
				case "Status":
					 @Status = (IfcLabel?)value;
					 break;
				case "Level":
					 @Level = (IfcLabel?)value;
					 break;
				case "Qualifier":
					 @Qualifier = (IfcText?)value;
					 break;
				case "RequestingApproval":
					 @RequestingApproval = (IfcActorSelect)value;
					 break;
				case "GivingApproval":
					 @GivingApproval = (IfcActorSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*HasIdentifierOrName:	HasIdentifierOrName : EXISTS (Identifier) OR EXISTS (Name);*/
		#endregion

		#region IPersist implementation
		public virtual void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public virtual string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}