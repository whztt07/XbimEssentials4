// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:44:06
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PropertyResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.ProfileResource
{
	[EntityName("IFCREINFORCEMENTBARPROPERTIES", 502)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcReinforcementBarProperties : IfcPreDefinedProperties, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcReinforcementBarProperties(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcAreaMeasure _totalCrossSectionArea;
		private IfcLabel _steelGrade;
		private IfcReinforcingBarSurfaceEnum? _barSurface;
		private IfcLengthMeasure? _effectiveDepth;
		private IfcPositiveLengthMeasure? _nominalBarDiameter;
		private IfcCountMeasure? _barCount;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttributee(0, EntityAttributeState.Mandatory)]
		public IfcAreaMeasure @TotalCrossSectionArea 
		{ 
			get 
			{
				if(Activated) return _totalCrossSectionArea;
				
				Model.Activate(this, true);
				Activated = true;
				return _totalCrossSectionArea;
			} 
			set
			{
				SetValue( v =>  _totalCrossSectionArea = v, _totalCrossSectionArea, value,  "TotalCrossSectionArea");
			} 
		}
	
		[EntityAttributee(1, EntityAttributeState.Mandatory)]
		public IfcLabel @SteelGrade 
		{ 
			get 
			{
				if(Activated) return _steelGrade;
				
				Model.Activate(this, true);
				Activated = true;
				return _steelGrade;
			} 
			set
			{
				SetValue( v =>  _steelGrade = v, _steelGrade, value,  "SteelGrade");
			} 
		}
	
		[EntityAttributee(2, EntityAttributeState.Optional)]
		public IfcReinforcingBarSurfaceEnum? @BarSurface 
		{ 
			get 
			{
				if(Activated) return _barSurface;
				
				Model.Activate(this, true);
				Activated = true;
				return _barSurface;
			} 
			set
			{
				SetValue( v =>  _barSurface = v, _barSurface, value,  "BarSurface");
			} 
		}
	
		[EntityAttributee(3, EntityAttributeState.Optional)]
		public IfcLengthMeasure? @EffectiveDepth 
		{ 
			get 
			{
				if(Activated) return _effectiveDepth;
				
				Model.Activate(this, true);
				Activated = true;
				return _effectiveDepth;
			} 
			set
			{
				SetValue( v =>  _effectiveDepth = v, _effectiveDepth, value,  "EffectiveDepth");
			} 
		}
	
		[EntityAttributee(4, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @NominalBarDiameter 
		{ 
			get 
			{
				if(Activated) return _nominalBarDiameter;
				
				Model.Activate(this, true);
				Activated = true;
				return _nominalBarDiameter;
			} 
			set
			{
				SetValue( v =>  _nominalBarDiameter = v, _nominalBarDiameter, value,  "NominalBarDiameter");
			} 
		}
	
		[EntityAttributee(5, EntityAttributeState.Optional)]
		public IfcCountMeasure? @BarCount 
		{ 
			get 
			{
				if(Activated) return _barCount;
				
				Model.Activate(this, true);
				Activated = true;
				return _barCount;
			} 
			set
			{
				SetValue( v =>  _barCount = v, _barCount, value,  "BarCount");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_totalCrossSectionArea = value.RealVal;
					return;
				case 1: 
					_steelGrade = value.StringVal;
					return;
				case 2: 
                    _barSurface = (IfcReinforcingBarSurfaceEnum) System.Enum.Parse(typeof (IfcReinforcingBarSurfaceEnum), value.EnumVal, true);
					return;
				case 3: 
					_effectiveDepth = value.RealVal;
					return;
				case 4: 
					_nominalBarDiameter = value.RealVal;
					return;
				case 5: 
					_barCount = value.NumberVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}