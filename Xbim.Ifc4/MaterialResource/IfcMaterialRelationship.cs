// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.MaterialResource
{
	[EntityName("IFCMATERIALRELATIONSHIP", 367)]
	public  partial class @IfcMaterialRelationship : IfcResourceLevelRelationship, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMaterialRelationship(IModel model) : base(model) 		{ 
			Model = model; 
			_relatedMaterials = new ItemSet<IfcMaterial>( model );
		}

		#region Explicit attribute fields
		private IfcMaterial _relatingMaterial;
		private ItemSet<IfcMaterial> _relatedMaterials;
		private IfcLabel? _expression;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Mandatory)]
		public IfcMaterial @RelatingMaterial 
		{ 
			get 
			{
				if(Activated) return _relatingMaterial;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatingMaterial;
			} 
			set
			{
				SetValue( v =>  _relatingMaterial = v, _relatingMaterial, value,  "RelatingMaterial");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public ItemSet<IfcMaterial> @RelatedMaterials 
		{ 
			get 
			{
				if(Activated) return _relatedMaterials;
				
				Model.Activate(this, true);
				Activated = true;
				return _relatedMaterials;
			} 
			set
			{
				SetValue( v =>  _relatedMaterials = v, _relatedMaterials, value,  "RelatedMaterials");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcLabel? @Expression 
		{ 
			get 
			{
				if(Activated) return _expression;
				
				Model.Activate(this, true);
				Activated = true;
				return _expression;
			} 
			set
			{
				SetValue( v =>  _expression = v, _expression, value,  "Expression");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"RelatingMaterial",
			"RelatedMaterials",
			"Expression",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @RelatingMaterial;
				case 3: 
					return @RelatedMaterials;
				case 4: 
					return @Expression;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "RelatingMaterial":  
					return @RelatingMaterial;
				case "RelatedMaterials":  
					return @RelatedMaterials;
				case "Expression":  
					return @Expression;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @RelatingMaterial = (IfcMaterial)value;
					 break;
				case 3:
					 @RelatedMaterials.Add((IfcMaterial)value);
					 break;
				case 4:
					 @Expression = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "RelatingMaterial":
					 @RelatingMaterial = (IfcMaterial)value;
					 break;
				case "RelatedMaterials":
					 @RelatedMaterials.Add((IfcMaterial)value);
					 break;
				case "Expression":
					 @Expression = (IfcLabel?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}