// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 03:44:05
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.MaterialResource
{
	[EntityName("IFCMATERIALCONSTITUENTSET", 353)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMaterialConstituentSet : IfcMaterialDefinition, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMaterialConstituentSet(IModel model) : base(model) 		{ 
			Model = model; 
			_materialConstituents = new ItemSet<IfcMaterialConstituent>( this );
		}

		#region Explicit attribute fields
		private IfcLabel? _name;
		private IfcText? _description;
		private ItemSet<IfcMaterialConstituent> _materialConstituents;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Optional)]
		public IfcLabel? @Name 
		{ 
			get 
			{
				if(Activated) return _name;
				
				Model.Activate(this, true);
				Activated = true;
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(Activated) return _description;
				
				Model.Activate(this, true);
				Activated = true;
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public ItemSet<IfcMaterialConstituent> @MaterialConstituents 
		{ 
			get 
			{
				if(Activated) return _materialConstituents;
				
				Model.Activate(this, true);
				Activated = true;
				return _materialConstituents;
			} 
			set
			{
				SetValue( v =>  _materialConstituents = v, _materialConstituents, value,  "MaterialConstituents");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
					_name = value.StringVal;
					return;
				case 1: 
					_description = value.StringVal;
					return;
				case 2: 
					if (_materialConstituents == null) _materialConstituents = new ItemSet<IfcMaterialConstituent>( this );
					_materialConstituents.InternalAdd((IfcMaterialConstituent)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}