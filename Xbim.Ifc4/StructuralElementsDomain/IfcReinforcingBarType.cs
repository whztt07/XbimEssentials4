// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.ProfileResource;
using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.StructuralElementsDomain
{
	[EntityName("IFCREINFORCINGBARTYPE")]
	public  partial class @IfcReinforcingBarType : IfcReinforcingElementType, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcReinforcingBarType(IModel model) : base(model) 		{ 
			Model = model; 
			_bendingParameters = new ItemSet<IfcBendingParameterSelect>( model );
		}

		#region Explicit attribute fields
		private IfcReinforcingBarTypeEnum _predefinedType;
		private IfcPositiveLengthMeasure? _nominalDiameter;
		private IfcAreaMeasure? _crossSectionArea;
		private IfcPositiveLengthMeasure? _barLength;
		private IfcReinforcingBarSurfaceEnum _barSurface;
		private IfcLabel? _bendingShapeCode;
		private ItemSet<IfcBendingParameterSelect> _bendingParameters;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public IfcReinforcingBarTypeEnum @PredefinedType 
		{ 
			get 
			{
				if(IsActivated) return _predefinedType;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _predefinedType;
			} 
			set
			{
				SetValue( v =>  _predefinedType = v, _predefinedType, value,  "PredefinedType");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @NominalDiameter 
		{ 
			get 
			{
				if(IsActivated) return _nominalDiameter;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _nominalDiameter;
			} 
			set
			{
				SetValue( v =>  _nominalDiameter = v, _nominalDiameter, value,  "NominalDiameter");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcAreaMeasure? @CrossSectionArea 
		{ 
			get 
			{
				if(IsActivated) return _crossSectionArea;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _crossSectionArea;
			} 
			set
			{
				SetValue( v =>  _crossSectionArea = v, _crossSectionArea, value,  "CrossSectionArea");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcPositiveLengthMeasure? @BarLength 
		{ 
			get 
			{
				if(IsActivated) return _barLength;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _barLength;
			} 
			set
			{
				SetValue( v =>  _barLength = v, _barLength, value,  "BarLength");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public IfcReinforcingBarSurfaceEnum @BarSurface 
		{ 
			get 
			{
				if(IsActivated) return _barSurface;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _barSurface;
			} 
			set
			{
				SetValue( v =>  _barSurface = v, _barSurface, value,  "BarSurface");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional)]
		public IfcLabel? @BendingShapeCode 
		{ 
			get 
			{
				if(IsActivated) return _bendingShapeCode;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _bendingShapeCode;
			} 
			set
			{
				SetValue( v =>  _bendingShapeCode = v, _bendingShapeCode, value,  "BendingShapeCode");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Optional)]
		public ItemSet<IfcBendingParameterSelect> @BendingParameters 
		{ 
			get 
			{
				if(IsActivated) return _bendingParameters;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _bendingParameters;
			} 
			set
			{
				SetValue( v =>  _bendingParameters = v, _bendingParameters, value,  "BendingParameters");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ApplicableOccurrence",
			"HasPropertySets",
			"RepresentationMaps",
			"Tag",
			"ElementType",
			"PredefinedType",
			"NominalDiameter",
			"CrossSectionArea",
			"BarLength",
			"BarSurface",
			"BendingShapeCode",
			"BendingParameters",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ApplicableOccurrence;
				case 5: 
					return @HasPropertySets;
				case 6: 
					return @RepresentationMaps;
				case 7: 
					return @Tag;
				case 8: 
					return @ElementType;
				case 9: 
					return @PredefinedType;
				case 10: 
					return @NominalDiameter;
				case 11: 
					return @CrossSectionArea;
				case 12: 
					return @BarLength;
				case 13: 
					return @BarSurface;
				case 14: 
					return @BendingShapeCode;
				case 15: 
					return @BendingParameters;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ApplicableOccurrence":  
					return @ApplicableOccurrence;
				case "HasPropertySets":  
					return @HasPropertySets;
				case "RepresentationMaps":  
					return @RepresentationMaps;
				case "Tag":  
					return @Tag;
				case "ElementType":  
					return @ElementType;
				case "PredefinedType":  
					return @PredefinedType;
				case "NominalDiameter":  
					return @NominalDiameter;
				case "CrossSectionArea":  
					return @CrossSectionArea;
				case "BarLength":  
					return @BarLength;
				case "BarSurface":  
					return @BarSurface;
				case "BendingShapeCode":  
					return @BendingShapeCode;
				case "BendingParameters":  
					return @BendingParameters;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ApplicableOccurrence = (IfcIdentifier?)value;
					 break;
				case 5:
					 @HasPropertySets.Add((IfcPropertySetDefinition)value);
					 break;
				case 6:
					 @RepresentationMaps.Add((IfcRepresentationMap)value);
					 break;
				case 7:
					 @Tag = (IfcLabel?)value;
					 break;
				case 8:
					 @ElementType = (IfcLabel?)value;
					 break;
				case 9:
					 if (value != null) @PredefinedType = (IfcReinforcingBarTypeEnum)value;
					 break;
				case 10:
					 @NominalDiameter = (IfcPositiveLengthMeasure?)value;
					 break;
				case 11:
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				case 12:
					 @BarLength = (IfcPositiveLengthMeasure?)value;
					 break;
				case 13:
					 @BarSurface = (IfcReinforcingBarSurfaceEnum)value;
					 break;
				case 14:
					 @BendingShapeCode = (IfcLabel?)value;
					 break;
				case 15:
					 @BendingParameters.Add((IfcBendingParameterSelect)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ApplicableOccurrence":
					 @ApplicableOccurrence = (IfcIdentifier?)value;
					 break;
				case "HasPropertySets":
					 @HasPropertySets.Add((IfcPropertySetDefinition)value);
					 break;
				case "RepresentationMaps":
					 @RepresentationMaps.Add((IfcRepresentationMap)value);
					 break;
				case "Tag":
					 @Tag = (IfcLabel?)value;
					 break;
				case "ElementType":
					 @ElementType = (IfcLabel?)value;
					 break;
				case "PredefinedType":
					 if (value != null) @PredefinedType = (IfcReinforcingBarTypeEnum)value;
					 break;
				case "NominalDiameter":
					 @NominalDiameter = (IfcPositiveLengthMeasure?)value;
					 break;
				case "CrossSectionArea":
					 @CrossSectionArea = (IfcAreaMeasure?)value;
					 break;
				case "BarLength":
					 @BarLength = (IfcPositiveLengthMeasure?)value;
					 break;
				case "BarSurface":
					 @BarSurface = (IfcReinforcingBarSurfaceEnum)value;
					 break;
				case "BendingShapeCode":
					 @BendingShapeCode = (IfcLabel?)value;
					 break;
				case "BendingParameters":
					 @BendingParameters.Add((IfcBendingParameterSelect)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*CorrectPredefinedType:                                 ((PredefinedType = IfcReinforcingBarTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));*/
		/*BendingShapeCodeProvided:	BendingShapeCodeProvided : NOT EXISTS(BendingParameters) OR EXISTS(BendingShapeCode);*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}