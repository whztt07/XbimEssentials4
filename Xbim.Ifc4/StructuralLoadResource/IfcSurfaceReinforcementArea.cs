// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.StructuralLoadResource
{
	[EntityName("IFCSURFACEREINFORCEMENTAREA", 667)]
	public  partial class @IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSurfaceReinforcementArea(IModel model) : base(model) 		{ 
			Model = model; 
			_surfaceReinforcement1 = new ItemSet<IfcLengthMeasure>( model );
			_surfaceReinforcement2 = new ItemSet<IfcLengthMeasure>( model );
		}

		#region Explicit attribute fields
		private ItemSet<IfcLengthMeasure> _surfaceReinforcement1;
		private ItemSet<IfcLengthMeasure> _surfaceReinforcement2;
		private IfcRatioMeasure? _shearReinforcement;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public ItemSet<IfcLengthMeasure> @SurfaceReinforcement1 
		{ 
			get 
			{
				if(Activated) return _surfaceReinforcement1;
				
				Model.Activate(this, true);
				Activated = true;
				return _surfaceReinforcement1;
			} 
			set
			{
				SetValue( v =>  _surfaceReinforcement1 = v, _surfaceReinforcement1, value,  "SurfaceReinforcement1");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public ItemSet<IfcLengthMeasure> @SurfaceReinforcement2 
		{ 
			get 
			{
				if(Activated) return _surfaceReinforcement2;
				
				Model.Activate(this, true);
				Activated = true;
				return _surfaceReinforcement2;
			} 
			set
			{
				SetValue( v =>  _surfaceReinforcement2 = v, _surfaceReinforcement2, value,  "SurfaceReinforcement2");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcRatioMeasure? @ShearReinforcement 
		{ 
			get 
			{
				if(Activated) return _shearReinforcement;
				
				Model.Activate(this, true);
				Activated = true;
				return _shearReinforcement;
			} 
			set
			{
				SetValue( v =>  _shearReinforcement = v, _shearReinforcement, value,  "ShearReinforcement");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"SurfaceReinforcement1",
			"SurfaceReinforcement2",
			"ShearReinforcement",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @SurfaceReinforcement1;
				case 2: 
					return @SurfaceReinforcement2;
				case 3: 
					return @ShearReinforcement;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "SurfaceReinforcement1":  
					return @SurfaceReinforcement1;
				case "SurfaceReinforcement2":  
					return @SurfaceReinforcement2;
				case "ShearReinforcement":  
					return @ShearReinforcement;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @SurfaceReinforcement1 = (ItemSet<IfcLengthMeasure>)value;
					 break;
				case 2:
					 @SurfaceReinforcement2 = (ItemSet<IfcLengthMeasure>)value;
					 break;
				case 3:
					 @ShearReinforcement = (IfcRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "SurfaceReinforcement1":
					 @SurfaceReinforcement1 = (ItemSet<IfcLengthMeasure>)value;
					 break;
				case "SurfaceReinforcement2":
					 @SurfaceReinforcement2 = (ItemSet<IfcLengthMeasure>)value;
					 break;
				case "ShearReinforcement":
					 @ShearReinforcement = (IfcRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*SurfaceAndOrShearAreaSpecified:	SurfaceAndOrShearAreaSpecified : EXISTS(SurfaceReinforcement1) OR EXISTS(SurfaceReinforcement2) OR EXISTS(ShearReinforcement);*/
		/*NonnegativeArea1:                                       );*/
		/*NonnegativeArea2:                                       );*/
		/*NonnegativeArea3:	NonnegativeArea3 : (NOT EXISTS(ShearReinforcement)) OR (ShearReinforcement >= 0.);*/
		#endregion

		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}