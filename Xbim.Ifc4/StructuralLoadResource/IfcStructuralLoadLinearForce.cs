// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:44
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.StructuralLoadResource
{
	[EntityName("IFCSTRUCTURALLOADLINEARFORCE", 635)]
	public  partial class @IfcStructuralLoadLinearForce : IfcStructuralLoadStatic, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcStructuralLoadLinearForce(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcLinearForceMeasure? _linearForceX;
		private IfcLinearForceMeasure? _linearForceY;
		private IfcLinearForceMeasure? _linearForceZ;
		private IfcLinearMomentMeasure? _linearMomentX;
		private IfcLinearMomentMeasure? _linearMomentY;
		private IfcLinearMomentMeasure? _linearMomentZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public IfcLinearForceMeasure? @LinearForceX 
		{ 
			get 
			{
				if(Activated) return _linearForceX;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearForceX;
			} 
			set
			{
				SetValue( v =>  _linearForceX = v, _linearForceX, value,  "LinearForceX");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public IfcLinearForceMeasure? @LinearForceY 
		{ 
			get 
			{
				if(Activated) return _linearForceY;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearForceY;
			} 
			set
			{
				SetValue( v =>  _linearForceY = v, _linearForceY, value,  "LinearForceY");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcLinearForceMeasure? @LinearForceZ 
		{ 
			get 
			{
				if(Activated) return _linearForceZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearForceZ;
			} 
			set
			{
				SetValue( v =>  _linearForceZ = v, _linearForceZ, value,  "LinearForceZ");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcLinearMomentMeasure? @LinearMomentX 
		{ 
			get 
			{
				if(Activated) return _linearMomentX;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearMomentX;
			} 
			set
			{
				SetValue( v =>  _linearMomentX = v, _linearMomentX, value,  "LinearMomentX");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcLinearMomentMeasure? @LinearMomentY 
		{ 
			get 
			{
				if(Activated) return _linearMomentY;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearMomentY;
			} 
			set
			{
				SetValue( v =>  _linearMomentY = v, _linearMomentY, value,  "LinearMomentY");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcLinearMomentMeasure? @LinearMomentZ 
		{ 
			get 
			{
				if(Activated) return _linearMomentZ;
				
				Model.Activate(this, true);
				Activated = true;
				return _linearMomentZ;
			} 
			set
			{
				SetValue( v =>  _linearMomentZ = v, _linearMomentZ, value,  "LinearMomentZ");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"LinearForceX",
			"LinearForceY",
			"LinearForceZ",
			"LinearMomentX",
			"LinearMomentY",
			"LinearMomentZ",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @LinearForceX;
				case 2: 
					return @LinearForceY;
				case 3: 
					return @LinearForceZ;
				case 4: 
					return @LinearMomentX;
				case 5: 
					return @LinearMomentY;
				case 6: 
					return @LinearMomentZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "LinearForceX":  
					return @LinearForceX;
				case "LinearForceY":  
					return @LinearForceY;
				case "LinearForceZ":  
					return @LinearForceZ;
				case "LinearMomentX":  
					return @LinearMomentX;
				case "LinearMomentY":  
					return @LinearMomentY;
				case "LinearMomentZ":  
					return @LinearMomentZ;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @LinearForceX = (IfcLinearForceMeasure?)value;
					 break;
				case 2:
					 @LinearForceY = (IfcLinearForceMeasure?)value;
					 break;
				case 3:
					 @LinearForceZ = (IfcLinearForceMeasure?)value;
					 break;
				case 4:
					 @LinearMomentX = (IfcLinearMomentMeasure?)value;
					 break;
				case 5:
					 @LinearMomentY = (IfcLinearMomentMeasure?)value;
					 break;
				case 6:
					 @LinearMomentZ = (IfcLinearMomentMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "LinearForceX":
					 @LinearForceX = (IfcLinearForceMeasure?)value;
					 break;
				case "LinearForceY":
					 @LinearForceY = (IfcLinearForceMeasure?)value;
					 break;
				case "LinearForceZ":
					 @LinearForceZ = (IfcLinearForceMeasure?)value;
					 break;
				case "LinearMomentX":
					 @LinearMomentX = (IfcLinearMomentMeasure?)value;
					 break;
				case "LinearMomentY":
					 @LinearMomentY = (IfcLinearMomentMeasure?)value;
					 break;
				case "LinearMomentZ":
					 @LinearMomentZ = (IfcLinearMomentMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}