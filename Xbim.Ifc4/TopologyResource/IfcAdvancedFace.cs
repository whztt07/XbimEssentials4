// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:40
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.TopologyResource
{
	[EntityName("IFCADVANCEDFACE", 8)]
	public  partial class @IfcAdvancedFace : IfcFaceSurface, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAdvancedFace(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		#endregion
	
		#region Explicit attribute properties
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Bounds",
			"FaceSurface",
			"SameSense",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Bounds;
				case 1: 
					return @FaceSurface;
				case 2: 
					return @SameSense;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Bounds":  
					return @Bounds;
				case "FaceSurface":  
					return @FaceSurface;
				case "SameSense":  
					return @SameSense;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Bounds.Add((IfcFaceBound)value);
					 break;
				case 1:
					 @FaceSurface = (IfcSurface)value;
					 break;
				case 2:
					 if (value != null) @SameSense = (bool)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Bounds":
					 @Bounds.Add((IfcFaceBound)value);
					 break;
				case "FaceSurface":
					 @FaceSurface = (IfcSurface)value;
					 break;
				case "SameSense":
					 if (value != null) @SameSense = (bool)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*ApplicableSurface:                             TYPEOF(SELF\IfcFaceSurface.FaceSurface)) = 1;*/
		/*RequiresEdgeCurve:                             ))) = 0;*/
		/*ApplicableEdgeCurves:                             ))) = 0;*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}