// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		17.09.2015 10:21:14
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using Xbim.Ifc4.SharedMgmtElements;
using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.ActorResource;
using Xbim.Ifc4.BuildingControlsDomain;
using Xbim.Ifc4.GeometricModelResource;
using Xbim.Ifc4.TopologyResource;
using Xbim.Ifc4.HvacDomain;
using Xbim.Ifc4.ProductExtension;
using Xbim.Ifc4.PresentationDefinitionResource;
using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.CostResource;
using Xbim.Ifc4.ApprovalResource;
using Xbim.Ifc4.ProfileResource;
using Xbim.Ifc4.SharedFacilitiesElements;
using Xbim.Ifc4.ElectricalDomain;
using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.SharedBldgElements;
using Xbim.Ifc4.PresentationAppearanceResource;
using Xbim.Ifc4.StructuralLoadResource;
using Xbim.Ifc4.SharedComponentElements;
using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.PropertyResource;
using Xbim.Ifc4.GeometricConstraintResource;
using Xbim.Ifc4.ConstructionMgmtDomain;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.SharedBldgServiceElements;
using Xbim.Ifc4.ArchitectureDomain;
using Xbim.Ifc4.ProcessExtension;
using Xbim.Ifc4.DateTimeResource;
using Xbim.Ifc4.PlumbingFireProtectionDomain;
using Xbim.Ifc4.StructuralElementsDomain;
using Xbim.Ifc4.RepresentationResource;
using Xbim.Ifc4.PresentationOrganizationResource;
using Xbim.Ifc4.MaterialResource;
using Xbim.Ifc4.ConstraintResource;
using Xbim.Ifc4.ControlExtension;
using Xbim.Ifc4.QuantityResource;
using Xbim.Ifc4.StructuralAnalysisDomain;
using Xbim.Common;

namespace Xbim.Ifc4
{
	public sealed class EntityFactory : IEntityFactory
	{
		public T New<T>(IModel model, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			return (T)New(model, typeof(T), entityLabel, activated);
		}

		public T New<T>(IModel model, Action<T> init, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			var o = New<T>(model, entityLabel, activated);
			init(o);
			return o;
		}

		public IInstantiableEntity New(IModel model, Type t, int entityLabel, bool activated)
		{
			//check that the type is from this assembly
			if(t.Assembly != GetType().Assembly)
				throw new Exception("This factory only creates types from its assembly");

			return New(model, t.Name, entityLabel, activated);
		}

		public IInstantiableEntity New(IModel model, string typeName, int entityLabel, bool activated)
		{
			if (model == null || typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpper();
			switch(name)
			{
				case "IFCACTIONREQUEST": return new IfcActionRequest ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCACTOR": return new IfcActor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCACTORROLE": return new IfcActorRole ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCACTUATOR": return new IfcActuator ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCACTUATORTYPE": return new IfcActuatorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCADVANCEDBREP": return new IfcAdvancedBrep ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCADVANCEDBREPWITHVOIDS": return new IfcAdvancedBrepWithVoids ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCADVANCEDFACE": return new IfcAdvancedFace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTERMINAL": return new IfcAirTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTERMINALBOX": return new IfcAirTerminalBox ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTERMINALBOXTYPE": return new IfcAirTerminalBoxType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTERMINALTYPE": return new IfcAirTerminalType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTOAIRHEATRECOVERY": return new IfcAirToAirHeatRecovery ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAIRTOAIRHEATRECOVERYTYPE": return new IfcAirToAirHeatRecoveryType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCALARM": return new IfcAlarm ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCALARMTYPE": return new IfcAlarmType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCANNOTATION": return new IfcAnnotation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCANNOTATIONFILLAREA": return new IfcAnnotationFillArea ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAPPLICATION": return new IfcApplication ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAPPLIEDVALUE": return new IfcAppliedValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAPPROVAL": return new IfcApproval ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAPPROVALRELATIONSHIP": return new IfcApprovalRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCARBITRARYCLOSEDPROFILEDEF": return new IfcArbitraryClosedProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCARBITRARYOPENPROFILEDEF": return new IfcArbitraryOpenProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCARBITRARYPROFILEDEFWITHVOIDS": return new IfcArbitraryProfileDefWithVoids ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCASSET": return new IfcAsset ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCASYMMETRICISHAPEPROFILEDEF": return new IfcAsymmetricIShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAUDIOVISUALAPPLIANCE": return new IfcAudioVisualAppliance ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAUDIOVISUALAPPLIANCETYPE": return new IfcAudioVisualApplianceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAXIS1PLACEMENT": return new IfcAxis1Placement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAXIS2PLACEMENT2D": return new IfcAxis2Placement2D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCAXIS2PLACEMENT3D": return new IfcAxis2Placement3D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBSPLINECURVEWITHKNOTS": return new IfcBSplineCurveWithKnots ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBSPLINESURFACEWITHKNOTS": return new IfcBSplineSurfaceWithKnots ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBEAM": return new IfcBeam ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBEAMSTANDARDCASE": return new IfcBeamStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBEAMTYPE": return new IfcBeamType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBLOBTEXTURE": return new IfcBlobTexture ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBLOCK": return new IfcBlock ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOILER": return new IfcBoiler ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOILERTYPE": return new IfcBoilerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOOLEANCLIPPINGRESULT": return new IfcBooleanClippingResult ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOOLEANRESULT": return new IfcBooleanResult ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDARYCURVE": return new IfcBoundaryCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDARYEDGECONDITION": return new IfcBoundaryEdgeCondition ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDARYFACECONDITION": return new IfcBoundaryFaceCondition ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDARYNODECONDITION": return new IfcBoundaryNodeCondition ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDARYNODECONDITIONWARPING": return new IfcBoundaryNodeConditionWarping ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOUNDINGBOX": return new IfcBoundingBox ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBOXEDHALFSPACE": return new IfcBoxedHalfSpace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDING": return new IfcBuilding ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPART": return new IfcBuildingElementPart ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPARTTYPE": return new IfcBuildingElementPartType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPROXY": return new IfcBuildingElementProxy ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPROXYTYPE": return new IfcBuildingElementProxyType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGSTOREY": return new IfcBuildingStorey ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBUILDINGSYSTEM": return new IfcBuildingSystem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBURNER": return new IfcBurner ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCBURNERTYPE": return new IfcBurnerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCSHAPEPROFILEDEF": return new IfcCShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERFITTING": return new IfcCableCarrierFitting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERFITTINGTYPE": return new IfcCableCarrierFittingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERSEGMENT": return new IfcCableCarrierSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERSEGMENTTYPE": return new IfcCableCarrierSegmentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLEFITTING": return new IfcCableFitting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLEFITTINGTYPE": return new IfcCableFittingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLESEGMENT": return new IfcCableSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCABLESEGMENTTYPE": return new IfcCableSegmentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANPOINT": return new IfcCartesianPoint ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANPOINTLIST3D": return new IfcCartesianPointList3D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR2D": return new IfcCartesianTransformationOperator2D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM": return new IfcCartesianTransformationOperator2DnonUniform ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR3D": return new IfcCartesianTransformationOperator3D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM": return new IfcCartesianTransformationOperator3DnonUniform ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCENTERLINEPROFILEDEF": return new IfcCenterLineProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCHILLER": return new IfcChiller ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCHILLERTYPE": return new IfcChillerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCHIMNEY": return new IfcChimney ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCHIMNEYTYPE": return new IfcChimneyType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCIRCLE": return new IfcCircle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCIRCLEHOLLOWPROFILEDEF": return new IfcCircleHollowProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCIRCLEPROFILEDEF": return new IfcCircleProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCIVILELEMENT": return new IfcCivilElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCIVILELEMENTTYPE": return new IfcCivilElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATION": return new IfcClassification ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONREFERENCE": return new IfcClassificationReference ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCLOSEDSHELL": return new IfcClosedShell ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOIL": return new IfcCoil ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOILTYPE": return new IfcCoilType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOLOURRGB": return new IfcColourRgb ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOLOURRGBLIST": return new IfcColourRgbList ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOLUMN": return new IfcColumn ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOLUMNSTANDARDCASE": return new IfcColumnStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOLUMNTYPE": return new IfcColumnType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMMUNICATIONSAPPLIANCE": return new IfcCommunicationsAppliance ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMMUNICATIONSAPPLIANCETYPE": return new IfcCommunicationsApplianceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPLEXPROPERTY": return new IfcComplexProperty ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPLEXPROPERTYTEMPLATE": return new IfcComplexPropertyTemplate ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPOSITECURVE": return new IfcCompositeCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPOSITECURVEONSURFACE": return new IfcCompositeCurveOnSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPOSITECURVESEGMENT": return new IfcCompositeCurveSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPOSITEPROFILEDEF": return new IfcCompositeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPRESSOR": return new IfcCompressor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOMPRESSORTYPE": return new IfcCompressorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONDENSER": return new IfcCondenser ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONDENSERTYPE": return new IfcCondenserType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTEDFACESET": return new IfcConnectedFaceSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTIONCURVEGEOMETRY": return new IfcConnectionCurveGeometry ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTIONPOINTECCENTRICITY": return new IfcConnectionPointEccentricity ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTIONPOINTGEOMETRY": return new IfcConnectionPointGeometry ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTIONSURFACEGEOMETRY": return new IfcConnectionSurfaceGeometry ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONNECTIONVOLUMEGEOMETRY": return new IfcConnectionVolumeGeometry ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONEQUIPMENTRESOURCE": return new IfcConstructionEquipmentResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE": return new IfcConstructionEquipmentResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONMATERIALRESOURCE": return new IfcConstructionMaterialResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONMATERIALRESOURCETYPE": return new IfcConstructionMaterialResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONPRODUCTRESOURCE": return new IfcConstructionProductResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONPRODUCTRESOURCETYPE": return new IfcConstructionProductResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONTEXTDEPENDENTUNIT": return new IfcContextDependentUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONTROLLER": return new IfcController ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONTROLLERTYPE": return new IfcControllerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONVERSIONBASEDUNIT": return new IfcConversionBasedUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCONVERSIONBASEDUNITWITHOFFSET": return new IfcConversionBasedUnitWithOffset ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOOLEDBEAM": return new IfcCooledBeam ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOOLEDBEAMTYPE": return new IfcCooledBeamType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOOLINGTOWER": return new IfcCoolingTower ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOOLINGTOWERTYPE": return new IfcCoolingTowerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOSTITEM": return new IfcCostItem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOSTSCHEDULE": return new IfcCostSchedule ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOSTVALUE": return new IfcCostValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOVERING": return new IfcCovering ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCOVERINGTYPE": return new IfcCoveringType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCREWRESOURCE": return new IfcCrewResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCREWRESOURCETYPE": return new IfcCrewResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCSGSOLID": return new IfcCsgSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURRENCYRELATIONSHIP": return new IfcCurrencyRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURTAINWALL": return new IfcCurtainWall ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURTAINWALLTYPE": return new IfcCurtainWallType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVEBOUNDEDPLANE": return new IfcCurveBoundedPlane ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVEBOUNDEDSURFACE": return new IfcCurveBoundedSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVESTYLE": return new IfcCurveStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONT": return new IfcCurveStyleFont ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONTANDSCALING": return new IfcCurveStyleFontAndScaling ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONTPATTERN": return new IfcCurveStyleFontPattern ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCCYLINDRICALSURFACE": return new IfcCylindricalSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDAMPER": return new IfcDamper ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDAMPERTYPE": return new IfcDamperType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDERIVEDPROFILEDEF": return new IfcDerivedProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDERIVEDUNIT": return new IfcDerivedUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDERIVEDUNITELEMENT": return new IfcDerivedUnitElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDIMENSIONALEXPONENTS": return new IfcDimensionalExponents ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDIRECTION": return new IfcDirection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISCRETEACCESSORY": return new IfcDiscreteAccessory ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISCRETEACCESSORYTYPE": return new IfcDiscreteAccessoryType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCHAMBERELEMENT": return new IfcDistributionChamberElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE": return new IfcDistributionChamberElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCIRCUIT": return new IfcDistributionCircuit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCONTROLELEMENT": return new IfcDistributionControlElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONELEMENT": return new IfcDistributionElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONELEMENTTYPE": return new IfcDistributionElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONFLOWELEMENT": return new IfcDistributionFlowElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONPORT": return new IfcDistributionPort ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONSYSTEM": return new IfcDistributionSystem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOCUMENTINFORMATION": return new IfcDocumentInformation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOCUMENTINFORMATIONRELATIONSHIP": return new IfcDocumentInformationRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOCUMENTREFERENCE": return new IfcDocumentReference ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOOR": return new IfcDoor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOORLININGPROPERTIES": return new IfcDoorLiningProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOORPANELPROPERTIES": return new IfcDoorPanelProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOORSTANDARDCASE": return new IfcDoorStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOORSTYLE": return new IfcDoorStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDOORTYPE": return new IfcDoorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGPREDEFINEDCOLOUR": return new IfcDraughtingPreDefinedColour ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGPREDEFINEDCURVEFONT": return new IfcDraughtingPreDefinedCurveFont ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTFITTING": return new IfcDuctFitting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTFITTINGTYPE": return new IfcDuctFittingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTSEGMENT": return new IfcDuctSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTSEGMENTTYPE": return new IfcDuctSegmentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTSILENCER": return new IfcDuctSilencer ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCDUCTSILENCERTYPE": return new IfcDuctSilencerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEDGE": return new IfcEdge ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEDGECURVE": return new IfcEdgeCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEDGELOOP": return new IfcEdgeLoop ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICAPPLIANCE": return new IfcElectricAppliance ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICAPPLIANCETYPE": return new IfcElectricApplianceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICDISTRIBUTIONBOARD": return new IfcElectricDistributionBoard ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICDISTRIBUTIONBOARDTYPE": return new IfcElectricDistributionBoardType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICFLOWSTORAGEDEVICE": return new IfcElectricFlowStorageDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICFLOWSTORAGEDEVICETYPE": return new IfcElectricFlowStorageDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICGENERATOR": return new IfcElectricGenerator ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICGENERATORTYPE": return new IfcElectricGeneratorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICMOTOR": return new IfcElectricMotor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICMOTORTYPE": return new IfcElectricMotorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICTIMECONTROL": return new IfcElectricTimeControl ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELECTRICTIMECONTROLTYPE": return new IfcElectricTimeControlType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELEMENTASSEMBLY": return new IfcElementAssembly ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELEMENTASSEMBLYTYPE": return new IfcElementAssemblyType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELEMENTQUANTITY": return new IfcElementQuantity ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELLIPSE": return new IfcEllipse ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCELLIPSEPROFILEDEF": return new IfcEllipseProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCENERGYCONVERSIONDEVICE": return new IfcEnergyConversionDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCENGINE": return new IfcEngine ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCENGINETYPE": return new IfcEngineType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVAPORATIVECOOLER": return new IfcEvaporativeCooler ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVAPORATIVECOOLERTYPE": return new IfcEvaporativeCoolerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVAPORATOR": return new IfcEvaporator ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVAPORATORTYPE": return new IfcEvaporatorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVENT": return new IfcEvent ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVENTTIME": return new IfcEventTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEVENTTYPE": return new IfcEventType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTERNALREFERENCERELATIONSHIP": return new IfcExternalReferenceRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTERNALSPATIALELEMENT": return new IfcExternalSpatialElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDHATCHSTYLE": return new IfcExternallyDefinedHatchStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDSURFACESTYLE": return new IfcExternallyDefinedSurfaceStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDTEXTFONT": return new IfcExternallyDefinedTextFont ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTRUDEDAREASOLID": return new IfcExtrudedAreaSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCEXTRUDEDAREASOLIDTAPERED": return new IfcExtrudedAreaSolidTapered ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACE": return new IfcFace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACEBASEDSURFACEMODEL": return new IfcFaceBasedSurfaceModel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACEBOUND": return new IfcFaceBound ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACEOUTERBOUND": return new IfcFaceOuterBound ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACESURFACE": return new IfcFaceSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACETEDBREP": return new IfcFacetedBrep ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFACETEDBREPWITHVOIDS": return new IfcFacetedBrepWithVoids ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFAILURECONNECTIONCONDITION": return new IfcFailureConnectionCondition ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFAN": return new IfcFan ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFANTYPE": return new IfcFanType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFASTENER": return new IfcFastener ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFASTENERTYPE": return new IfcFastenerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLE": return new IfcFillAreaStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLEHATCHING": return new IfcFillAreaStyleHatching ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLETILES": return new IfcFillAreaStyleTiles ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFILTER": return new IfcFilter ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFILTERTYPE": return new IfcFilterType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFIRESUPPRESSIONTERMINAL": return new IfcFireSuppressionTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFIRESUPPRESSIONTERMINALTYPE": return new IfcFireSuppressionTerminalType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFIXEDREFERENCESWEPTAREASOLID": return new IfcFixedReferenceSweptAreaSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWCONTROLLER": return new IfcFlowController ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWFITTING": return new IfcFlowFitting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWINSTRUMENT": return new IfcFlowInstrument ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWINSTRUMENTTYPE": return new IfcFlowInstrumentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWMETER": return new IfcFlowMeter ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWMETERTYPE": return new IfcFlowMeterType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWMOVINGDEVICE": return new IfcFlowMovingDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWSEGMENT": return new IfcFlowSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWSTORAGEDEVICE": return new IfcFlowStorageDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWTERMINAL": return new IfcFlowTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFLOWTREATMENTDEVICE": return new IfcFlowTreatmentDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFOOTING": return new IfcFooting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFOOTINGTYPE": return new IfcFootingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFURNISHINGELEMENT": return new IfcFurnishingElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFURNISHINGELEMENTTYPE": return new IfcFurnishingElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFURNITURE": return new IfcFurniture ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCFURNITURETYPE": return new IfcFurnitureType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOGRAPHICELEMENT": return new IfcGeographicElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOGRAPHICELEMENTTYPE": return new IfcGeographicElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOMETRICCURVESET": return new IfcGeometricCurveSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOMETRICREPRESENTATIONCONTEXT": return new IfcGeometricRepresentationContext ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT": return new IfcGeometricRepresentationSubContext ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGEOMETRICSET": return new IfcGeometricSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGRID": return new IfcGrid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGRIDAXIS": return new IfcGridAxis ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGRIDPLACEMENT": return new IfcGridPlacement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCGROUP": return new IfcGroup ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCHALFSPACESOLID": return new IfcHalfSpaceSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCHEATEXCHANGER": return new IfcHeatExchanger ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCHEATEXCHANGERTYPE": return new IfcHeatExchangerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCHUMIDIFIER": return new IfcHumidifier ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCHUMIDIFIERTYPE": return new IfcHumidifierType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCISHAPEPROFILEDEF": return new IfcIShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCIMAGETEXTURE": return new IfcImageTexture ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCINDEXEDCOLOURMAP": return new IfcIndexedColourMap ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCINDEXEDTRIANGLETEXTUREMAP": return new IfcIndexedTriangleTextureMap ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCINTERCEPTOR": return new IfcInterceptor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCINTERCEPTORTYPE": return new IfcInterceptorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCINVENTORY": return new IfcInventory ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCIRREGULARTIMESERIES": return new IfcIrregularTimeSeries ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCIRREGULARTIMESERIESVALUE": return new IfcIrregularTimeSeriesValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCJUNCTIONBOX": return new IfcJunctionBox ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCJUNCTIONBOXTYPE": return new IfcJunctionBoxType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLSHAPEPROFILEDEF": return new IfcLShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLABORRESOURCE": return new IfcLaborResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLABORRESOURCETYPE": return new IfcLaborResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLAGTIME": return new IfcLagTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLAMP": return new IfcLamp ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLAMPTYPE": return new IfcLampType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIBRARYINFORMATION": return new IfcLibraryInformation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIBRARYREFERENCE": return new IfcLibraryReference ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTDISTRIBUTIONDATA": return new IfcLightDistributionData ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTFIXTURE": return new IfcLightFixture ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTFIXTURETYPE": return new IfcLightFixtureType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTINTENSITYDISTRIBUTION": return new IfcLightIntensityDistribution ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEAMBIENT": return new IfcLightSourceAmbient ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEDIRECTIONAL": return new IfcLightSourceDirectional ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEGONIOMETRIC": return new IfcLightSourceGoniometric ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEPOSITIONAL": return new IfcLightSourcePositional ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCESPOT": return new IfcLightSourceSpot ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLINE": return new IfcLine ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLOCALPLACEMENT": return new IfcLocalPlacement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCLOOP": return new IfcLoop ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMAPCONVERSION": return new IfcMapConversion ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMAPPEDITEM": return new IfcMappedItem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIAL": return new IfcMaterial ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALCLASSIFICATIONRELATIONSHIP": return new IfcMaterialClassificationRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALCONSTITUENT": return new IfcMaterialConstituent ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALCONSTITUENTSET": return new IfcMaterialConstituentSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALDEFINITIONREPRESENTATION": return new IfcMaterialDefinitionRepresentation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYER": return new IfcMaterialLayer ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYERSET": return new IfcMaterialLayerSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYERSETUSAGE": return new IfcMaterialLayerSetUsage ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYERWITHOFFSETS": return new IfcMaterialLayerWithOffsets ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALLIST": return new IfcMaterialList ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROFILE": return new IfcMaterialProfile ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROFILESET": return new IfcMaterialProfileSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROFILESETUSAGE": return new IfcMaterialProfileSetUsage ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROFILESETUSAGETAPERING": return new IfcMaterialProfileSetUsageTapering ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROFILEWITHOFFSETS": return new IfcMaterialProfileWithOffsets ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALPROPERTIES": return new IfcMaterialProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMATERIALRELATIONSHIP": return new IfcMaterialRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEASUREWITHUNIT": return new IfcMeasureWithUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMECHANICALFASTENER": return new IfcMechanicalFastener ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMECHANICALFASTENERTYPE": return new IfcMechanicalFastenerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEDICALDEVICE": return new IfcMedicalDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEDICALDEVICETYPE": return new IfcMedicalDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEMBER": return new IfcMember ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEMBERSTANDARDCASE": return new IfcMemberStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMEMBERTYPE": return new IfcMemberType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMETRIC": return new IfcMetric ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMIRROREDPROFILEDEF": return new IfcMirroredProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMONETARYUNIT": return new IfcMonetaryUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMOTORCONNECTION": return new IfcMotorConnection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCMOTORCONNECTIONTYPE": return new IfcMotorConnectionType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOBJECTIVE": return new IfcObjective ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOCCUPANT": return new IfcOccupant ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOFFSETCURVE2D": return new IfcOffsetCurve2D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOFFSETCURVE3D": return new IfcOffsetCurve3D ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOPENSHELL": return new IfcOpenShell ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOPENINGELEMENT": return new IfcOpeningElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOPENINGSTANDARDCASE": return new IfcOpeningStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCORGANIZATION": return new IfcOrganization ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCORGANIZATIONRELATIONSHIP": return new IfcOrganizationRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCORIENTEDEDGE": return new IfcOrientedEdge ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOUTERBOUNDARYCURVE": return new IfcOuterBoundaryCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOUTLET": return new IfcOutlet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOUTLETTYPE": return new IfcOutletType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCOWNERHISTORY": return new IfcOwnerHistory ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPATH": return new IfcPath ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPCURVE": return new IfcPcurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPERFORMANCEHISTORY": return new IfcPerformanceHistory ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPERMEABLECOVERINGPROPERTIES": return new IfcPermeableCoveringProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPERMIT": return new IfcPermit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPERSON": return new IfcPerson ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPERSONANDORGANIZATION": return new IfcPersonAndOrganization ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPHYSICALCOMPLEXQUANTITY": return new IfcPhysicalComplexQuantity ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPILE": return new IfcPile ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPILETYPE": return new IfcPileType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPIPEFITTING": return new IfcPipeFitting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPIPEFITTINGTYPE": return new IfcPipeFittingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPIPESEGMENT": return new IfcPipeSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPIPESEGMENTTYPE": return new IfcPipeSegmentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPIXELTEXTURE": return new IfcPixelTexture ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLANARBOX": return new IfcPlanarBox ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLANAREXTENT": return new IfcPlanarExtent ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLANE": return new IfcPlane ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLATE": return new IfcPlate ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLATESTANDARDCASE": return new IfcPlateStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPLATETYPE": return new IfcPlateType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOINTONCURVE": return new IfcPointOnCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOINTONSURFACE": return new IfcPointOnSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOLYLOOP": return new IfcPolyLoop ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOLYGONALBOUNDEDHALFSPACE": return new IfcPolygonalBoundedHalfSpace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOLYLINE": return new IfcPolyline ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPOSTALADDRESS": return new IfcPostalAddress ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONLAYERASSIGNMENT": return new IfcPresentationLayerAssignment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONLAYERWITHSTYLE": return new IfcPresentationLayerWithStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONSTYLEASSIGNMENT": return new IfcPresentationStyleAssignment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROCEDURE": return new IfcProcedure ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROCEDURETYPE": return new IfcProcedureType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPRODUCTDEFINITIONSHAPE": return new IfcProductDefinitionShape ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROFILEDEF": return new IfcProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROFILEPROPERTIES": return new IfcProfileProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROJECT": return new IfcProject ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROJECTLIBRARY": return new IfcProjectLibrary ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROJECTORDER": return new IfcProjectOrder ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROJECTEDCRS": return new IfcProjectedCRS ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROJECTIONELEMENT": return new IfcProjectionElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYBOUNDEDVALUE": return new IfcPropertyBoundedValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYDEPENDENCYRELATIONSHIP": return new IfcPropertyDependencyRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYENUMERATEDVALUE": return new IfcPropertyEnumeratedValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYENUMERATION": return new IfcPropertyEnumeration ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYLISTVALUE": return new IfcPropertyListValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYREFERENCEVALUE": return new IfcPropertyReferenceValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYSET": return new IfcPropertySet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYSETTEMPLATE": return new IfcPropertySetTemplate ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYSINGLEVALUE": return new IfcPropertySingleValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROPERTYTABLEVALUE": return new IfcPropertyTableValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROTECTIVEDEVICE": return new IfcProtectiveDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROTECTIVEDEVICETRIPPINGUNIT": return new IfcProtectiveDeviceTrippingUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPE": return new IfcProtectiveDeviceTrippingUnitType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROTECTIVEDEVICETYPE": return new IfcProtectiveDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPROXY": return new IfcProxy ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPUMP": return new IfcPump ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCPUMPTYPE": return new IfcPumpType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYAREA": return new IfcQuantityArea ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYCOUNT": return new IfcQuantityCount ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYLENGTH": return new IfcQuantityLength ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYTIME": return new IfcQuantityTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYVOLUME": return new IfcQuantityVolume ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCQUANTITYWEIGHT": return new IfcQuantityWeight ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAILING": return new IfcRailing ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAILINGTYPE": return new IfcRailingType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAMP": return new IfcRamp ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAMPFLIGHT": return new IfcRampFlight ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAMPFLIGHTTYPE": return new IfcRampFlightType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRAMPTYPE": return new IfcRampType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRATIONALBSPLINECURVEWITHKNOTS": return new IfcRationalBSplineCurveWithKnots ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRATIONALBSPLINESURFACEWITHKNOTS": return new IfcRationalBSplineSurfaceWithKnots ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRECTANGLEHOLLOWPROFILEDEF": return new IfcRectangleHollowProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRECTANGLEPROFILEDEF": return new IfcRectangleProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRECTANGULARPYRAMID": return new IfcRectangularPyramid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRECTANGULARTRIMMEDSURFACE": return new IfcRectangularTrimmedSurface ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRECURRENCEPATTERN": return new IfcRecurrencePattern ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREFERENCE": return new IfcReference ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREGULARTIMESERIES": return new IfcRegularTimeSeries ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCEMENTBARPROPERTIES": return new IfcReinforcementBarProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCEMENTDEFINITIONPROPERTIES": return new IfcReinforcementDefinitionProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCINGBAR": return new IfcReinforcingBar ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCINGBARTYPE": return new IfcReinforcingBarType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCINGMESH": return new IfcReinforcingMesh ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREINFORCINGMESHTYPE": return new IfcReinforcingMeshType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELAGGREGATES": return new IfcRelAggregates ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOACTOR": return new IfcRelAssignsToActor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOCONTROL": return new IfcRelAssignsToControl ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOGROUP": return new IfcRelAssignsToGroup ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOGROUPBYFACTOR": return new IfcRelAssignsToGroupByFactor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOPROCESS": return new IfcRelAssignsToProcess ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOPRODUCT": return new IfcRelAssignsToProduct ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTORESOURCE": return new IfcRelAssignsToResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESAPPROVAL": return new IfcRelAssociatesApproval ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESCLASSIFICATION": return new IfcRelAssociatesClassification ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESCONSTRAINT": return new IfcRelAssociatesConstraint ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESDOCUMENT": return new IfcRelAssociatesDocument ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESLIBRARY": return new IfcRelAssociatesLibrary ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESMATERIAL": return new IfcRelAssociatesMaterial ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSELEMENTS": return new IfcRelConnectsElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPATHELEMENTS": return new IfcRelConnectsPathElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPORTTOELEMENT": return new IfcRelConnectsPortToElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPORTS": return new IfcRelConnectsPorts ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSSTRUCTURALACTIVITY": return new IfcRelConnectsStructuralActivity ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSSTRUCTURALMEMBER": return new IfcRelConnectsStructuralMember ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSWITHECCENTRICITY": return new IfcRelConnectsWithEccentricity ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSWITHREALIZINGELEMENTS": return new IfcRelConnectsWithRealizingElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCONTAINEDINSPATIALSTRUCTURE": return new IfcRelContainedInSpatialStructure ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCOVERSBLDGELEMENTS": return new IfcRelCoversBldgElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELCOVERSSPACES": return new IfcRelCoversSpaces ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELDECLARES": return new IfcRelDeclares ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYOBJECT": return new IfcRelDefinesByObject ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYPROPERTIES": return new IfcRelDefinesByProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYTEMPLATE": return new IfcRelDefinesByTemplate ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYTYPE": return new IfcRelDefinesByType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELFILLSELEMENT": return new IfcRelFillsElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELFLOWCONTROLELEMENTS": return new IfcRelFlowControlElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELINTERFERESELEMENTS": return new IfcRelInterferesElements ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELNESTS": return new IfcRelNests ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELPROJECTSELEMENT": return new IfcRelProjectsElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELREFERENCEDINSPATIALSTRUCTURE": return new IfcRelReferencedInSpatialStructure ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELSEQUENCE": return new IfcRelSequence ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELSERVICESBUILDINGS": return new IfcRelServicesBuildings ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELSPACEBOUNDARY": return new IfcRelSpaceBoundary ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELSPACEBOUNDARY1STLEVEL": return new IfcRelSpaceBoundary1stLevel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELSPACEBOUNDARY2NDLEVEL": return new IfcRelSpaceBoundary2ndLevel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRELVOIDSELEMENT": return new IfcRelVoidsElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREPARAMETRISEDCOMPOSITECURVESEGMENT": return new IfcReparametrisedCompositeCurveSegment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREPRESENTATIONMAP": return new IfcRepresentationMap ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRESOURCEAPPROVALRELATIONSHIP": return new IfcResourceApprovalRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRESOURCECONSTRAINTRELATIONSHIP": return new IfcResourceConstraintRelationship ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRESOURCETIME": return new IfcResourceTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREVOLVEDAREASOLID": return new IfcRevolvedAreaSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCREVOLVEDAREASOLIDTAPERED": return new IfcRevolvedAreaSolidTapered ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRIGHTCIRCULARCONE": return new IfcRightCircularCone ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCRIGHTCIRCULARCYLINDER": return new IfcRightCircularCylinder ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCROOF": return new IfcRoof ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCROOFTYPE": return new IfcRoofType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCROUNDEDRECTANGLEPROFILEDEF": return new IfcRoundedRectangleProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSIUNIT": return new IfcSIUnit ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSANITARYTERMINAL": return new IfcSanitaryTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSANITARYTERMINALTYPE": return new IfcSanitaryTerminalType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSECTIONPROPERTIES": return new IfcSectionProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSECTIONREINFORCEMENTPROPERTIES": return new IfcSectionReinforcementProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSECTIONEDSPINE": return new IfcSectionedSpine ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSENSOR": return new IfcSensor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSENSORTYPE": return new IfcSensorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSHADINGDEVICE": return new IfcShadingDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSHADINGDEVICETYPE": return new IfcShadingDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSHAPEASPECT": return new IfcShapeAspect ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSHAPEREPRESENTATION": return new IfcShapeRepresentation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSHELLBASEDSURFACEMODEL": return new IfcShellBasedSurfaceModel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSIMPLEPROPERTYTEMPLATE": return new IfcSimplePropertyTemplate ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSITE": return new IfcSite ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSLAB": return new IfcSlab ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSLABELEMENTEDCASE": return new IfcSlabElementedCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSLABSTANDARDCASE": return new IfcSlabStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSLABTYPE": return new IfcSlabType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSLIPPAGECONNECTIONCONDITION": return new IfcSlippageConnectionCondition ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSOLARDEVICE": return new IfcSolarDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSOLARDEVICETYPE": return new IfcSolarDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPACE": return new IfcSpace ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPACEHEATER": return new IfcSpaceHeater ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPACEHEATERTYPE": return new IfcSpaceHeaterType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPACETYPE": return new IfcSpaceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPATIALZONE": return new IfcSpatialZone ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPATIALZONETYPE": return new IfcSpatialZoneType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSPHERE": return new IfcSphere ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTACKTERMINAL": return new IfcStackTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTACKTERMINALTYPE": return new IfcStackTerminalType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTAIR": return new IfcStair ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTAIRFLIGHT": return new IfcStairFlight ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTAIRFLIGHTTYPE": return new IfcStairFlightType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTAIRTYPE": return new IfcStairType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALANALYSISMODEL": return new IfcStructuralAnalysisModel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEACTION": return new IfcStructuralCurveAction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVECONNECTION": return new IfcStructuralCurveConnection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEMEMBER": return new IfcStructuralCurveMember ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEMEMBERVARYING": return new IfcStructuralCurveMemberVarying ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEREACTION": return new IfcStructuralCurveReaction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLINEARACTION": return new IfcStructuralLinearAction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADCASE": return new IfcStructuralLoadCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADCONFIGURATION": return new IfcStructuralLoadConfiguration ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADGROUP": return new IfcStructuralLoadGroup ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADLINEARFORCE": return new IfcStructuralLoadLinearForce ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADPLANARFORCE": return new IfcStructuralLoadPlanarForce ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT": return new IfcStructuralLoadSingleDisplacement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION": return new IfcStructuralLoadSingleDisplacementDistortion ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEFORCE": return new IfcStructuralLoadSingleForce ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEFORCEWARPING": return new IfcStructuralLoadSingleForceWarping ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADTEMPERATURE": return new IfcStructuralLoadTemperature ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPLANARACTION": return new IfcStructuralPlanarAction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTACTION": return new IfcStructuralPointAction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTCONNECTION": return new IfcStructuralPointConnection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTREACTION": return new IfcStructuralPointReaction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALRESULTGROUP": return new IfcStructuralResultGroup ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEACTION": return new IfcStructuralSurfaceAction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACECONNECTION": return new IfcStructuralSurfaceConnection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEMEMBER": return new IfcStructuralSurfaceMember ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEMEMBERVARYING": return new IfcStructuralSurfaceMemberVarying ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEREACTION": return new IfcStructuralSurfaceReaction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTYLEDITEM": return new IfcStyledItem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSTYLEDREPRESENTATION": return new IfcStyledRepresentation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSUBCONTRACTRESOURCE": return new IfcSubContractResource ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSUBCONTRACTRESOURCETYPE": return new IfcSubContractResourceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSUBEDGE": return new IfcSubedge ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACECURVESWEPTAREASOLID": return new IfcSurfaceCurveSweptAreaSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACEFEATURE": return new IfcSurfaceFeature ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACEOFLINEAREXTRUSION": return new IfcSurfaceOfLinearExtrusion ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACEOFREVOLUTION": return new IfcSurfaceOfRevolution ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACEREINFORCEMENTAREA": return new IfcSurfaceReinforcementArea ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLE": return new IfcSurfaceStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLELIGHTING": return new IfcSurfaceStyleLighting ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLEREFRACTION": return new IfcSurfaceStyleRefraction ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLERENDERING": return new IfcSurfaceStyleRendering ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLESHADING": return new IfcSurfaceStyleShading ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLEWITHTEXTURES": return new IfcSurfaceStyleWithTextures ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSWEPTDISKSOLID": return new IfcSweptDiskSolid ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSWEPTDISKSOLIDPOLYGONAL": return new IfcSweptDiskSolidPolygonal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSWITCHINGDEVICE": return new IfcSwitchingDevice ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSWITCHINGDEVICETYPE": return new IfcSwitchingDeviceType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSYSTEM": return new IfcSystem ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSYSTEMFURNITUREELEMENT": return new IfcSystemFurnitureElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCSYSTEMFURNITUREELEMENTTYPE": return new IfcSystemFurnitureElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTSHAPEPROFILEDEF": return new IfcTShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTABLE": return new IfcTable ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTABLECOLUMN": return new IfcTableColumn ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTABLEROW": return new IfcTableRow ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTANK": return new IfcTank ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTANKTYPE": return new IfcTankType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTASK": return new IfcTask ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTASKTIME": return new IfcTaskTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTASKTIMERECURRING": return new IfcTaskTimeRecurring ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTASKTYPE": return new IfcTaskType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTELECOMADDRESS": return new IfcTelecomAddress ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTENDON": return new IfcTendon ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTENDONANCHOR": return new IfcTendonAnchor ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTENDONANCHORTYPE": return new IfcTendonAnchorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTENDONTYPE": return new IfcTendonType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTLITERAL": return new IfcTextLiteral ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTLITERALWITHEXTENT": return new IfcTextLiteralWithExtent ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLE": return new IfcTextStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLEFONTMODEL": return new IfcTextStyleFontModel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLEFORDEFINEDFONT": return new IfcTextStyleForDefinedFont ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLETEXTMODEL": return new IfcTextStyleTextModel ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTURECOORDINATEGENERATOR": return new IfcTextureCoordinateGenerator ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTUREMAP": return new IfcTextureMap ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTUREVERTEX": return new IfcTextureVertex ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTEXTUREVERTEXLIST": return new IfcTextureVertexList ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTIMEPERIOD": return new IfcTimePeriod ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTIMESERIESVALUE": return new IfcTimeSeriesValue ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTOPOLOGYREPRESENTATION": return new IfcTopologyRepresentation ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRANSFORMER": return new IfcTransformer ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRANSFORMERTYPE": return new IfcTransformerType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRANSPORTELEMENT": return new IfcTransportElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRANSPORTELEMENTTYPE": return new IfcTransportElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRAPEZIUMPROFILEDEF": return new IfcTrapeziumProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRIANGULATEDFACESET": return new IfcTriangulatedFaceSet ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTRIMMEDCURVE": return new IfcTrimmedCurve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTUBEBUNDLE": return new IfcTubeBundle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTUBEBUNDLETYPE": return new IfcTubeBundleType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTYPEOBJECT": return new IfcTypeObject ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCTYPEPRODUCT": return new IfcTypeProduct ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUSHAPEPROFILEDEF": return new IfcUShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUNITASSIGNMENT": return new IfcUnitAssignment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUNITARYCONTROLELEMENT": return new IfcUnitaryControlElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUNITARYCONTROLELEMENTTYPE": return new IfcUnitaryControlElementType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUNITARYEQUIPMENT": return new IfcUnitaryEquipment ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCUNITARYEQUIPMENTTYPE": return new IfcUnitaryEquipmentType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVALVE": return new IfcValve ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVALVETYPE": return new IfcValveType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVECTOR": return new IfcVector ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVERTEX": return new IfcVertex ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVERTEXLOOP": return new IfcVertexLoop ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVERTEXPOINT": return new IfcVertexPoint ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVIBRATIONISOLATOR": return new IfcVibrationIsolator ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVIBRATIONISOLATORTYPE": return new IfcVibrationIsolatorType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVIRTUALELEMENT": return new IfcVirtualElement ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVIRTUALGRIDINTERSECTION": return new IfcVirtualGridIntersection ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCVOIDINGFEATURE": return new IfcVoidingFeature ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWALL": return new IfcWall ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWALLELEMENTEDCASE": return new IfcWallElementedCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWALLSTANDARDCASE": return new IfcWallStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWALLTYPE": return new IfcWallType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWASTETERMINAL": return new IfcWasteTerminal ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWASTETERMINALTYPE": return new IfcWasteTerminalType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOW": return new IfcWindow ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOWLININGPROPERTIES": return new IfcWindowLiningProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOWPANELPROPERTIES": return new IfcWindowPanelProperties ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOWSTANDARDCASE": return new IfcWindowStandardCase ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOWSTYLE": return new IfcWindowStyle ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWINDOWTYPE": return new IfcWindowType ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWORKCALENDAR": return new IfcWorkCalendar ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWORKPLAN": return new IfcWorkPlan ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWORKSCHEDULE": return new IfcWorkSchedule ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCWORKTIME": return new IfcWorkTime ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCZSHAPEPROFILEDEF": return new IfcZShapeProfileDef ( model ) { Activated = activated, EntityLabel = entityLabel };
				case "IFCZONE": return new IfcZone ( model ) { Activated = activated, EntityLabel = entityLabel };
				default:
					throw new Exception("Type must be non-abstract type of IInstantiableEntity");
			}
		}
	}
}
