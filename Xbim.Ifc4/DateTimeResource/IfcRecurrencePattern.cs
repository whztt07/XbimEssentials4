// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using System.ComponentModel;
using System;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCRECURRENCEPATTERN")]
	public  partial class @IfcRecurrencePattern : INotifyPropertyChanged, IInstantiableEntity
	{
		#region Implementation of IPersistEntity
		public int EntityLabel {get; set;}
		public IModel Model { get; internal set; }

		protected bool IsActivated = false;

		public bool Activated { get { return IsActivated; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRecurrencePattern(IModel model) 		{ 
			Model = model; 
			_dayComponent = new ItemSet<IfcDayInMonthNumber>( model );
			_weekdayComponent = new ItemSet<IfcDayInWeekNumber>( model );
			_monthComponent = new ItemSet<IfcMonthInYearNumber>( model );
			_timePeriods = new ItemSet<IfcTimePeriod>( model );
		}

		#region Explicit attribute fields
		private IfcRecurrenceTypeEnum _recurrenceType;
		private ItemSet<IfcDayInMonthNumber> _dayComponent;
		private ItemSet<IfcDayInWeekNumber> _weekdayComponent;
		private ItemSet<IfcMonthInYearNumber> _monthComponent;
		private IfcInteger? _position;
		private IfcInteger? _interval;
		private IfcInteger? _occurrences;
		private ItemSet<IfcTimePeriod> _timePeriods;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcRecurrenceTypeEnum @RecurrenceType 
		{ 
			get 
			{
				if(IsActivated) return _recurrenceType;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _recurrenceType;
			} 
			set
			{
				SetValue( v =>  _recurrenceType = v, _recurrenceType, value,  "RecurrenceType");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Optional)]
		public ItemSet<IfcDayInMonthNumber> @DayComponent 
		{ 
			get 
			{
				if(IsActivated) return _dayComponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _dayComponent;
			} 
			set
			{
				SetValue( v =>  _dayComponent = v, _dayComponent, value,  "DayComponent");
			} 
		}
	
		[EntityAttribute(2, EntityAttributeState.Optional)]
		public ItemSet<IfcDayInWeekNumber> @WeekdayComponent 
		{ 
			get 
			{
				if(IsActivated) return _weekdayComponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _weekdayComponent;
			} 
			set
			{
				SetValue( v =>  _weekdayComponent = v, _weekdayComponent, value,  "WeekdayComponent");
			} 
		}
	
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public ItemSet<IfcMonthInYearNumber> @MonthComponent 
		{ 
			get 
			{
				if(IsActivated) return _monthComponent;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _monthComponent;
			} 
			set
			{
				SetValue( v =>  _monthComponent = v, _monthComponent, value,  "MonthComponent");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcInteger? @Position 
		{ 
			get 
			{
				if(IsActivated) return _position;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _position;
			} 
			set
			{
				SetValue( v =>  _position = v, _position, value,  "Position");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcInteger? @Interval 
		{ 
			get 
			{
				if(IsActivated) return _interval;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _interval;
			} 
			set
			{
				SetValue( v =>  _interval = v, _interval, value,  "Interval");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcInteger? @Occurrences 
		{ 
			get 
			{
				if(IsActivated) return _occurrences;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _occurrences;
			} 
			set
			{
				SetValue( v =>  _occurrences = v, _occurrences, value,  "Occurrences");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public ItemSet<IfcTimePeriod> @TimePeriods 
		{ 
			get 
			{
				if(IsActivated) return _timePeriods;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _timePeriods;
			} 
			set
			{
				SetValue( v =>  _timePeriods = v, _timePeriods, value,  "TimePeriods");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"RecurrenceType",
			"DayComponent",
			"WeekdayComponent",
			"MonthComponent",
			"Position",
			"Interval",
			"Occurrences",
			"TimePeriods",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @RecurrenceType;
				case 1: 
					return @DayComponent;
				case 2: 
					return @WeekdayComponent;
				case 3: 
					return @MonthComponent;
				case 4: 
					return @Position;
				case 5: 
					return @Interval;
				case 6: 
					return @Occurrences;
				case 7: 
					return @TimePeriods;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "RecurrenceType":  
					return @RecurrenceType;
				case "DayComponent":  
					return @DayComponent;
				case "WeekdayComponent":  
					return @WeekdayComponent;
				case "MonthComponent":  
					return @MonthComponent;
				case "Position":  
					return @Position;
				case "Interval":  
					return @Interval;
				case "Occurrences":  
					return @Occurrences;
				case "TimePeriods":  
					return @TimePeriods;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @RecurrenceType = (IfcRecurrenceTypeEnum)value;
					 break;
				case 1:
					 @DayComponent = (ItemSet<IfcDayInMonthNumber>)value;
					 break;
				case 2:
					 @WeekdayComponent = (ItemSet<IfcDayInWeekNumber>)value;
					 break;
				case 3:
					 @MonthComponent = (ItemSet<IfcMonthInYearNumber>)value;
					 break;
				case 4:
					 @Position = (IfcInteger?)value;
					 break;
				case 5:
					 @Interval = (IfcInteger?)value;
					 break;
				case 6:
					 @Occurrences = (IfcInteger?)value;
					 break;
				case 7:
					 @TimePeriods.Add((IfcTimePeriod)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "RecurrenceType":
					 if (value != null) @RecurrenceType = (IfcRecurrenceTypeEnum)value;
					 break;
				case "DayComponent":
					 @DayComponent = (ItemSet<IfcDayInMonthNumber>)value;
					 break;
				case "WeekdayComponent":
					 @WeekdayComponent = (ItemSet<IfcDayInWeekNumber>)value;
					 break;
				case "MonthComponent":
					 @MonthComponent = (ItemSet<IfcMonthInYearNumber>)value;
					 break;
				case "Position":
					 @Position = (IfcInteger?)value;
					 break;
				case "Interval":
					 @Interval = (IfcInteger?)value;
					 break;
				case "Occurrences":
					 @Occurrences = (IfcInteger?)value;
					 break;
				case "TimePeriods":
					 @TimePeriods.Add((IfcTimePeriod)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}