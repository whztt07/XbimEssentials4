// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:24
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCWORKTIME", 763)]
	public  partial class @IfcWorkTime : IfcSchedulingTime, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcWorkTime(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcRecurrencePattern _recurrencePattern;
		private IfcDate? _start;
		private IfcDate? _finish;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcRecurrencePattern @RecurrencePattern 
		{ 
			get 
			{
				if(Activated) return _recurrencePattern;
				
				Model.Activate(this, true);
				Activated = true;
				return _recurrencePattern;
			} 
			set
			{
				SetValue( v =>  _recurrencePattern = v, _recurrencePattern, value,  "RecurrencePattern");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcDate? @Start 
		{ 
			get 
			{
				if(Activated) return _start;
				
				Model.Activate(this, true);
				Activated = true;
				return _start;
			} 
			set
			{
				SetValue( v =>  _start = v, _start, value,  "Start");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDate? @Finish 
		{ 
			get 
			{
				if(Activated) return _finish;
				
				Model.Activate(this, true);
				Activated = true;
				return _finish;
			} 
			set
			{
				SetValue( v =>  _finish = v, _finish, value,  "Finish");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DataOrigin",
			"UserDefinedDataOrigin",
			"RecurrencePattern",
			"Start",
			"Finish",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DataOrigin;
				case 2: 
					return @UserDefinedDataOrigin;
				case 3: 
					return @RecurrencePattern;
				case 4: 
					return @Start;
				case 5: 
					return @Finish;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DataOrigin":  
					return @DataOrigin;
				case "UserDefinedDataOrigin":  
					return @UserDefinedDataOrigin;
				case "RecurrencePattern":  
					return @RecurrencePattern;
				case "Start":  
					return @Start;
				case "Finish":  
					return @Finish;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case 2:
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case 3:
					 @RecurrencePattern = (IfcRecurrencePattern)value;
					 break;
				case 4:
					 @Start = (IfcDate?)value;
					 break;
				case 5:
					 @Finish = (IfcDate?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DataOrigin":
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case "UserDefinedDataOrigin":
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case "RecurrencePattern":
					 @RecurrencePattern = (IfcRecurrencePattern)value;
					 break;
				case "Start":
					 @Start = (IfcDate?)value;
					 break;
				case "Finish":
					 @Finish = (IfcDate?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}