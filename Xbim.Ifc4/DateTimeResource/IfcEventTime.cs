// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:41
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCEVENTTIME", 238)]
	public  partial class @IfcEventTime : IfcSchedulingTime, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcEventTime(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDateTime? _actualDate;
		private IfcDateTime? _earlyDate;
		private IfcDateTime? _lateDate;
		private IfcDateTime? _scheduleDate;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcDateTime? @ActualDate 
		{ 
			get 
			{
				if(Activated) return _actualDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _actualDate;
			} 
			set
			{
				SetValue( v =>  _actualDate = v, _actualDate, value,  "ActualDate");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcDateTime? @EarlyDate 
		{ 
			get 
			{
				if(Activated) return _earlyDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _earlyDate;
			} 
			set
			{
				SetValue( v =>  _earlyDate = v, _earlyDate, value,  "EarlyDate");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDateTime? @LateDate 
		{ 
			get 
			{
				if(Activated) return _lateDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _lateDate;
			} 
			set
			{
				SetValue( v =>  _lateDate = v, _lateDate, value,  "LateDate");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcDateTime? @ScheduleDate 
		{ 
			get 
			{
				if(Activated) return _scheduleDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _scheduleDate;
			} 
			set
			{
				SetValue( v =>  _scheduleDate = v, _scheduleDate, value,  "ScheduleDate");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DataOrigin",
			"UserDefinedDataOrigin",
			"ActualDate",
			"EarlyDate",
			"LateDate",
			"ScheduleDate",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DataOrigin;
				case 2: 
					return @UserDefinedDataOrigin;
				case 3: 
					return @ActualDate;
				case 4: 
					return @EarlyDate;
				case 5: 
					return @LateDate;
				case 6: 
					return @ScheduleDate;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DataOrigin":  
					return @DataOrigin;
				case "UserDefinedDataOrigin":  
					return @UserDefinedDataOrigin;
				case "ActualDate":  
					return @ActualDate;
				case "EarlyDate":  
					return @EarlyDate;
				case "LateDate":  
					return @LateDate;
				case "ScheduleDate":  
					return @ScheduleDate;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DataOrigin = (IfcDataOriginEnum?)value;
					 break;
				case 2:
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case 3:
					 @ActualDate = (IfcDateTime?)value;
					 break;
				case 4:
					 @EarlyDate = (IfcDateTime?)value;
					 break;
				case 5:
					 @LateDate = (IfcDateTime?)value;
					 break;
				case 6:
					 @ScheduleDate = (IfcDateTime?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DataOrigin":
					 @DataOrigin = (IfcDataOriginEnum?)value;
					 break;
				case "UserDefinedDataOrigin":
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case "ActualDate":
					 @ActualDate = (IfcDateTime?)value;
					 break;
				case "EarlyDate":
					 @EarlyDate = (IfcDateTime?)value;
					 break;
				case "LateDate":
					 @LateDate = (IfcDateTime?)value;
					 break;
				case "ScheduleDate":
					 @ScheduleDate = (IfcDateTime?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}