// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		15.09.2015 07:03:39
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCLAGTIME", 329)]
	public  partial class @IfcLagTime : IfcSchedulingTime, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLagTime(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcTimeOrRatioSelect _lagValue;
		private IfcTaskDurationEnum _durationType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Mandatory)]
		public IfcTimeOrRatioSelect @LagValue 
		{ 
			get 
			{
				if(Activated) return _lagValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _lagValue;
			} 
			set
			{
				SetValue( v =>  _lagValue = v, _lagValue, value,  "LagValue");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcTaskDurationEnum @DurationType 
		{ 
			get 
			{
				if(Activated) return _durationType;
				
				Model.Activate(this, true);
				Activated = true;
				return _durationType;
			} 
			set
			{
				SetValue( v =>  _durationType = v, _durationType, value,  "DurationType");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DataOrigin",
			"UserDefinedDataOrigin",
			"LagValue",
			"DurationType",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DataOrigin;
				case 2: 
					return @UserDefinedDataOrigin;
				case 3: 
					return @LagValue;
				case 4: 
					return @DurationType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DataOrigin":  
					return @DataOrigin;
				case "UserDefinedDataOrigin":  
					return @UserDefinedDataOrigin;
				case "LagValue":  
					return @LagValue;
				case "DurationType":  
					return @DurationType;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DataOrigin = (IfcDataOriginEnum?)value;
					 break;
				case 2:
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case 3:
					 @LagValue = (IfcTimeOrRatioSelect)value;
					 break;
				case 4:
					 if (value != null) @DurationType = (IfcTaskDurationEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DataOrigin":
					 @DataOrigin = (IfcDataOriginEnum?)value;
					 break;
				case "UserDefinedDataOrigin":
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case "LagValue":
					 @LagValue = (IfcTimeOrRatioSelect)value;
					 break;
				case "DurationType":
					 if (value != null) @DurationType = (IfcTaskDurationEnum)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		
		public  override string WhereRule() 
		{
            throw new System.NotImplementedException();
		}
		#endregion

		
	}
}