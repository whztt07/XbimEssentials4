// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:43
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCRESOURCETIME")]
	public  partial class @IfcResourceTime : IfcSchedulingTime, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcResourceTime(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcDuration? _scheduleWork;
		private IfcPositiveRatioMeasure? _scheduleUsage;
		private IfcDateTime? _scheduleStart;
		private IfcDateTime? _scheduleFinish;
		private IfcLabel? _scheduleContour;
		private IfcDuration? _levelingDelay;
		private bool? _isOverAllocated;
		private IfcDateTime? _statusTime;
		private IfcDuration? _actualWork;
		private IfcPositiveRatioMeasure? _actualUsage;
		private IfcDateTime? _actualStart;
		private IfcDateTime? _actualFinish;
		private IfcDuration? _remainingWork;
		private IfcPositiveRatioMeasure? _remainingUsage;
		private IfcPositiveRatioMeasure? _completion;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcDuration? @ScheduleWork 
		{ 
			get 
			{
				if(IsActivated) return _scheduleWork;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _scheduleWork;
			} 
			set
			{
				SetValue( v =>  _scheduleWork = v, _scheduleWork, value,  "ScheduleWork");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ScheduleUsage 
		{ 
			get 
			{
				if(IsActivated) return _scheduleUsage;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _scheduleUsage;
			} 
			set
			{
				SetValue( v =>  _scheduleUsage = v, _scheduleUsage, value,  "ScheduleUsage");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDateTime? @ScheduleStart 
		{ 
			get 
			{
				if(IsActivated) return _scheduleStart;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _scheduleStart;
			} 
			set
			{
				SetValue( v =>  _scheduleStart = v, _scheduleStart, value,  "ScheduleStart");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcDateTime? @ScheduleFinish 
		{ 
			get 
			{
				if(IsActivated) return _scheduleFinish;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _scheduleFinish;
			} 
			set
			{
				SetValue( v =>  _scheduleFinish = v, _scheduleFinish, value,  "ScheduleFinish");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcLabel? @ScheduleContour 
		{ 
			get 
			{
				if(IsActivated) return _scheduleContour;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _scheduleContour;
			} 
			set
			{
				SetValue( v =>  _scheduleContour = v, _scheduleContour, value,  "ScheduleContour");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcDuration? @LevelingDelay 
		{ 
			get 
			{
				if(IsActivated) return _levelingDelay;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _levelingDelay;
			} 
			set
			{
				SetValue( v =>  _levelingDelay = v, _levelingDelay, value,  "LevelingDelay");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public bool? @IsOverAllocated 
		{ 
			get 
			{
				if(IsActivated) return _isOverAllocated;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _isOverAllocated;
			} 
			set
			{
				SetValue( v =>  _isOverAllocated = v, _isOverAllocated, value,  "IsOverAllocated");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcDateTime? @StatusTime 
		{ 
			get 
			{
				if(IsActivated) return _statusTime;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _statusTime;
			} 
			set
			{
				SetValue( v =>  _statusTime = v, _statusTime, value,  "StatusTime");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcDuration? @ActualWork 
		{ 
			get 
			{
				if(IsActivated) return _actualWork;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _actualWork;
			} 
			set
			{
				SetValue( v =>  _actualWork = v, _actualWork, value,  "ActualWork");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @ActualUsage 
		{ 
			get 
			{
				if(IsActivated) return _actualUsage;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _actualUsage;
			} 
			set
			{
				SetValue( v =>  _actualUsage = v, _actualUsage, value,  "ActualUsage");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public IfcDateTime? @ActualStart 
		{ 
			get 
			{
				if(IsActivated) return _actualStart;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _actualStart;
			} 
			set
			{
				SetValue( v =>  _actualStart = v, _actualStart, value,  "ActualStart");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional)]
		public IfcDateTime? @ActualFinish 
		{ 
			get 
			{
				if(IsActivated) return _actualFinish;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _actualFinish;
			} 
			set
			{
				SetValue( v =>  _actualFinish = v, _actualFinish, value,  "ActualFinish");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Optional)]
		public IfcDuration? @RemainingWork 
		{ 
			get 
			{
				if(IsActivated) return _remainingWork;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _remainingWork;
			} 
			set
			{
				SetValue( v =>  _remainingWork = v, _remainingWork, value,  "RemainingWork");
			} 
		}
	
		[EntityAttribute(16, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @RemainingUsage 
		{ 
			get 
			{
				if(IsActivated) return _remainingUsage;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _remainingUsage;
			} 
			set
			{
				SetValue( v =>  _remainingUsage = v, _remainingUsage, value,  "RemainingUsage");
			} 
		}
	
		[EntityAttribute(17, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @Completion 
		{ 
			get 
			{
				if(IsActivated) return _completion;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _completion;
			} 
			set
			{
				SetValue( v =>  _completion = v, _completion, value,  "Completion");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DataOrigin",
			"UserDefinedDataOrigin",
			"ScheduleWork",
			"ScheduleUsage",
			"ScheduleStart",
			"ScheduleFinish",
			"ScheduleContour",
			"LevelingDelay",
			"IsOverAllocated",
			"StatusTime",
			"ActualWork",
			"ActualUsage",
			"ActualStart",
			"ActualFinish",
			"RemainingWork",
			"RemainingUsage",
			"Completion",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DataOrigin;
				case 2: 
					return @UserDefinedDataOrigin;
				case 3: 
					return @ScheduleWork;
				case 4: 
					return @ScheduleUsage;
				case 5: 
					return @ScheduleStart;
				case 6: 
					return @ScheduleFinish;
				case 7: 
					return @ScheduleContour;
				case 8: 
					return @LevelingDelay;
				case 9: 
					return @IsOverAllocated;
				case 10: 
					return @StatusTime;
				case 11: 
					return @ActualWork;
				case 12: 
					return @ActualUsage;
				case 13: 
					return @ActualStart;
				case 14: 
					return @ActualFinish;
				case 15: 
					return @RemainingWork;
				case 16: 
					return @RemainingUsage;
				case 17: 
					return @Completion;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DataOrigin":  
					return @DataOrigin;
				case "UserDefinedDataOrigin":  
					return @UserDefinedDataOrigin;
				case "ScheduleWork":  
					return @ScheduleWork;
				case "ScheduleUsage":  
					return @ScheduleUsage;
				case "ScheduleStart":  
					return @ScheduleStart;
				case "ScheduleFinish":  
					return @ScheduleFinish;
				case "ScheduleContour":  
					return @ScheduleContour;
				case "LevelingDelay":  
					return @LevelingDelay;
				case "IsOverAllocated":  
					return @IsOverAllocated;
				case "StatusTime":  
					return @StatusTime;
				case "ActualWork":  
					return @ActualWork;
				case "ActualUsage":  
					return @ActualUsage;
				case "ActualStart":  
					return @ActualStart;
				case "ActualFinish":  
					return @ActualFinish;
				case "RemainingWork":  
					return @RemainingWork;
				case "RemainingUsage":  
					return @RemainingUsage;
				case "Completion":  
					return @Completion;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case 2:
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case 3:
					 @ScheduleWork = (IfcDuration?)value;
					 break;
				case 4:
					 @ScheduleUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case 5:
					 @ScheduleStart = (IfcDateTime?)value;
					 break;
				case 6:
					 @ScheduleFinish = (IfcDateTime?)value;
					 break;
				case 7:
					 @ScheduleContour = (IfcLabel?)value;
					 break;
				case 8:
					 @LevelingDelay = (IfcDuration?)value;
					 break;
				case 9:
					 @IsOverAllocated = (bool?)value;
					 break;
				case 10:
					 @StatusTime = (IfcDateTime?)value;
					 break;
				case 11:
					 @ActualWork = (IfcDuration?)value;
					 break;
				case 12:
					 @ActualUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case 13:
					 @ActualStart = (IfcDateTime?)value;
					 break;
				case 14:
					 @ActualFinish = (IfcDateTime?)value;
					 break;
				case 15:
					 @RemainingWork = (IfcDuration?)value;
					 break;
				case 16:
					 @RemainingUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case 17:
					 @Completion = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DataOrigin":
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case "UserDefinedDataOrigin":
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case "ScheduleWork":
					 @ScheduleWork = (IfcDuration?)value;
					 break;
				case "ScheduleUsage":
					 @ScheduleUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ScheduleStart":
					 @ScheduleStart = (IfcDateTime?)value;
					 break;
				case "ScheduleFinish":
					 @ScheduleFinish = (IfcDateTime?)value;
					 break;
				case "ScheduleContour":
					 @ScheduleContour = (IfcLabel?)value;
					 break;
				case "LevelingDelay":
					 @LevelingDelay = (IfcDuration?)value;
					 break;
				case "IsOverAllocated":
					 @IsOverAllocated = (bool?)value;
					 break;
				case "StatusTime":
					 @StatusTime = (IfcDateTime?)value;
					 break;
				case "ActualWork":
					 @ActualWork = (IfcDuration?)value;
					 break;
				case "ActualUsage":
					 @ActualUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case "ActualStart":
					 @ActualStart = (IfcDateTime?)value;
					 break;
				case "ActualFinish":
					 @ActualFinish = (IfcDateTime?)value;
					 break;
				case "RemainingWork":
					 @RemainingWork = (IfcDuration?)value;
					 break;
				case "RemainingUsage":
					 @RemainingUsage = (IfcPositiveRatioMeasure?)value;
					 break;
				case "Completion":
					 @Completion = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}