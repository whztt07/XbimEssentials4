// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:24
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.DateTimeResource
{
	[EntityName("IFCTASKTIME", 691)]
	public  partial class @IfcTaskTime : IfcSchedulingTime, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTaskTime(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcTaskDurationEnum _durationType;
		private IfcDuration? _scheduleDuration;
		private IfcDateTime? _scheduleStart;
		private IfcDateTime? _scheduleFinish;
		private IfcDateTime? _earlyStart;
		private IfcDateTime? _earlyFinish;
		private IfcDateTime? _lateStart;
		private IfcDateTime? _lateFinish;
		private IfcDuration? _freeFloat;
		private IfcDuration? _totalFloat;
		private bool? _isCritical;
		private IfcDateTime? _statusTime;
		private IfcDuration? _actualDuration;
		private IfcDateTime? _actualStart;
		private IfcDateTime? _actualFinish;
		private IfcDuration? _remainingTime;
		private IfcPositiveRatioMeasure? _completion;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional)]
		public IfcTaskDurationEnum @DurationType 
		{ 
			get 
			{
				if(Activated) return _durationType;
				
				Model.Activate(this, true);
				Activated = true;
				return _durationType;
			} 
			set
			{
				SetValue( v =>  _durationType = v, _durationType, value,  "DurationType");
			} 
		}
	
		[EntityAttribute(4, EntityAttributeState.Optional)]
		public IfcDuration? @ScheduleDuration 
		{ 
			get 
			{
				if(Activated) return _scheduleDuration;
				
				Model.Activate(this, true);
				Activated = true;
				return _scheduleDuration;
			} 
			set
			{
				SetValue( v =>  _scheduleDuration = v, _scheduleDuration, value,  "ScheduleDuration");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcDateTime? @ScheduleStart 
		{ 
			get 
			{
				if(Activated) return _scheduleStart;
				
				Model.Activate(this, true);
				Activated = true;
				return _scheduleStart;
			} 
			set
			{
				SetValue( v =>  _scheduleStart = v, _scheduleStart, value,  "ScheduleStart");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcDateTime? @ScheduleFinish 
		{ 
			get 
			{
				if(Activated) return _scheduleFinish;
				
				Model.Activate(this, true);
				Activated = true;
				return _scheduleFinish;
			} 
			set
			{
				SetValue( v =>  _scheduleFinish = v, _scheduleFinish, value,  "ScheduleFinish");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcDateTime? @EarlyStart 
		{ 
			get 
			{
				if(Activated) return _earlyStart;
				
				Model.Activate(this, true);
				Activated = true;
				return _earlyStart;
			} 
			set
			{
				SetValue( v =>  _earlyStart = v, _earlyStart, value,  "EarlyStart");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcDateTime? @EarlyFinish 
		{ 
			get 
			{
				if(Activated) return _earlyFinish;
				
				Model.Activate(this, true);
				Activated = true;
				return _earlyFinish;
			} 
			set
			{
				SetValue( v =>  _earlyFinish = v, _earlyFinish, value,  "EarlyFinish");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcDateTime? @LateStart 
		{ 
			get 
			{
				if(Activated) return _lateStart;
				
				Model.Activate(this, true);
				Activated = true;
				return _lateStart;
			} 
			set
			{
				SetValue( v =>  _lateStart = v, _lateStart, value,  "LateStart");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcDateTime? @LateFinish 
		{ 
			get 
			{
				if(Activated) return _lateFinish;
				
				Model.Activate(this, true);
				Activated = true;
				return _lateFinish;
			} 
			set
			{
				SetValue( v =>  _lateFinish = v, _lateFinish, value,  "LateFinish");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcDuration? @FreeFloat 
		{ 
			get 
			{
				if(Activated) return _freeFloat;
				
				Model.Activate(this, true);
				Activated = true;
				return _freeFloat;
			} 
			set
			{
				SetValue( v =>  _freeFloat = v, _freeFloat, value,  "FreeFloat");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcDuration? @TotalFloat 
		{ 
			get 
			{
				if(Activated) return _totalFloat;
				
				Model.Activate(this, true);
				Activated = true;
				return _totalFloat;
			} 
			set
			{
				SetValue( v =>  _totalFloat = v, _totalFloat, value,  "TotalFloat");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public bool? @IsCritical 
		{ 
			get 
			{
				if(Activated) return _isCritical;
				
				Model.Activate(this, true);
				Activated = true;
				return _isCritical;
			} 
			set
			{
				SetValue( v =>  _isCritical = v, _isCritical, value,  "IsCritical");
			} 
		}
	
		[EntityAttribute(14, EntityAttributeState.Optional)]
		public IfcDateTime? @StatusTime 
		{ 
			get 
			{
				if(Activated) return _statusTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _statusTime;
			} 
			set
			{
				SetValue( v =>  _statusTime = v, _statusTime, value,  "StatusTime");
			} 
		}
	
		[EntityAttribute(15, EntityAttributeState.Optional)]
		public IfcDuration? @ActualDuration 
		{ 
			get 
			{
				if(Activated) return _actualDuration;
				
				Model.Activate(this, true);
				Activated = true;
				return _actualDuration;
			} 
			set
			{
				SetValue( v =>  _actualDuration = v, _actualDuration, value,  "ActualDuration");
			} 
		}
	
		[EntityAttribute(16, EntityAttributeState.Optional)]
		public IfcDateTime? @ActualStart 
		{ 
			get 
			{
				if(Activated) return _actualStart;
				
				Model.Activate(this, true);
				Activated = true;
				return _actualStart;
			} 
			set
			{
				SetValue( v =>  _actualStart = v, _actualStart, value,  "ActualStart");
			} 
		}
	
		[EntityAttribute(17, EntityAttributeState.Optional)]
		public IfcDateTime? @ActualFinish 
		{ 
			get 
			{
				if(Activated) return _actualFinish;
				
				Model.Activate(this, true);
				Activated = true;
				return _actualFinish;
			} 
			set
			{
				SetValue( v =>  _actualFinish = v, _actualFinish, value,  "ActualFinish");
			} 
		}
	
		[EntityAttribute(18, EntityAttributeState.Optional)]
		public IfcDuration? @RemainingTime 
		{ 
			get 
			{
				if(Activated) return _remainingTime;
				
				Model.Activate(this, true);
				Activated = true;
				return _remainingTime;
			} 
			set
			{
				SetValue( v =>  _remainingTime = v, _remainingTime, value,  "RemainingTime");
			} 
		}
	
		[EntityAttribute(19, EntityAttributeState.Optional)]
		public IfcPositiveRatioMeasure? @Completion 
		{ 
			get 
			{
				if(Activated) return _completion;
				
				Model.Activate(this, true);
				Activated = true;
				return _completion;
			} 
			set
			{
				SetValue( v =>  _completion = v, _completion, value,  "Completion");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"DataOrigin",
			"UserDefinedDataOrigin",
			"DurationType",
			"ScheduleDuration",
			"ScheduleStart",
			"ScheduleFinish",
			"EarlyStart",
			"EarlyFinish",
			"LateStart",
			"LateFinish",
			"FreeFloat",
			"TotalFloat",
			"IsCritical",
			"StatusTime",
			"ActualDuration",
			"ActualStart",
			"ActualFinish",
			"RemainingTime",
			"Completion",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @DataOrigin;
				case 2: 
					return @UserDefinedDataOrigin;
				case 3: 
					return @DurationType;
				case 4: 
					return @ScheduleDuration;
				case 5: 
					return @ScheduleStart;
				case 6: 
					return @ScheduleFinish;
				case 7: 
					return @EarlyStart;
				case 8: 
					return @EarlyFinish;
				case 9: 
					return @LateStart;
				case 10: 
					return @LateFinish;
				case 11: 
					return @FreeFloat;
				case 12: 
					return @TotalFloat;
				case 13: 
					return @IsCritical;
				case 14: 
					return @StatusTime;
				case 15: 
					return @ActualDuration;
				case 16: 
					return @ActualStart;
				case 17: 
					return @ActualFinish;
				case 18: 
					return @RemainingTime;
				case 19: 
					return @Completion;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "DataOrigin":  
					return @DataOrigin;
				case "UserDefinedDataOrigin":  
					return @UserDefinedDataOrigin;
				case "DurationType":  
					return @DurationType;
				case "ScheduleDuration":  
					return @ScheduleDuration;
				case "ScheduleStart":  
					return @ScheduleStart;
				case "ScheduleFinish":  
					return @ScheduleFinish;
				case "EarlyStart":  
					return @EarlyStart;
				case "EarlyFinish":  
					return @EarlyFinish;
				case "LateStart":  
					return @LateStart;
				case "LateFinish":  
					return @LateFinish;
				case "FreeFloat":  
					return @FreeFloat;
				case "TotalFloat":  
					return @TotalFloat;
				case "IsCritical":  
					return @IsCritical;
				case "StatusTime":  
					return @StatusTime;
				case "ActualDuration":  
					return @ActualDuration;
				case "ActualStart":  
					return @ActualStart;
				case "ActualFinish":  
					return @ActualFinish;
				case "RemainingTime":  
					return @RemainingTime;
				case "Completion":  
					return @Completion;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case 2:
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case 3:
					 @DurationType = (IfcTaskDurationEnum)value;
					 break;
				case 4:
					 @ScheduleDuration = (IfcDuration?)value;
					 break;
				case 5:
					 @ScheduleStart = (IfcDateTime?)value;
					 break;
				case 6:
					 @ScheduleFinish = (IfcDateTime?)value;
					 break;
				case 7:
					 @EarlyStart = (IfcDateTime?)value;
					 break;
				case 8:
					 @EarlyFinish = (IfcDateTime?)value;
					 break;
				case 9:
					 @LateStart = (IfcDateTime?)value;
					 break;
				case 10:
					 @LateFinish = (IfcDateTime?)value;
					 break;
				case 11:
					 @FreeFloat = (IfcDuration?)value;
					 break;
				case 12:
					 @TotalFloat = (IfcDuration?)value;
					 break;
				case 13:
					 @IsCritical = (bool?)value;
					 break;
				case 14:
					 @StatusTime = (IfcDateTime?)value;
					 break;
				case 15:
					 @ActualDuration = (IfcDuration?)value;
					 break;
				case 16:
					 @ActualStart = (IfcDateTime?)value;
					 break;
				case 17:
					 @ActualFinish = (IfcDateTime?)value;
					 break;
				case 18:
					 @RemainingTime = (IfcDuration?)value;
					 break;
				case 19:
					 @Completion = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "DataOrigin":
					 @DataOrigin = (IfcDataOriginEnum)value;
					 break;
				case "UserDefinedDataOrigin":
					 @UserDefinedDataOrigin = (IfcLabel?)value;
					 break;
				case "DurationType":
					 @DurationType = (IfcTaskDurationEnum)value;
					 break;
				case "ScheduleDuration":
					 @ScheduleDuration = (IfcDuration?)value;
					 break;
				case "ScheduleStart":
					 @ScheduleStart = (IfcDateTime?)value;
					 break;
				case "ScheduleFinish":
					 @ScheduleFinish = (IfcDateTime?)value;
					 break;
				case "EarlyStart":
					 @EarlyStart = (IfcDateTime?)value;
					 break;
				case "EarlyFinish":
					 @EarlyFinish = (IfcDateTime?)value;
					 break;
				case "LateStart":
					 @LateStart = (IfcDateTime?)value;
					 break;
				case "LateFinish":
					 @LateFinish = (IfcDateTime?)value;
					 break;
				case "FreeFloat":
					 @FreeFloat = (IfcDuration?)value;
					 break;
				case "TotalFloat":
					 @TotalFloat = (IfcDuration?)value;
					 break;
				case "IsCritical":
					 @IsCritical = (bool?)value;
					 break;
				case "StatusTime":
					 @StatusTime = (IfcDateTime?)value;
					 break;
				case "ActualDuration":
					 @ActualDuration = (IfcDuration?)value;
					 break;
				case "ActualStart":
					 @ActualStart = (IfcDateTime?)value;
					 break;
				case "ActualFinish":
					 @ActualFinish = (IfcDateTime?)value;
					 break;
				case "RemainingTime":
					 @RemainingTime = (IfcDuration?)value;
					 break;
				case "Completion":
					 @Completion = (IfcPositiveRatioMeasure?)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}