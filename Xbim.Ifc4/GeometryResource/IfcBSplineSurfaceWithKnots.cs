// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:41
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometryResource
{
	[EntityName("IFCBSPLINESURFACEWITHKNOTS")]
	public  partial class @IfcBSplineSurfaceWithKnots : IfcBSplineSurface, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBSplineSurfaceWithKnots(IModel model) : base(model) 		{ 
			Model = model; 
			_uMultiplicities = new ItemSet<int>( model );
			_vMultiplicities = new ItemSet<int>( model );
			_uKnots = new ItemSet<IfcParameterValue>( model );
			_vKnots = new ItemSet<IfcParameterValue>( model );
		}

		#region Explicit attribute fields
		private ItemSet<int> _uMultiplicities;
		private ItemSet<int> _vMultiplicities;
		private ItemSet<IfcParameterValue> _uKnots;
		private ItemSet<IfcParameterValue> _vKnots;
		private IfcKnotType _knotSpec;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public ItemSet<int> @UMultiplicities 
		{ 
			get 
			{
				if(IsActivated) return _uMultiplicities;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _uMultiplicities;
			} 
			set
			{
				SetValue( v =>  _uMultiplicities = v, _uMultiplicities, value,  "UMultiplicities");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public ItemSet<int> @VMultiplicities 
		{ 
			get 
			{
				if(IsActivated) return _vMultiplicities;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _vMultiplicities;
			} 
			set
			{
				SetValue( v =>  _vMultiplicities = v, _vMultiplicities, value,  "VMultiplicities");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public ItemSet<IfcParameterValue> @UKnots 
		{ 
			get 
			{
				if(IsActivated) return _uKnots;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _uKnots;
			} 
			set
			{
				SetValue( v =>  _uKnots = v, _uKnots, value,  "UKnots");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Mandatory)]
		public ItemSet<IfcParameterValue> @VKnots 
		{ 
			get 
			{
				if(IsActivated) return _vKnots;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _vKnots;
			} 
			set
			{
				SetValue( v =>  _vKnots = v, _vKnots, value,  "VKnots");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Mandatory)]
		public IfcKnotType @KnotSpec 
		{ 
			get 
			{
				if(IsActivated) return _knotSpec;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _knotSpec;
			} 
			set
			{
				SetValue( v =>  _knotSpec = v, _knotSpec, value,  "KnotSpec");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"UDegree",
			"VDegree",
			"ControlPointsList",
			"SurfaceForm",
			"UClosed",
			"VClosed",
			"SelfIntersect",
			"UMultiplicities",
			"VMultiplicities",
			"UKnots",
			"VKnots",
			"KnotSpec",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @UDegree;
				case 1: 
					return @VDegree;
				case 2: 
					return @ControlPointsList;
				case 3: 
					return @SurfaceForm;
				case 4: 
					return @UClosed;
				case 5: 
					return @VClosed;
				case 6: 
					return @SelfIntersect;
				case 7: 
					return @UMultiplicities;
				case 8: 
					return @VMultiplicities;
				case 9: 
					return @UKnots;
				case 10: 
					return @VKnots;
				case 11: 
					return @KnotSpec;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "UDegree":  
					return @UDegree;
				case "VDegree":  
					return @VDegree;
				case "ControlPointsList":  
					return @ControlPointsList;
				case "SurfaceForm":  
					return @SurfaceForm;
				case "UClosed":  
					return @UClosed;
				case "VClosed":  
					return @VClosed;
				case "SelfIntersect":  
					return @SelfIntersect;
				case "UMultiplicities":  
					return @UMultiplicities;
				case "VMultiplicities":  
					return @VMultiplicities;
				case "UKnots":  
					return @UKnots;
				case "VKnots":  
					return @VKnots;
				case "KnotSpec":  
					return @KnotSpec;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @UDegree = (int)value;
					 break;
				case 1:
					 if (value != null) @VDegree = (int)value;
					 break;
				case 2:
					 @ControlPointsList = (ItemSet<ItemSet<IfcCartesianPoint>>)value;
					 break;
				case 3:
					 if (value != null) @SurfaceForm = (IfcBSplineSurfaceForm)value;
					 break;
				case 4:
					 @UClosed = (bool?)value;
					 break;
				case 5:
					 @VClosed = (bool?)value;
					 break;
				case 6:
					 @SelfIntersect = (bool?)value;
					 break;
				case 7:
					 @UMultiplicities.Add((int)value);
					 break;
				case 8:
					 @VMultiplicities.Add((int)value);
					 break;
				case 9:
					 @UKnots = (ItemSet<IfcParameterValue>)value;
					 break;
				case 10:
					 @VKnots = (ItemSet<IfcParameterValue>)value;
					 break;
				case 11:
					 if (value != null) @KnotSpec = (IfcKnotType)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "UDegree":
					 if (value != null) @UDegree = (int)value;
					 break;
				case "VDegree":
					 if (value != null) @VDegree = (int)value;
					 break;
				case "ControlPointsList":
					 @ControlPointsList = (ItemSet<ItemSet<IfcCartesianPoint>>)value;
					 break;
				case "SurfaceForm":
					 if (value != null) @SurfaceForm = (IfcBSplineSurfaceForm)value;
					 break;
				case "UClosed":
					 @UClosed = (bool?)value;
					 break;
				case "VClosed":
					 @VClosed = (bool?)value;
					 break;
				case "SelfIntersect":
					 @SelfIntersect = (bool?)value;
					 break;
				case "UMultiplicities":
					 @UMultiplicities.Add((int)value);
					 break;
				case "VMultiplicities":
					 @VMultiplicities.Add((int)value);
					 break;
				case "UKnots":
					 @UKnots = (ItemSet<IfcParameterValue>)value;
					 break;
				case "VKnots":
					 @VKnots = (ItemSet<IfcParameterValue>)value;
					 break;
				case "KnotSpec":
					 if (value != null) @KnotSpec = (IfcKnotType)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*UDirectionConstraints:                                SELF\IfcBSplineSurface.UUpper, UMultiplicities, UKnots);*/
		/*VDirectionConstraints:                                SELF\IfcBSplineSurface.VUpper, VMultiplicities, VKnots);*/
		/*CorrespondingULists:	CorrespondingULists : SIZEOF(UMultiplicities) = KnotUUpper;*/
		/*CorrespondingVLists:	CorrespondingVLists : SIZEOF(VMultiplicities) = KnotVUpper;*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}