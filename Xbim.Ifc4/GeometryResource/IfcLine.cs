// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometryResource
{
	[EntityName("IFCLINE", 344)]
	public  partial class @IfcLine : IfcCurve, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLine(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcCartesianPoint _pnt;
		private IfcVector _dir;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(0, EntityAttributeState.Mandatory)]
		public IfcCartesianPoint @Pnt 
		{ 
			get 
			{
				if(Activated) return _pnt;
				
				Model.Activate(this, true);
				Activated = true;
				return _pnt;
			} 
			set
			{
				SetValue( v =>  _pnt = v, _pnt, value,  "Pnt");
			} 
		}
	
		[EntityAttribute(1, EntityAttributeState.Mandatory)]
		public IfcVector @Dir 
		{ 
			get 
			{
				if(Activated) return _dir;
				
				Model.Activate(this, true);
				Activated = true;
				return _dir;
			} 
			set
			{
				SetValue( v =>  _dir = v, _dir, value,  "Dir");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Pnt",
			"Dir",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Pnt;
				case 1: 
					return @Dir;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Pnt":  
					return @Pnt;
				case "Dir":  
					return @Dir;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Pnt = (IfcCartesianPoint)value;
					 break;
				case 1:
					 @Dir = (IfcVector)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Pnt":
					 @Pnt = (IfcCartesianPoint)value;
					 break;
				case "Dir":
					 @Dir = (IfcVector)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*SameDim:	SameDim : Dir.Dim = Pnt.Dim;*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}