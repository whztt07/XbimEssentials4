// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 09:16:41
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.GeometryResource
{
	[EntityName("IFCBSPLINECURVEWITHKNOTS")]
	public  partial class @IfcBSplineCurveWithKnots : IfcBSplineCurve, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBSplineCurveWithKnots(IModel model) : base(model) 		{ 
			Model = model; 
			_knotMultiplicities = new ItemSet<int>( model );
			_knots = new ItemSet<IfcParameterValue>( model );
		}

		#region Explicit attribute fields
		private ItemSet<int> _knotMultiplicities;
		private ItemSet<IfcParameterValue> _knots;
		private IfcKnotType _knotSpec;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public ItemSet<int> @KnotMultiplicities 
		{ 
			get 
			{
				if(IsActivated) return _knotMultiplicities;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _knotMultiplicities;
			} 
			set
			{
				SetValue( v =>  _knotMultiplicities = v, _knotMultiplicities, value,  "KnotMultiplicities");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public ItemSet<IfcParameterValue> @Knots 
		{ 
			get 
			{
				if(IsActivated) return _knots;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _knots;
			} 
			set
			{
				SetValue( v =>  _knots = v, _knots, value,  "Knots");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public IfcKnotType @KnotSpec 
		{ 
			get 
			{
				if(IsActivated) return _knotSpec;
				
				Model.Activate(this, true);
				IsActivated = true;
				return _knotSpec;
			} 
			set
			{
				SetValue( v =>  _knotSpec = v, _knotSpec, value,  "KnotSpec");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Degree",
			"ControlPointsList",
			"CurveForm",
			"ClosedCurve",
			"SelfIntersect",
			"KnotMultiplicities",
			"Knots",
			"KnotSpec",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Degree;
				case 1: 
					return @ControlPointsList;
				case 2: 
					return @CurveForm;
				case 3: 
					return @ClosedCurve;
				case 4: 
					return @SelfIntersect;
				case 5: 
					return @KnotMultiplicities;
				case 6: 
					return @Knots;
				case 7: 
					return @KnotSpec;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Degree":  
					return @Degree;
				case "ControlPointsList":  
					return @ControlPointsList;
				case "CurveForm":  
					return @CurveForm;
				case "ClosedCurve":  
					return @ClosedCurve;
				case "SelfIntersect":  
					return @SelfIntersect;
				case "KnotMultiplicities":  
					return @KnotMultiplicities;
				case "Knots":  
					return @Knots;
				case "KnotSpec":  
					return @KnotSpec;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Degree = (int)value;
					 break;
				case 1:
					 @ControlPointsList.Add((IfcCartesianPoint)value);
					 break;
				case 2:
					 if (value != null) @CurveForm = (IfcBSplineCurveForm)value;
					 break;
				case 3:
					 @ClosedCurve = (bool?)value;
					 break;
				case 4:
					 @SelfIntersect = (bool?)value;
					 break;
				case 5:
					 @KnotMultiplicities.Add((int)value);
					 break;
				case 6:
					 @Knots = (ItemSet<IfcParameterValue>)value;
					 break;
				case 7:
					 if (value != null) @KnotSpec = (IfcKnotType)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Degree":
					 if (value != null) @Degree = (int)value;
					 break;
				case "ControlPointsList":
					 @ControlPointsList.Add((IfcCartesianPoint)value);
					 break;
				case "CurveForm":
					 if (value != null) @CurveForm = (IfcBSplineCurveForm)value;
					 break;
				case "ClosedCurve":
					 @ClosedCurve = (bool?)value;
					 break;
				case "SelfIntersect":
					 @SelfIntersect = (bool?)value;
					 break;
				case "KnotMultiplicities":
					 @KnotMultiplicities.Add((int)value);
					 break;
				case "Knots":
					 @Knots = (ItemSet<IfcParameterValue>)value;
					 break;
				case "KnotSpec":
					 if (value != null) @KnotSpec = (IfcKnotType)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*ConsistentBSpline:                               UpperIndexOnControlPoints, KnotMultiplicities, Knots);*/
		/*CorrespondingKnotLists:	CorrespondingKnotLists : SIZEOF(KnotMultiplicities) = UpperIndexOnKnots;*/
		#endregion

		#region IPersist implementation
		public void Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}