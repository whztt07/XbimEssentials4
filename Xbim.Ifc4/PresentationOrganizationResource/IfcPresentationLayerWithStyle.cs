// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.PresentationAppearanceResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationOrganizationResource
{
	[EntityName("IFCPRESENTATIONLAYERWITHSTYLE", 441)]
	public  partial class @IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcPresentationLayerWithStyle(IModel model) : base(model) 		{ 
			Model = model; 
			_layerStyles = new ItemSet<IfcPresentationStyle>( model );
		}

		#region Explicit attribute fields
		private bool? _layerOn;
		private bool? _layerFrozen;
		private bool? _layerBlocked;
		private ItemSet<IfcPresentationStyle> _layerStyles;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public bool? @LayerOn 
		{ 
			get 
			{
				if(Activated) return _layerOn;
				
				Model.Activate(this, true);
				Activated = true;
				return _layerOn;
			} 
			set
			{
				SetValue( v =>  _layerOn = v, _layerOn, value,  "LayerOn");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Mandatory)]
		public bool? @LayerFrozen 
		{ 
			get 
			{
				if(Activated) return _layerFrozen;
				
				Model.Activate(this, true);
				Activated = true;
				return _layerFrozen;
			} 
			set
			{
				SetValue( v =>  _layerFrozen = v, _layerFrozen, value,  "LayerFrozen");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public bool? @LayerBlocked 
		{ 
			get 
			{
				if(Activated) return _layerBlocked;
				
				Model.Activate(this, true);
				Activated = true;
				return _layerBlocked;
			} 
			set
			{
				SetValue( v =>  _layerBlocked = v, _layerBlocked, value,  "LayerBlocked");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public ItemSet<IfcPresentationStyle> @LayerStyles 
		{ 
			get 
			{
				if(Activated) return _layerStyles;
				
				Model.Activate(this, true);
				Activated = true;
				return _layerStyles;
			} 
			set
			{
				SetValue( v =>  _layerStyles = v, _layerStyles, value,  "LayerStyles");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"Description",
			"AssignedItems",
			"Identifier",
			"LayerOn",
			"LayerFrozen",
			"LayerBlocked",
			"LayerStyles",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @Description;
				case 2: 
					return @AssignedItems;
				case 3: 
					return @Identifier;
				case 4: 
					return @LayerOn;
				case 5: 
					return @LayerFrozen;
				case 6: 
					return @LayerBlocked;
				case 7: 
					return @LayerStyles;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "AssignedItems":  
					return @AssignedItems;
				case "Identifier":  
					return @Identifier;
				case "LayerOn":  
					return @LayerOn;
				case "LayerFrozen":  
					return @LayerFrozen;
				case "LayerBlocked":  
					return @LayerBlocked;
				case "LayerStyles":  
					return @LayerStyles;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case 1:
					 @Description = (IfcText?)value;
					 break;
				case 2:
					 @AssignedItems.Add((IfcLayeredItem)value);
					 break;
				case 3:
					 @Identifier = (IfcIdentifier?)value;
					 break;
				case 4:
					 @LayerOn = (bool?)value;
					 break;
				case 5:
					 @LayerFrozen = (bool?)value;
					 break;
				case 6:
					 @LayerBlocked = (bool?)value;
					 break;
				case 7:
					 @LayerStyles.Add((IfcPresentationStyle)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 if (value != null) @Name = (IfcLabel)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "AssignedItems":
					 @AssignedItems.Add((IfcLayeredItem)value);
					 break;
				case "Identifier":
					 @Identifier = (IfcIdentifier?)value;
					 break;
				case "LayerOn":
					 @LayerOn = (bool?)value;
					 break;
				case "LayerFrozen":
					 @LayerFrozen = (bool?)value;
					 break;
				case "LayerBlocked":
					 @LayerBlocked = (bool?)value;
					 break;
				case "LayerStyles":
					 @LayerStyles.Add((IfcPresentationStyle)value);
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

		#region Where rules
		/*ApplicableOnlyToItems:                              )) = SIZEOF(AssignedItems);*/
		#endregion

		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}