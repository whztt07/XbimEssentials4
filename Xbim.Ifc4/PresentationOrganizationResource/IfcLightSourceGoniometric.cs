// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		09/09/2015 04:20:42
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.PresentationAppearanceResource;
using Xbim.Ifc4.GeometryResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.PresentationOrganizationResource
{
	[EntityName("IFCLIGHTSOURCEGONIOMETRIC", 341)]
	public  partial class @IfcLightSourceGoniometric : IfcLightSource, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLightSourceGoniometric(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcAxis2Placement3D _position;
		private IfcColourRgb _colourAppearance;
		private IfcThermodynamicTemperatureMeasure _colourTemperature;
		private IfcLuminousFluxMeasure _luminousFlux;
		private IfcLightEmissionSourceEnum _lightEmissionSource;
		private IfcLightDistributionDataSourceSelect _lightDistributionDataSource;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory)]
		public IfcAxis2Placement3D @Position 
		{ 
			get 
			{
				if(Activated) return _position;
				
				Model.Activate(this, true);
				Activated = true;
				return _position;
			} 
			set
			{
				SetValue( v =>  _position = v, _position, value,  "Position");
			} 
		}
	
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcColourRgb @ColourAppearance 
		{ 
			get 
			{
				if(Activated) return _colourAppearance;
				
				Model.Activate(this, true);
				Activated = true;
				return _colourAppearance;
			} 
			set
			{
				SetValue( v =>  _colourAppearance = v, _colourAppearance, value,  "ColourAppearance");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Mandatory)]
		public IfcThermodynamicTemperatureMeasure @ColourTemperature 
		{ 
			get 
			{
				if(Activated) return _colourTemperature;
				
				Model.Activate(this, true);
				Activated = true;
				return _colourTemperature;
			} 
			set
			{
				SetValue( v =>  _colourTemperature = v, _colourTemperature, value,  "ColourTemperature");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Mandatory)]
		public IfcLuminousFluxMeasure @LuminousFlux 
		{ 
			get 
			{
				if(Activated) return _luminousFlux;
				
				Model.Activate(this, true);
				Activated = true;
				return _luminousFlux;
			} 
			set
			{
				SetValue( v =>  _luminousFlux = v, _luminousFlux, value,  "LuminousFlux");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Mandatory)]
		public IfcLightEmissionSourceEnum @LightEmissionSource 
		{ 
			get 
			{
				if(Activated) return _lightEmissionSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _lightEmissionSource;
			} 
			set
			{
				SetValue( v =>  _lightEmissionSource = v, _lightEmissionSource, value,  "LightEmissionSource");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Mandatory)]
		public IfcLightDistributionDataSourceSelect @LightDistributionDataSource 
		{ 
			get 
			{
				if(Activated) return _lightDistributionDataSource;
				
				Model.Activate(this, true);
				Activated = true;
				return _lightDistributionDataSource;
			} 
			set
			{
				SetValue( v =>  _lightDistributionDataSource = v, _lightDistributionDataSource, value,  "LightDistributionDataSource");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"Name",
			"LightColour",
			"AmbientIntensity",
			"Intensity",
			"Position",
			"ColourAppearance",
			"ColourTemperature",
			"LuminousFlux",
			"LightEmissionSource",
			"LightDistributionDataSource",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @Name;
				case 1: 
					return @LightColour;
				case 2: 
					return @AmbientIntensity;
				case 3: 
					return @Intensity;
				case 4: 
					return @Position;
				case 5: 
					return @ColourAppearance;
				case 6: 
					return @ColourTemperature;
				case 7: 
					return @LuminousFlux;
				case 8: 
					return @LightEmissionSource;
				case 9: 
					return @LightDistributionDataSource;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "Name":  
					return @Name;
				case "LightColour":  
					return @LightColour;
				case "AmbientIntensity":  
					return @AmbientIntensity;
				case "Intensity":  
					return @Intensity;
				case "Position":  
					return @Position;
				case "ColourAppearance":  
					return @ColourAppearance;
				case "ColourTemperature":  
					return @ColourTemperature;
				case "LuminousFlux":  
					return @LuminousFlux;
				case "LightEmissionSource":  
					return @LightEmissionSource;
				case "LightDistributionDataSource":  
					return @LightDistributionDataSource;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 @Name = (IfcLabel?)value;
					 break;
				case 1:
					 @LightColour = (IfcColourRgb)value;
					 break;
				case 2:
					 @AmbientIntensity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case 3:
					 @Intensity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case 4:
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case 5:
					 @ColourAppearance = (IfcColourRgb)value;
					 break;
				case 6:
					 if (value != null) @ColourTemperature = (IfcThermodynamicTemperatureMeasure)value;
					 break;
				case 7:
					 if (value != null) @LuminousFlux = (IfcLuminousFluxMeasure)value;
					 break;
				case 8:
					 if (value != null) @LightEmissionSource = (IfcLightEmissionSourceEnum)value;
					 break;
				case 9:
					 @LightDistributionDataSource = (IfcLightDistributionDataSourceSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "LightColour":
					 @LightColour = (IfcColourRgb)value;
					 break;
				case "AmbientIntensity":
					 @AmbientIntensity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case "Intensity":
					 @Intensity = (IfcNormalisedRatioMeasure?)value;
					 break;
				case "Position":
					 @Position = (IfcAxis2Placement3D)value;
					 break;
				case "ColourAppearance":
					 @ColourAppearance = (IfcColourRgb)value;
					 break;
				case "ColourTemperature":
					 if (value != null) @ColourTemperature = (IfcThermodynamicTemperatureMeasure)value;
					 break;
				case "LuminousFlux":
					 if (value != null) @LuminousFlux = (IfcLuminousFluxMeasure)value;
					 break;
				case "LightEmissionSource":
					 if (value != null) @LightEmissionSource = (IfcLightEmissionSourceEnum)value;
					 break;
				case "LightDistributionDataSource":
					 @LightDistributionDataSource = (IfcLightDistributionDataSourceSelect)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

		public  override string WhereRule() 
		{
			return "";
		}
	}
}