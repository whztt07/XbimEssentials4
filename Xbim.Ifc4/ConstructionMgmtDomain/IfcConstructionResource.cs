// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		24.09.2015 10:03:40
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.DateTimeResource;
using Xbim.Ifc4.QuantityResource;
using Xbim.Ifc4.CostResource;
using Xbim.Common;
using Xbim.Common.Exceptions;

namespace Xbim.Ifc4.ConstructionMgmtDomain
{
	[IndexedClass]
	[ExpressType("IFCCONSTRUCTIONRESOURCE", 523)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcConstructionResource : IfcResource
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcConstructionResource(IModel model) : base(model) 		{ 
			Model = model; 
			_baseCosts = new OptionalItemSet<IfcAppliedValue>( this );
		}

		#region Explicit attribute fields
		private IfcResourceTime _usage;
		private OptionalItemSet<IfcAppliedValue> _baseCosts;
		private IfcPhysicalQuantity _baseQuantity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcResourceTime @Usage 
		{ 
			get 
			{
				if(Activated) return _usage;
				
				Model.Activate(this, true);
				Activated = true;
				return _usage;
			} 
			set
			{
				SetValue( v =>  _usage = v, _usage, value,  "Usage");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.Class, 1, -1)]
		public OptionalItemSet<IfcAppliedValue> @BaseCosts 
		{ 
			get 
			{
				if(Activated) return _baseCosts;
				
				Model.Activate(this, true);
				Activated = true;
				return _baseCosts;
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1)]
		public IfcPhysicalQuantity @BaseQuantity 
		{ 
			get 
			{
				if(Activated) return _baseQuantity;
				
				Model.Activate(this, true);
				Activated = true;
				return _baseQuantity;
			} 
			set
			{
				SetValue( v =>  _baseQuantity = v, _baseQuantity, value,  "BaseQuantity");
			} 
		}
	
		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					base.Parse(propIndex, value); 
					return;
				case 7: 
					_usage = (IfcResourceTime)(value.EntityVal);
					return;
				case 8: 
					if (_baseCosts == null) _baseCosts = new OptionalItemSet<IfcAppliedValue>( this );
					_baseCosts.InternalAdd((IfcAppliedValue)value.EntityVal);
					return;
				case 9: 
					_baseQuantity = (IfcPhysicalQuantity)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion
	}
}