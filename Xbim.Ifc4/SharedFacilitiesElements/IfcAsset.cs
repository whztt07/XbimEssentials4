// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//		08/09/2015 02:29:19
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.CostResource;
using Xbim.Ifc4.ActorResource;
using Xbim.Ifc4.DateTimeResource;
using System.Collections.Generic;
using Xbim.Common;

namespace Xbim.Ifc4.SharedFacilitiesElements
{
	[EntityName("IFCASSET", 26)]
	public  partial class @IfcAsset : IfcGroup, IInstantiableEntity
	{
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAsset(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcIdentifier? _identification;
		private IfcCostValue _originalValue;
		private IfcCostValue _currentValue;
		private IfcCostValue _totalReplacementCost;
		private IfcActorSelect _owner;
		private IfcActorSelect _user;
		private IfcPerson _responsiblePerson;
		private IfcDate? _incorporationDate;
		private IfcCostValue _depreciatedValue;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Optional)]
		public IfcIdentifier? @Identification 
		{ 
			get 
			{
				if(Activated) return _identification;
				
				Model.Activate(this, true);
				Activated = true;
				return _identification;
			} 
			set
			{
				SetValue( v =>  _identification = v, _identification, value,  "Identification");
			} 
		}
	
		[EntityAttribute(6, EntityAttributeState.Optional)]
		public IfcCostValue @OriginalValue 
		{ 
			get 
			{
				if(Activated) return _originalValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _originalValue;
			} 
			set
			{
				SetValue( v =>  _originalValue = v, _originalValue, value,  "OriginalValue");
			} 
		}
	
		[EntityAttribute(7, EntityAttributeState.Optional)]
		public IfcCostValue @CurrentValue 
		{ 
			get 
			{
				if(Activated) return _currentValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _currentValue;
			} 
			set
			{
				SetValue( v =>  _currentValue = v, _currentValue, value,  "CurrentValue");
			} 
		}
	
		[EntityAttribute(8, EntityAttributeState.Optional)]
		public IfcCostValue @TotalReplacementCost 
		{ 
			get 
			{
				if(Activated) return _totalReplacementCost;
				
				Model.Activate(this, true);
				Activated = true;
				return _totalReplacementCost;
			} 
			set
			{
				SetValue( v =>  _totalReplacementCost = v, _totalReplacementCost, value,  "TotalReplacementCost");
			} 
		}
	
		[EntityAttribute(9, EntityAttributeState.Optional)]
		public IfcActorSelect @Owner 
		{ 
			get 
			{
				if(Activated) return _owner;
				
				Model.Activate(this, true);
				Activated = true;
				return _owner;
			} 
			set
			{
				SetValue( v =>  _owner = v, _owner, value,  "Owner");
			} 
		}
	
		[EntityAttribute(10, EntityAttributeState.Optional)]
		public IfcActorSelect @User 
		{ 
			get 
			{
				if(Activated) return _user;
				
				Model.Activate(this, true);
				Activated = true;
				return _user;
			} 
			set
			{
				SetValue( v =>  _user = v, _user, value,  "User");
			} 
		}
	
		[EntityAttribute(11, EntityAttributeState.Optional)]
		public IfcPerson @ResponsiblePerson 
		{ 
			get 
			{
				if(Activated) return _responsiblePerson;
				
				Model.Activate(this, true);
				Activated = true;
				return _responsiblePerson;
			} 
			set
			{
				SetValue( v =>  _responsiblePerson = v, _responsiblePerson, value,  "ResponsiblePerson");
			} 
		}
	
		[EntityAttribute(12, EntityAttributeState.Optional)]
		public IfcDate? @IncorporationDate 
		{ 
			get 
			{
				if(Activated) return _incorporationDate;
				
				Model.Activate(this, true);
				Activated = true;
				return _incorporationDate;
			} 
			set
			{
				SetValue( v =>  _incorporationDate = v, _incorporationDate, value,  "IncorporationDate");
			} 
		}
	
		[EntityAttribute(13, EntityAttributeState.Optional)]
		public IfcCostValue @DepreciatedValue 
		{ 
			get 
			{
				if(Activated) return _depreciatedValue;
				
				Model.Activate(this, true);
				Activated = true;
				return _depreciatedValue;
			} 
			set
			{
				SetValue( v =>  _depreciatedValue = v, _depreciatedValue, value,  "DepreciatedValue");
			} 
		}
	
		#endregion

		#region Inverse attributes

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
			"GlobalId",
			"OwnerHistory",
			"Name",
			"Description",
			"ObjectType",
			"Identification",
			"OriginalValue",
			"CurrentValue",
			"TotalReplacementCost",
			"Owner",
			"User",
			"ResponsiblePerson",
			"IncorporationDate",
			"DepreciatedValue",
		};

		IEnumerable<string> IInstantiableEntity.PropertyNames { get { return _attributeNames; } }

		object IInstantiableEntity.GetValue(int index)
		{
			switch(index)
			{
				case 0: 
					return @GlobalId;
				case 1: 
					return @OwnerHistory;
				case 2: 
					return @Name;
				case 3: 
					return @Description;
				case 4: 
					return @ObjectType;
				case 5: 
					return @Identification;
				case 6: 
					return @OriginalValue;
				case 7: 
					return @CurrentValue;
				case 8: 
					return @TotalReplacementCost;
				case 9: 
					return @Owner;
				case 10: 
					return @User;
				case 11: 
					return @ResponsiblePerson;
				case 12: 
					return @IncorporationDate;
				case 13: 
					return @DepreciatedValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object IInstantiableEntity.GetValue(string name)
		{
			switch(name)
			{
				case "GlobalId":  
					return @GlobalId;
				case "OwnerHistory":  
					return @OwnerHistory;
				case "Name":  
					return @Name;
				case "Description":  
					return @Description;
				case "ObjectType":  
					return @ObjectType;
				case "Identification":  
					return @Identification;
				case "OriginalValue":  
					return @OriginalValue;
				case "CurrentValue":  
					return @CurrentValue;
				case "TotalReplacementCost":  
					return @TotalReplacementCost;
				case "Owner":  
					return @Owner;
				case "User":  
					return @User;
				case "ResponsiblePerson":  
					return @ResponsiblePerson;
				case "IncorporationDate":  
					return @IncorporationDate;
				case "DepreciatedValue":  
					return @DepreciatedValue;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(int index, object value)
		{
			switch(index)
			{
				case 0:
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case 1:
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case 2:
					 @Name = (IfcLabel?)value;
					 break;
				case 3:
					 @Description = (IfcText?)value;
					 break;
				case 4:
					 @ObjectType = (IfcLabel?)value;
					 break;
				case 5:
					 @Identification = (IfcIdentifier?)value;
					 break;
				case 6:
					 @OriginalValue = (IfcCostValue)value;
					 break;
				case 7:
					 @CurrentValue = (IfcCostValue)value;
					 break;
				case 8:
					 @TotalReplacementCost = (IfcCostValue)value;
					 break;
				case 9:
					 @Owner = (IfcActorSelect)value;
					 break;
				case 10:
					 @User = (IfcActorSelect)value;
					 break;
				case 11:
					 @ResponsiblePerson = (IfcPerson)value;
					 break;
				case 12:
					 @IncorporationDate = (IfcDate?)value;
					 break;
				case 13:
					 @DepreciatedValue = (IfcCostValue)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void IInstantiableEntity.SetValue(string propName, object value)
		{
			switch(propName)
			{
				case "GlobalId":
					 if (value != null) @GlobalId = (IfcGloballyUniqueId)value;
					 break;
				case "OwnerHistory":
					 @OwnerHistory = (IfcOwnerHistory)value;
					 break;
				case "Name":
					 @Name = (IfcLabel?)value;
					 break;
				case "Description":
					 @Description = (IfcText?)value;
					 break;
				case "ObjectType":
					 @ObjectType = (IfcLabel?)value;
					 break;
				case "Identification":
					 @Identification = (IfcIdentifier?)value;
					 break;
				case "OriginalValue":
					 @OriginalValue = (IfcCostValue)value;
					 break;
				case "CurrentValue":
					 @CurrentValue = (IfcCostValue)value;
					 break;
				case "TotalReplacementCost":
					 @TotalReplacementCost = (IfcCostValue)value;
					 break;
				case "Owner":
					 @Owner = (IfcActorSelect)value;
					 break;
				case "User":
					 @User = (IfcActorSelect)value;
					 break;
				case "ResponsiblePerson":
					 @ResponsiblePerson = (IfcPerson)value;
					 break;
				case "IncorporationDate":
					 @IncorporationDate = (IfcDate?)value;
					 break;
				case "DepreciatedValue":
					 @DepreciatedValue = (IfcCostValue)value;
					 break;
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion


		#region IPersist implementation
		void IPersist.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}
		#endregion

	}
}